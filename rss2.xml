<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deep into Android</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Persist + Plan = Growing</description>
    <pubDate>Tue, 01 May 2018 07:11:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>可能会改变你的话</title>
      <link>http://yoursite.com/2018/04/22/Some%20awesome%20tips/</link>
      <guid>http://yoursite.com/2018/04/22/Some%20awesome%20tips/</guid>
      <pubDate>Sun, 22 Apr 2018 13:17:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://jsonchao.github.io/knowledgehierarchy/" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样。</h4><pre><code>这是一篇记录平时读书遇到的一些让人觉得会改变自己的话。</code></pre><h4 id="Some-awesome-tips"><a href="#Some-awesome-tips" class="headerlink" title="Some awesome tips"></a>Some awesome tips</h4><pre><code>1.一个浪头打过来，最好的办法是迎上去了解个究竟，而不是漠视，或者干脆当事情没有发生。2.记住这个教训：别猜，去问！去查！3.隔一段时间重顾知识是记忆的关键方法。不要一次性学完一项知识就不管了，这样你无法真正的掌握。隔一段时间回顾一下，每次重复，你都会加深自己的理解，次数多了，你就会理解每个细节，成为真正的专家。4.对于一个技术通常我们需要抱有这样的疑问它是什么 一句话概括解决了什么问题 存在的意义怎样去使用它怎样解决了问题 内部的实现它的缺点是什么 多角度分析5.高效率的学习方法。理清楚概念很重要做好控制变量法多动手实践，与理论结合抓住重点，剔除干扰因素6.关于如何选择第三方库确定这个库是否是必需的这个库能否带来开发效率的提升，降低代码的维护成本这个库的学习成本如何 比如rxjava其实学习成本会相对高一些。这个库的质量如何，不要仅仅看star，更要看issue的处理情况。7.怎样练习算法题？每道算法题都先自己去实现，先写思路，然后自己去实现一遍，然后再看看答案，记住答案的思路，第二天再重新按照答案的思路实现一遍。8.&quot;另类&quot;的学习方法抄书的奥妙——那就是延缓阅读速度，不至遗漏每一个重要的细节：眼到，手到，心到，其实不仅书抄得，代码(优秀源码)也抄得。9.建议：建立逐字稿计算机网络相关的逐字稿计算机操作系统相关的逐字稿数据库相关的逐字稿设计模式相关的逐字稿数据结构与算法相关的逐字稿Java知识相关的逐字稿Kotlin知识相关的逐字稿Python知识相关的逐字稿React Native知识相关的逐字稿Flutter知识相关的逐字稿小程序知识相关的逐字稿JS知识相关的逐字稿Android知识相关的逐字稿与技术无关的逐字稿10.如何提升你的阅读能力？只字不差的反复阅读真正的获取知识，是通过阅读，深入思考与践行11.如何高效阅读一篇文章？由主题扩展为知识树尝试描述尝试记忆12.如何阅读源码？准备：Java设计模式，Java高级相关熟练掌握这个库先Google了解软件的整体架构设计搭建系统，把源码跑起来开始阅读：根据你对系统的理解，设计几个主要的测试案例，定义好输入，输出。(Debug一遍肯定是不行的，需要Debug很多遍)第一篇抛弃细节，抓住主要流程，第二篇，第三篇，再去看各个部分的细节。阅读的时候同时使用UML画出系统的类图。主要的测试案例明白了，丰富测试案例，考虑一些分支。这一步会非常非常地花费时间，但是你做完了，对系统的理解绝对有质的飞跃。13.想象一个来自未来的自己，他非常自信，非常成功，拥有你现在所希望的一切，他会对现在的你说些什么？他怎么说，你就怎么去做，10年之后，你就变成了他。14.重视实践，充分运用感性认知潜能，在项目中磨炼自己，才是正确的学习之道。在实践中，在某些关键动作上刻意练习，也会取得事半功倍的效果。15.我们需要从别人身上学习。从老师、领导、同事、下属甚至对手身上学习，是快速成长的重要手段。16.多多总结，多多分享，善莫大焉。17.解答别人的问题也是个人成长的重要手段。有时候，某个问题自己本来不太懂，但是在给别人讲解的时候却豁然开朗。所以，“诲人不倦”利人惠己。18.学习计划最好能结合工作计划，理论联系实际结合，快速学以致用。19.良好的用人方式应该如下：首选选择相信，在面临失败后，收缩信任度。查找失败的原因，提供改进意见，提升下属的能力。总是给下属机会，在恰当地时机给下属更高的挑战。 总之，苍天大树来自一颗小种子，要相信成长的力量。</code></pre><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/22/Some%20awesome%20tips/#disqus_thread</comments>
    </item>
    
    <item>
      <title>初识人工智能</title>
      <link>http://yoursite.com/2018/03/18/%E5%88%9D%E8%AF%86%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</link>
      <guid>http://yoursite.com/2018/03/18/%E5%88%9D%E8%AF%86%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</guid>
      <pubDate>Sun, 18 Mar 2018 14:15:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://jsonchao.github.io/knowledgehierarchy/" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样。</h4><h3 id="AI-人工智能-的idea起源于20世纪50年代，在20世纪80年代时，ML-机器学习-开始变得流行起来，在大约2010年，DL-深度学习-在AI的推动下有了大的发展。下图是三者直接的关系图："><a href="#AI-人工智能-的idea起源于20世纪50年代，在20世纪80年代时，ML-机器学习-开始变得流行起来，在大约2010年，DL-深度学习-在AI的推动下有了大的发展。下图是三者直接的关系图：" class="headerlink" title="AI(人工智能)的idea起源于20世纪50年代，在20世纪80年代时，ML(机器学习)开始变得流行起来，在大约2010年，DL(深度学习)在AI的推动下有了大的发展。下图是三者直接的关系图："></a>AI(人工智能)的idea起源于20世纪50年代，在20世纪80年代时，ML(机器学习)开始变得流行起来，在大约2010年，DL(深度学习)在AI的推动下有了大的发展。下图是三者直接的关系图：</h3><p><img src="https://note.youdao.com/yws/public/resource/12ec8de4ff02f0af21b5ce1a93cbf9a9/xmlnote/A1389FE91E5D4696B23BEDBD955D115C/20679" alt="image"></p><h3 id="关于人工智能，我们所需要了解的"><a href="#关于人工智能，我们所需要了解的" class="headerlink" title="关于人工智能，我们所需要了解的"></a>关于人工智能，我们所需要了解的</h3><pre><code>what（人工智能是什么？）：人工智能（英语：Artificial Intelligence, AI）亦称机器智能，是指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序的手段实现的类人智能技术。why（为什么要使用它(作用)？）：AI是一个制造智能机器的科学与工程，它的核心问题包括建构能够跟人类似甚至超越的推理、知识、规划、学习、交流、感知、移动和操作物体的能力等，以更好地实现某一领域的特定目标（例如搜索、逻辑推演、创造力等等）。how（学习AI该从哪方面着手？）：见下方。。</code></pre><h3 id="AI的应用领域"><a href="#AI的应用领域" class="headerlink" title="AI的应用领域"></a>AI的应用领域</h3><p>AI的应用领域很广泛，目前主要涉及到的领域如下：</p><pre><code>智能控制机器人学自动化技术语言和图像理解遗传编程</code></pre><p>涉及到的概念：</p><pre><code>智能控制：what（它是什么？）：智能控制是针对控制对象及其环境、控制目标和任务的不确定性和复杂性而提出的一种控制技术。why（为什么要使用智能控制？）：能够减小或消除被控对象的被控制量的控制偏差。how（有哪些人工智能控制方法？）：类神经网络，模糊逻辑，机器学习，进化计算和遗传算法等等。机器人学：what（它是什么？）：是一项涵盖了机器人的设计、建造、运作、以及应用的跨领域科技，就如同电脑系统之控制、感测回授、以及资讯处理。自动化技术：what（它是什么？）：是一门综合性技术，它和控制论、信息论、系统工程、计算机技术、电子学、液压气压技术、自动控制等都有着十分密切的关系，而其中又以“控制理论”和“计算机技术”对自动化技术的影响最大。一些过程已经被完全自动化。语言和图像理解：what（它是什么？）：图像识别是对图像整体的语义内容进行类别判定，而语言识别是指能够让计算机自动地识别语音中所携带信息的技术。遗传编程：what（它是什么？）：是一种从生物演化过程得到灵感的自动化生成和选择计算机程序来完成用户定义的任务的技术。</code></pre><p>AI的主要研究范畴如下：</p><pre><code>机器学习（Machine Learning）自然语言处理（NLP： Natural Language Processing）人工神经网络（Artificial Neural Network）数据挖掘（Data Mining）智能搜索（Intelligent Search）遗传算法</code></pre><p>涉及到的概念：</p><pre><code>机器学习：what（他是什么？）机器学习可简单概括为“用数据解决问题”，即：数据 + 学习算法 = 模型(映射或函数)    机器学习是人工智能的一个分支，近30多年已发展为一门多领域交叉学科，机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。why（为什么要学习机器学习？）就是因为机器学习算法的这种可预测性，能利用规律对未知数据进行预测，从而会有比较广的应用范围，现如今，机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。how（如何开始机器学习？）首先，我们需要了解机器学习分为哪几种。监督学习：从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。无监督学习：    与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有聚类。半监督学习：介于监督学习与无监督学习之间。增强学习：通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。选择了要学习的机器学习类别，具体的就是机器学习算法的学习了，此处不再概述。进行机器学习的七步曲：搜集数据准备数据选择模型训练模型评估模型参数微调预测自然语言处理：what（它是什么？）自然语言处理是人工智能和语言学领域的分支学科，它分为两部分，自然语言生成系统和自然语言理解系统。自然语言生成系统把计算机数据转化为自然语言。自然语言理解系统把自然语言转化为计算机程序更易于处理的形式。why（为什么要使用自然语言处理？）就是为了使计算机生成和理解自然语言。how（自然语言的处理范畴？）自然语言的处理范畴比较广，主要有文本朗读、语音合成、语音识别、文本分类、信息检索、信息抽取、问答系统、机器翻译、自动摘要等等。 人工神经网络：what（它是什么？）人工神经网络（英语：artificial neural network，缩写ANN），简称神经网络（neural network，缩写NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。why（为什么要使用人工神经网络？）就是因为它对于函数进行估计或近似的这种能力，现在，已经被用于解决各种各样的问题，例如机器视觉和语音识别。how（如何使用人工神经网络？）具体的学习请参照本文总结。数据挖掘：what（它是什么？）数据挖掘（英语：data mining）是一个跨学科的计算机科学分支，它是用人工智能、机器学习、统计学和数据库的交叉方法在相对较大型的数据集中发现模式的计算过程。why（为什么要使用数据挖掘？）用于从大量数据中提取模式和知识。how（如何进行数据挖掘？）数据挖掘的方法类似于机器学习，包括监督式学习、非监督式学习、半监督学习、增强学习。监督式学习包括：分类、估计、预测。非监督式学习包括：聚类，关联规则分析。智能搜索：what（它是什么？）智能搜索其实就是一些能提高搜索策略的搜索方式。比如：深度优先搜索、迭代加深搜索（ID搜索）、启发式OR图搜索算法、AND-OR图启发式搜索、约束满足搜索等等。遗传算法：what（它是什么？）遗传算法（英语：genetic algorithm (GA)）是计算数学中用于解决最佳化的搜索算法，是进化算法的一种。进化算法最初是借鉴了进化生物学中的一些现象而发展起来的，这些现象包括遗传、突变、自然选择以及杂交等。</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于AI，目前应用范围主要集中在机器学习、深度学习(用于学习机器学习的一种技术)、NLP、图像识别与处理这几个方面，请选择适合您的分支。</p><p>如果您对深度学习有兴趣，可以从<a href="http://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="external">吴恩达的深度学习课程</a>开始。同样的，如果对机器学习有兴趣，可以从<a href="https://developers.google.cn/machine-learning/crash-course/" target="_blank" rel="external">Google的机器学习速成课程</a>、<a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="external">吴恩达的机器学习课程</a>、<a href="https://zhuanlan.zhihu.com/tensorflowcn" target="_blank" rel="external">Google Cloud AI Adventure 中文版教程</a>、<a href="https://zhuanlan.zhihu.com/machine-learning-book?topic=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0" target="_blank" rel="external">写给大家看的机器学习书</a>着手。</p><p>除此之外，这里还有一些关于AI的快速开发框架:最知名的如<a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">TensorFlow</a>(使用数据流图形计算来扩展机器学习的框架)、<a href="https://github.com/BVLC/caffe" target="_blank" rel="external">caffe</a>(一个快速开放的深度学习框架)、<a href="https://github.com/keras-team/keras" target="_blank" rel="external">keras</a>(对人类的深度学习框架)、<br><a href="https://github.com/apache/incubator-mxnet" target="_blank" rel="external">MXNet</a>(MxNet是一个兼并效率和弹性的深度学习框架)、<a href="http://torch.ch/" target="_blank" rel="external">torch</a>(torch是一个广泛支持机器学习算法的科学计算框架)、<a href="https://github.com/Theano/Theano" target="_blank" rel="external">theano</a>(theano是一个允许你去高效地定义、优化、评估涉及多维数组的数学表达的python库)。</p><p>最热门的TensorFlow入门推荐-<a href="https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html#0" target="_blank" rel="external">Google的TensorFlow入门指南</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/18/%E5%88%9D%E8%AF%86%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机网络（二、IP地址）</title>
      <link>http://yoursite.com/2018/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%E3%80%81IP%E5%9C%B0%E5%9D%80%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%E3%80%81IP%E5%9C%B0%E5%9D%80%EF%BC%89/</guid>
      <pubDate>Wed, 21 Feb 2018 11:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://jsonchao.github.io/knowledgehierarchy/" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样。</h4><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>这是计算机网络的第二部分——IP地址。what(IP地址是什么？)IP地址全称为Internet Protocol Address，是分配给网络上使用IP的设备的标签。它由网络号(包括子网号)和主机号组成，分为IPv4和IPv6两大类。why(为什么使用它？)给连接网络的每一台设备都贴上一个标签，以作区分。how(怎么使用它？)请看下文。。</code></pre><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><pre><code>IP地址是唯一的，IPv4有2的32次方个地址。</code></pre><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><pre><code>按地址范围分：A类地址(二进位)以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255;B类地址(二进位)以10开头，前两个字节作为网络号，地址范围为：128.0.0.0~191.255.255.255;C地址(二进位)以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255；D类地址(二进位)以1110开头，地址范围是224.0.0.0~239.255.255.255；E类地址(二进位)以1111开头，地址范围是240.0.0.0~255.255.255.255。注意：只有A,B,C有网络号和主机号之分。按功能分：网络地址：网络地址的主机号全为0，它代表整个网络。广播地址：通常称为直接广播地址，区分于受限广播地址。广播地址的主机号全为1，与网络地址主机号相反。向某个网络的广播地址发送消息，该网络的所有主机号都能接收到该消息。组播地址：D类地址作为组播地址，负责一对多的通信。保留地址：E类地址作为保留地址，供以后使用。其它特殊的地址：255.255.255.255：该地址指的是受限的广播地址，它只能用于本地网络。直接广播地址能通过某些路由器，而受限的广播地址不能通过路由器。0.0.0.0:常用于寻找自己的IP地址。(以255.255.255.255为目的地址，向本地范围的服务器发送IP请求分组)回环地址：127.0.0.0/8被用作回环地址，即本地地址，用的最多的是127.0.0.1。A、B、C类私有地址：也称为专用地址，不会再全球使用，只具有本地意义。A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255。B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255。C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255。注意：IP地址后的/8、/12、/16代表网络号位数，后面的主机号为可变的。</code></pre><h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><pre><code>IPv6的地址长度为2的128次方个地址。通常写作8组每组四个十六机制的形式。2001:0DB8:0000:0000:0000:0000:1428:57ab当有某组为0000时，可省略为2001:0DB8::1428:57ab同时每组前面有0时，可省略为2001:DB8::1428:57ab</code></pre><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能称为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能称为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能称为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能称为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%E3%80%81IP%E5%9C%B0%E5%9D%80%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机网络（一、网络分层）</title>
      <link>http://yoursite.com/2018/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%E3%80%81%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%E3%80%81%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%EF%BC%89/</guid>
      <pubDate>Tue, 13 Feb 2018 10:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://jsonchao.github.io/knowledgehierarchy/" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样。</h4><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>最近工作中发现计算机相关基础很薄弱，因此，从本篇博客开始，将会对计算机相关知识进行系统性的学习总结。众所周知，计算机网络的核心就是网络协议。what（计算机网络协议是什么？）网络协议是为计算机网络中进行数据交换而建立的规则、标准或者可认为是约定的集合，它同世界各地的语言一样，品类繁多。但是，为了让使用不同协议的网络群组进行通信，在1977年到1979年，Arpa公司推出了TCP/IP标准网络协议，现如今，它已经成为了Internet中的“通用语言“（TCP/IP标准网络协议就如世界标准交流语言英语的作用一样）。why（为什么要使用它？）因为不同的用户的数据终端可能采取的字符集的不同的，两者需要通信，就必须遵循一定的标准，这个标准就是网络协议。how（如何使用它？）见下方。。</code></pre><h4 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h4><pre><code>1978年，国际标准化组织(ISO)推出了OSI/RM模型，OSI将网络协议分为7层模型，常见的网络协议分层还有TCP/IP四层模型、TCP/IP五层模型。如下图，依次为TCP/IP四层模型、TCP/IP五层模型、ISO七层模型。</code></pre><p><img src="https://note.youdao.com/yws/public/resource/12ec8de4ff02f0af21b5ce1a93cbf9a9/xmlnote/9F7557F83C3D494A81CD205B13B25D80/19018" alt="image"></p><h5 id="1-物理层："><a href="#1-物理层：" class="headerlink" title="1.物理层："></a>1.物理层：</h5><pre><code>what：为传输数据所需的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。why：因为它能确保原始的数据可在各种物理媒体上传输。how：物理层映射的设备有多种，如中继器(放大器)、集线器、光纤等等。涉及的概念：中继器：what：一种物理设备，用于放大、增强信号，频率转换及功率增强。why：因为它能放大、增强信号，可以转换频率及增强功率，主要应用于增强传输的信息强度，保证信息的到达率。how：大部分中继器只有2种功能，AP功能(有线转无线)，中继功能。使用请查看对应中继器的说明书。集线器：what：用于将多条以太网双绞线或光纤集合连接在同一段物理介质的设备。why：它是一种多端口的中继器，能够把收到的任何数字信号进行再生和放大。how：在集线器内，由于多条数据线路集合在同一物理介质下，因此，会产生信号的碰撞，目前使用交换机取代了集线器。</code></pre><h5 id="2-数据链路层"><a href="#2-数据链路层" class="headerlink" title="2.数据链路层"></a>2.数据链路层</h5><pre><code>what：将来自网络层的数据可靠地传输到相邻节点的目标机网络层的特性。why：它能给网络层提供可靠的数据传输，将来自网络层的数据组合成块，也就是帧(基本数据单位)。可用于物理地址寻址，流量控制、数据监测和重发等等。how：数据链路层映射的设备主要有2种，网桥和交换机。(遵循以太网协议)涉及到的概念;网桥：what：一种网络设备，它将网络的多个网段连接起来。why：用于网络桥接。how：使用请查看对应网桥的说明书。网络交换机：what：一种扩大网络的设备，能为子网提供更多的连接端口，以便连接更多的电脑。why：用于扩大网路信号，并且为子网提供更多的连接端口，从而能连接更多的电脑。how：网络交换机种类繁多，有2(传统)，3，4，7层交换机，使用请查看对应种类交换机的交互机说明书。</code></pre><h5 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h5><pre><code>what：它是一种实现路径选择、路由、逻辑寻址的特性。why：实现两个端系统之间数据的透明传送(基本数据单位为IP数据报)。how：网络层映射的设备主要为路由器。涉及到的概念：网络层协议(主要)：1.IP协议(Internet Protocol 因特网协议)。2.ICMP协议(Internet Control Message Protocol 因特网控制报文协议)3.ARP协议(Adrress Resolution Protocol 地址解析协议)4.RARP协议(Reverse Adrress Resolution Protocol 逆地址解析协议)路由器：what：是一种电讯网络设备，提供路由和转发两种功能。why：路由和转发功能可以为寻址提供一定的技术支持。how：使用请查看对应种类的路由器。路由：确定数据包从来源端到目的端的路由路径。转发：将数据包从路由器输入端移送到指定的输出端。</code></pre><h5 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4.传输层"></a>4.传输层</h5><pre><code>what：它是一种将上层数据分段，提供端到端的可靠地或不可靠的传输的特性。why：为数据提供可靠的传输，将数据传送到相应的端口。how：使用TCP/UDP协议进行传输。涉及到的主要概念：网关：what：转发其它服务器通信数据的服务器。why：因为它能提高通信的安全性。how：与路由器相似，但不同于路由器的是，网关能在不同的协议之间传输数据，路由器能在不同的网络之间传输数据。</code></pre><h5 id="5-会话层"><a href="#5-会话层" class="headerlink" title="5.会话层"></a>5.会话层</h5><pre><code>what：用于管理主机之间的会话进程，负责建立，管理，终止进程之间的会话。还利用在数据中插入校验点来实现数据的同步的特性。why：它能建立、管理、终止进程之间的会话。how：应用于解决网络会议中音频和视频流不同步的问题。解决网络视频中音频和视频要合并或转换时要无缝连接的问题。</code></pre><h5 id="6-表示层"><a href="#6-表示层" class="headerlink" title="6.表示层"></a>6.表示层</h5><pre><code>what：它是一个可以对上层数据或信息进行变换的特性。why：保证一个主机的应用程序信息可以被另一个主机的应用程序理解。how：具体对应为对数据进行加密、压缩、格式转换。</code></pre><h5 id="7-应用层"><a href="#7-应用层" class="headerlink" title="7.应用层"></a>7.应用层</h5><pre><code>what：它是一个为操作系统或网络应用程序提供访问网络服务接口的特性。why：为操作系统或网络应用程序提供访问网络服务的接口。how：映射为各种应用层协议(如HTTP、DNS、SMTP、FTP、Telnet、POP3协议等等)。注意：会话层、表示层、应用层的数据传输基本单位为报文。</code></pre><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能称为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能称为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能称为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能称为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%E3%80%81%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python学习笔记（二、函数和高级特性？）</title>
      <link>http://yoursite.com/2018/01/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9F%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/01/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9F%EF%BC%89/</guid>
      <pubDate>Tue, 23 Jan 2018 13:23:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;随着人工智能和AI行业的兴起，Python已经成为程序员不得不学的一门编程语言了，本篇，为Python学习第二篇。
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>随着人工智能和AI行业的兴起，Python已经成为程序员不得不学的一门编程语言了，本篇，为Python学习第二篇。</code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><pre><code>Python中的函数类似于数学中的函数。</code></pre><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><p><a href="http://docs.python.org/3/library/functions.html#abs" target="_blank" rel="external">Python中内置的函数</a></p><pre><code>例如：计算类函数：abs(x)，max(...)。数据类型转换函数：int()，str(), bool(), float()。函数名复制给变量，该变量指向了该函数的地址。因而，具有函数的功能。a = absa(-10)输出10。</code></pre><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><pre><code>def myAbs(x)：    if x &gt;= 0：        return x    else：         return -x以def为前缀 + 函数名 + (参数...), return返回函数返回值，没有return则返回None， return = return None。空函数：使用pass构造空函数def test:    pass也可以：if a &gt; 0:    pass</code></pre><h5 id="参数类型检查"><a href="#参数类型检查" class="headerlink" title="参数类型检查"></a>参数类型检查</h5><pre><code>使用isinstance检测参数类型：def myAbs(x):    if not isinstance (x, (int, float)):        raise TypeError(&quot;bad opread error&quot;)    if x &gt;= 0:        return x    else:        return -x</code></pre><h5 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h5><pre><code>当一个函数返回值有多个时，返回的是一个tuple，如(20, 30)。</code></pre><h5 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h5><pre><code>位置参数：test(x)、test(x, y)x、y的参数定义即为位置参数。默认参数：def test(x , age = 3, city = &apos;shenzhen&apos;)，其中age和city为默认参数。1.传入test(0)即为传入test(0, 3, &apos;shenzhen&apos;)。2.传入test(0, 25)即为传入test(0, 25, &apos;shenzhen&apos;)。3.传入test(0, city = &apos;guangzhou&apos;)即为传入&apos;guangzhou&apos;，注意，当参数位置不对应时，需要指明参数类型，即city。4.默认参数必须指向不变对象，使用test(city = none)替代test(city = [])，写入if(city = none):    city = []即可。额外的：为什么要设计str、none这样的不可变对象?可以避免在多线程中对象改变而造成的的错误，因此，尽量用不可变对象替代可变对象。可变参数：def test(*nums)1.可变参数在函数调用时自动组装成一个Tuple。2.nums可以是0个或多个数据。3.nums可以是一个List或者Tuple，此时*nums表示将List或者Tuple中的元素转化成可变参数传递进去。（内容拷贝）关键字参数：def test(**nums)1.关键字参数在函数调用时自动组装成一个dict。2.nums可以是0个或多个数据。3.nums可以是一个dict，此时**nums表示将dict中的元素转化为关键字参数传递进去。（内容拷贝）命名关键字参数：def test(a, *, b, c)，*，后面的为命名关键字参数。1.当函数中存在可变参数*x时，*x的作用等效于*，即此时，b、c也为命名关键字参数。2.调用含有关键字参数的函数时，应该使用key = value的形式，如本例：test(a, b = 1, c = &apos;haha&apos;)。3.当函数中指定了缺省值时，如def test(a, *x, b = 1, c)，此时，使用函数时可不填b参数。参数组合：5种参数的组合顺序为：位置参数、默认参数、可变参数、命名关键字参数、关键字参数。任意参数组合的函数都能给函数传入function(*x, **y)的组合传值形式。注意：参数组合过多会影响语义，尽量避免使用多参数组合。使用*args和**kw是习惯写法，建议遵循。</code></pre><h5 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h5><pre><code>1.优点：逻辑简单清晰，缺点：调用过深会导致栈溢出。2.可使用尾递归(返回自身本身)优化的方式避免栈溢出。3.大多数编程语言(包括Python)的编译器或解释器都没有针对尾递归进行优化。</code></pre><h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><pre><code>代码越少，效率越高。</code></pre><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><pre><code>nums = list(range(100))切片：nums[0:2] == nums[:2]表示取下标为0到2(不包括2)的数据。倒数切片：nums[-2:0] == nums[-2:]表示取下标为-2到0(不包括0)的数据。nums[:10:2]前10个数，每2个取一个。nums[::5]所有数，每5个取一个。nums[::-1]取倒数。nums[:]输出该list。注意：nums指向的数据类型是什么，nums[...]取出来的数据类型就是什么。</code></pre><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><pre><code>for i in nums不管是否有下标，只有能迭代，就能适用迭代器。对于dict，迭代的是key，迭代value：for i in nums.values()迭代key、value for i in nums.items()1.通过collections的Iterable来判读是否能迭代：from collections import Iterableisinstance(&apos;abcd&apos;, Iterable)2.使用内置的enumerate将list变成索引-元素对：for i, j in enumerate([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]):    print(i, j)</code></pre><h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><pre><code>[i * i for i in range(1, 10)][i * i for i in range(1, 10) if i % 2 == 0][i * j for i in range(1, 10) for j in range(1, 10)][i * j for i in range(1, 10) if i % 2 == 0 for j in range(1, 10) if j % 2 == 0]注意：&apos;a&apos; + 1，不同于java，python计算会出错。</code></pre><h6 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h6><pre><code>g = (x * x for x in range(10))for i in g一边循环，一边计算的机制称为生成器。获取返回值，必须捕获StopIterable异常。返回值就在包含在StopIterable的value中。except StopIterable as e：    print(e.value)    break普通函数和generate函数的区别普通函数调用直接返回结果，generate函数调用返回generate对象。</code></pre><h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h5><pre><code>直接作用于for循环的数据类型有以下几种：1.集合类型：list、tuple、dict、set、str等等。2.generate类型：generate对象和generate函数。这些可直接作用于for循环的对象称为Iterable对象。1.可直接作用于next()函数的数据类型称为Iterator对象。所有的生成器都是Iterator，而list、dict、str则不是。why：Iterator至少需满足2个条件：    1.长度不能够被提前知道。    2.可以表示无限大的数据。2.可通过iter()函数来获得一个Iterator对象。3.python的for循环的本质就是不断调用next()函数来实现的。</code></pre>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9F%EF%BC%89/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
