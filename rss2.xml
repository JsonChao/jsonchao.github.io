<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deep into Android</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Persist + Plan = Growing</description>
    <pubDate>Sun, 12 May 2019 14:38:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Android开发工程师高效成长指南</title>
      <link>http://yoursite.com/2019/05/12/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E6%95%88%E6%88%90%E9%95%BF%E6%8C%87%E5%8D%97/</link>
      <guid>http://yoursite.com/2019/05/12/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E6%95%88%E6%88%90%E9%95%BF%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Sun, 12 May 2019 13:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>从去年的互联网寒冬开始，移动开发甚至前后端的招聘需求越来越少，公司对开发者的技术要求也越来越高。特别是对于我们Android开发来说，似乎我们的生存空间越来越小，处境也变得越来越困难。所以，在这个时代，我们必须找到适合自己的一条“黄金路”。其实，对于Android来说，它其实有很多个细分领域，比如音视频、iot、图像处理、安全攻防、移动AI、性能优化等，职业生涯的前几年，我们只要选中其中的某一个领域，把它研究到极致，就可以拥有真正的核心竞争力，而对于像前后端、Flutter等跨领域的知识我们只要有一定程度的了解即可。这其实就是很多大厂一直青睐的T型人才。下面，我就性能优化这一细分领域来分析一下如何把它做到极致。</p><p>性能优化其实一块很深很深的知识领域，对于Android来说，它从最上层的应用层，顺延着Framework层、ART/Davilk、Linux内核层，一直到最底层的硬件层，都有我们需要深入研究的技术点。因此，根据这一思路，我根据我自身的情况，定制了一套自下而上的学习路线。下面，我就来说一下详细的学习方案。</p><p>对于学习资源来说，最重要的就是高质量和成体系的知识。因此，在学习的时候，我们必须以经典的高质量书籍为主，其他优秀的文章、视频教程为辅。</p><h3 id="一、成长路线规划"><a href="#一、成长路线规划" class="headerlink" title="一、成长路线规划"></a>一、成长路线规划</h3><p>首先是数学和算法，要想成为世界上最顶尖的程序员，这两门功课必须要打好基础。</p><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><ul><li>数学之美</li><li>程序员的数学基础课（极客时间）</li></ul><h4 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h4><ul><li>大话数据结构</li><li>算法图解</li><li>剑指Offer</li><li>数据结构与算法之美（极客时间）</li><li>算法面试通关（极客时间）</li><li>LetteCode</li><li>编程之美</li><li>编程珠玑</li><li>趣学算法</li><li>算法（红本）</li></ul><h4 id="硬件原理"><a href="#硬件原理" class="headerlink" title="硬件原理"></a>硬件原理</h4><ul><li>深入浅出计算机组成原理（极客时间）</li></ul><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li>计算机网络：自顶向下方法</li><li>趣谈网络协议（极客时间）</li><li>图解TCP/IP</li><li>HTTP权威指南</li><li>Wireshark网络分析就这么简单</li><li>Wireshark网络分析的艺术</li><li>Web性能权威指南</li><li>Unix网络编程：卷1</li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li>现代操作系统</li><li>鸟哥的Linux私房菜</li><li>深入理解计算机系统</li><li>Linux程序设计</li><li>UNIX环境高级编程</li><li>深入Linux内核架构</li><li>性能之巅</li><li>最强Android书</li><li>Linux性能优化实战</li></ul><h4 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h4><ul><li>编码</li><li>编译原理</li></ul><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><ul><li>Java核心技术 卷1</li><li>Java编程思想</li><li>Java并发编程实战（极客时间）</li><li>Java并发编程的艺术</li><li>Java核心技术36讲（极客时间）</li><li>深入理解JVM</li><li>深入拆解JVM（极客时间）</li><li>揭秘JVM</li><li>程序员的自我修养—链接、装载与库</li><li>垃圾回收算法手册</li><li>深入理解Android JVM ART</li><li>深入解析Android 虚拟机</li></ul><h4 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h4><ul><li>HeadFirst设计模式</li><li>Android源码设计模式</li><li>Android进阶解密</li><li>Android框架解密</li><li>深入理解Android内核设计思想</li><li>Android系统源代码情景分析</li></ul><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><ul><li>More Effective C++</li><li>Effective Java</li><li>Kotlin实战、快速上手Kotlin开发（极客时间）</li></ul><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ul><li>第一行代码</li><li>Android开发进阶 从小工到专家</li><li>Android进阶之光</li><li>Android开发艺术探索</li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li>Android开发高手课（极客时间）</li><li>Android应用性能优化最佳实践</li></ul><h4 id="组件化、热修复、插件化"><a href="#组件化、热修复、插件化" class="headerlink" title="组件化、热修复、插件化"></a>组件化、热修复、插件化</h4><ul><li>Android组件化架构</li><li>Android热修复技术原理</li><li>Android插件化开发指南</li></ul><h3 id="二、如何读书？"><a href="#二、如何读书？" class="headerlink" title="二、如何读书？"></a>二、如何读书？</h3><p>首先，我们需要定一个学习计划，比如一年读50本书，一周一本。读书的时候可以<strong>根据同一个技能点按照难度选取3到5本书阅读，其中最好的书读3遍</strong>。对于碎片化的时间，我们也可以充分利用起来对某一个知识点进行系统学习，以求真正地将其完全掌握。最后，这里再重申一遍，<strong>要想真正掌握一本书的核心内容，需要读三遍。第一遍：细读，目的在于完整阅读全书，并且划出重点，写上读书笔记；一个月后读第二遍：扫读，主要快速翻阅第一遍阅读时做的笔记和划的重点，目的在于加深记忆；半年后第三遍：忆读，读的时候只看目录，然后去回想内容，如果回想不起来，再去进行扫读。这样三遍下来，基本上一本书的核心内容就能够很好的吸收</strong>。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>当你对某一个细分领域有非常深入的理解后，比如性能优化，音视频等，其实，此时许多底层知识都已经打通了。假如，你现在再去学习前端、Vue/React或者后端、其它领域的知识，都能够在较短时间内快速领悟到中高级层面的知识。我想，这就是一通百通的能力吧。</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/12/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E6%95%88%E6%88%90%E9%95%BF%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之Launcher进程启动</title>
      <link>http://yoursite.com/2019/03/09/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BLauncher%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/03/09/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BLauncher%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sat, 09 Mar 2019 07:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>前面几篇文章我们已经详细分析了Android系统启动流程的init进程、Zygote进程和SystemServer进程。本篇，我们来分析一下Launcher的启动过程。</p><p>Android系统启动的最后一步就是启动了一个Launcher应用程序来显示系统中已经安装的应用程序。<strong>Launcher在启动的过程中会请求请求PMS返回系统中已安装的应用程序的信息，并将这些信息封装成一个快捷图标列表显示在系统屏幕上，从而使得用户可以点击这些快捷图片来启动相应的应用程序。</strong></p><p>Launcher作为Android系统的桌面，它的作用有两点：</p><ul><li>1、作为Android系统的启动器，用于启动应用程序。</li><li>2、作为Android系统的桌面，用于显示和管理应用程序的快捷图标或者其它桌面组件。</li></ul><p>下面，我们从以下两个方面来分析Launcher的启动过程：</p><ul><li>1、Launcher启动流程</li><li>2、Launcher中应用图标的显示过程</li></ul><h3 id="一、Launcher启动过程分析"><a href="#一、Launcher启动过程分析" class="headerlink" title="一、Launcher启动过程分析"></a>一、Launcher启动过程分析</h3><p>SystemServer进程在启动的过程中会启动PMS，PMS启动后会将系统中的应用程序安装完成，先前已经启动的AMS会将Launcher启动起来。在SystemServer的startOtherServices()方法中，调用了AMS的systemReady()方法，此即为Launcher的入口，如下所示：</p><pre><code>private void startOtherServices() {    ...    mActivityManagerService.systemReady(() -&gt; {        Slog.i(TAG, &quot;Making services ready&quot;);        traceBeginAndSlog(&quot;StartActivityManagerReadyPhase&quot;);        mSystemServiceManager.startBootPhase(                SystemService.PHASE_ACTIVITY_MANAGER_READY);        ...        }    ...}</code></pre><p>在Android 8.0及以上的部分源码中，都引入了Java Lambda表达式，可见其重要性的上升。下面继续分析AMS的systemReady()方法：</p><pre><code>public void systemReady(final Runnable goingCallback, TimingsTraceLog traceLog) {    ...    synchronized (this) {        ...        mStackSupervisor.resumeFocusedStackTopActivityLocked();        mUserController.sendUserSwitchBroadcasts(-1, currentUserId);        ...    }}</code></pre><p>在systemReady()方法中继续调用了ActivityStackSupervisor的resumeFocusedStackTopActivityLocked()方法，如下所示：</p><pre><code>boolean resumeFocusedStackTopActivityLocked() {    return resumeFocusedStackTopActivityLocked(null, null, null);}boolean resumeFocusedStackTopActivityLocked(        ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions) {    ...    if (targetStack != null &amp;&amp; isFocusedStack(targetStack)) {        // 1        return targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);    }    ...    return false;}</code></pre><p>最终，调用了注释1处ActivityStack（描述Acitivity堆栈）的resumeTopActivityUncheckedLocked()方法，如下所示：</p><pre><code>@GuardedBy(&quot;mService&quot;)boolean resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions options) {    if (mStackSupervisor.inResumeTopActivity) {        // Don&apos;t even start recursing.        return false;    }    boolean result = false;    try {        // Protect against recursion.        mStackSupervisor.inResumeTopActivity = true;        // 1        result = resumeTopActivityInnerLocked(prev, options);        // When resuming the top activity, it may be necessary to pause the top activity (for        // example, returning to the lock screen. We suppress the normal pause logic in        // {@link #resumeTopActivityUncheckedLocked}, since the top activity is resumed at the        // end. We call the {@link ActivityStackSupervisor#checkReadyForSleepLocked} again here        // to ensure any necessary pause logic occurs. In the case where the Activity will be        // shown regardless of the lock screen, the call to        // {@link ActivityStackSupervisor#checkReadyForSleepLocked} is skipped.        final ActivityRecord next = topRunningActivityLocked(true /* focusableOnly */);        if (next == null || !next.canTurnScreenOn()) {            checkReadyForSleep();        }    } finally {        mStackSupervisor.inResumeTopActivity = false;    }     return result;}</code></pre><p>在注释1处调用了resumeTopActivityInnerLocked()方法，如下所示：</p><pre><code>@GuardedBy(&quot;mService&quot;)private boolean resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions options) {    ...     if (!hasRunningActivity) {        // There are no activities left in the stack, let&apos;s look somewhere else.        return resumeTopActivityInNextFocusableStack(prev, options, &quot;noMoreActivities&quot;);    }    ...}</code></pre><p>resumeTopActivityInnerLocked()方法非常长，大概有好几百行代码，但是对于主要流程来说最关键的就是在其中调用了resumeTopActivityInNextFocusableStack()方法，如下所示：</p><pre><code>private boolean resumeTopActivityInNextFocusableStack(ActivityRecord prev,        ActivityOptions options, String reason) {    if (adjustFocusToNextFocusableStack(reason)) {        // Try to move focus to the next visible stack with a running activity if this        // stack is not covering the entire screen or is on a secondary display (with no home        // stack).        return mStackSupervisor.resumeFocusedStackTopActivityLocked(                mStackSupervisor.getFocusedStack(), prev, null);    }    // Let&apos;s just start up the Launcher...    ActivityOptions.abort(options);    if (DEBUG_STATES) Slog.d(TAG_STATES,            &quot;resumeTopActivityInNextFocusableStack: &quot; + reason + &quot;, go home&quot;);    if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();    // Only resume home if on home display    // 1    return isOnHomeDisplay() &amp;&amp;            mStackSupervisor.resumeHomeStackTask(prev, reason);}</code></pre><p>在注释1处，调用了ActivityStackSupervisor的resumeHomeStackTask()方法，如下所示：</p><pre><code>boolean resumeHomeStackTask(ActivityRecord prev, String reason) {    ...    // Only resume home activity if isn&apos;t finishing.    if (r != null &amp;&amp; !r.finishing) {        moveFocusableActivityStackToFrontLocked(r, myReason);        return resumeFocusedStackTopActivityLocked(mHomeStack, prev, null);    }    // 1    return mService.startHomeActivityLocked(mCurrentUser, myReason);}</code></pre><p>注释1处，调用了AMS的startHomeActivityLocked()方法，如下所示：</p><pre><code>boolean startHomeActivityLocked(int userId, String reason) {    // 1    if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL            &amp;&amp; mTopAction == null) {        // We are running in factory test mode, but unable to find        // the factory test app, so just sit around displaying the        // error message and don&apos;t try to start anything.        return false;    }    // 2    Intent intent = getHomeIntent();    ActivityInfo aInfo = resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);    if (aInfo != null) {        intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));        // Don&apos;t do this if the home app is currently being        // instrumented.        aInfo = new ActivityInfo(aInfo);        aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);        ProcessRecord app = getProcessRecordLocked(aInfo.processName,                aInfo.applicationInfo.uid, true);        // 3        if (app == null || app.instr == null) {            intent.setFlags(intent.getFlags() | FLAG_ACTIVITY_NEW_TASK);            final int resolvedUserId = UserHandle.getUserId(aInfo.applicationInfo.uid);            // For ANR debugging to verify if the user activity is the one that actually            // launched.            final String myReason = reason + &quot;:&quot; + userId + &quot;:&quot; + resolvedUserId;            // 4            mActivityStartController.startHomeActivity(intent, aInfo, myReason);        }    } else {        Slog.wtf(TAG, &quot;No home screen found for &quot; + intent, new Throwable());    }    return true;}</code></pre><p>首先，会在注释1处判断工厂模式和mTopAction的值，这里的工厂模式mFactoryTest代表的了系统的运行模式，它分为三种：</p><ul><li>1、非工厂模式</li><li>2、低级工厂模式</li><li>3、高级工厂模式</li></ul><p>而mTopAction是来描述第一个被启动Activity组件的Action，默认值为Intent.ACTION_MAIN。所以，此时可知当mFactoryTest为低级工厂模式并且mTopAction为空时，则返回false。接着，在注释2处，调用了getHomeintent()方法，如下所示：</p><pre><code>Intent getHomeIntent() {    // 1    Intent intent = new Intent(mTopAction, mTopData != null ? Uri.parse(mTopData) : null);    intent.setComponent(mTopComponent);    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);    if (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) {        // 2        intent.addCategory(Intent.CATEGORY_HOME);    }    return intent;}</code></pre><p>在getHomeIntent()方法的注释1处，根据mTopAction和mTopData创建了Intent。注释2处，会判断如果系统运行模式不是低级工厂模式，则会将Category设置为Intent.CATEGORY_HOME，最后返回该Intent。</p><p>我们再回到AMS的startHomeActivityLocked()方法的注释3处，这里会判断符合上述Intent的应用程序是否已经启动，如果没有启动，则会在注释4处调用ActivityStartController的startHomeActivity()方法启动该应用程序，即Launcher。下面我们继续看看startHomeActivity()方法，如下所示：</p><pre><code>void startHomeActivity(Intent intent, ActivityInfo aInfo, String reason) {    // 1    mSupervisor.moveHomeStackTaskToTop(reason);    // 2    mLastHomeActivityStartResult = obtainStarter(intent, &quot;startHomeActivity: &quot; + reason)            .setOutActivity(tmpOutRecord)            .setCallingUid(0)            .setActivityInfo(aInfo)            .execute();    mLastHomeActivityStartRecord = tmpOutRecord[0];    if (mSupervisor.inResumeTopActivity) {        // If we are in resume section already, home activity will be initialized, but not        // resumed (to avoid recursive resume) and will stay that way until something pokes it        // again. We need to schedule another resume.        mSupervisor.scheduleResumeTopActivities();    }}</code></pre><p>注释1处，会将Launcher放入HomeStack中，它是ActivityStackSupervisor中用于存储Launcher的变量。然后，在注释2处调用了obtainStarter()方法，如下所示：</p><pre><code>** * @return A starter to configure and execute starting an activity. It is valid until after *         {@link ActivityStarter#execute} is invoked. At that point, the starter should be *         considered invalid and no longer modified or used. */ActivityStarter obtainStarter(Intent intent, String reason) {    return mFactory.obtain().setIntent(intent).setReason(reason);}</code></pre><p>可知这里最终会返回一个配置好指定intent和reason和ActivityStarter，当它调用execute()方法时，则会启动Launcher，如下所示：</p><pre><code>int execute() {    try {        // TODO(b/64750076): Look into passing request directly to these methods to allow        // for transactional diffs and preprocessing.        if (mRequest.mayWait) {            return startActivityMayWait(mRequest.caller, mRequest.callingUid,                    mRequest.callingPackage, mRequest.intent, mRequest.resolvedType,                    mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,                    mRequest.resultWho, mRequest.requestCode, mRequest.startFlags,                    mRequest.profilerInfo, mRequest.waitResult, mRequest.globalConfig,                    mRequest.activityOptions, mRequest.ignoreTargetSecurity, mRequest.userId,                    mRequest.inTask, mRequest.reason,                    mRequest.allowPendingRemoteAnimationRegistryLookup);        } else {            return startActivity(mRequest.caller, mRequest.intent, mRequest.ephemeralIntent,                    mRequest.resolvedType, mRequest.activityInfo, mRequest.resolveInfo,                    mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,                    mRequest.resultWho, mRequest.requestCode, mRequest.callingPid,                    mRequest.callingUid, mRequest.callingPackage, mRequest.realCallingPid,                    mRequest.realCallingUid, mRequest.startFlags, mRequest.activityOptions,                    mRequest.ignoreTargetSecurity, mRequest.componentSpecified,                    mRequest.outActivity, mRequest.inTask, mRequest.reason,                    mRequest.allowPendingRemoteAnimationRegistryLookup);        }    } finally {        onExecutionComplete();    }}</code></pre><p>可以看到，这里调用了startActivity()方法来启动Launcher，最终会进入Launcher的onCreate()方法，Launcher启动完成。</p><h3 id="二、Launcher中应用图标的显示过程"><a href="#二、Launcher中应用图标的显示过程" class="headerlink" title="二、Launcher中应用图标的显示过程"></a>二、Launcher中应用图标的显示过程</h3><p>应用程序图标是进入应用程序的入口，接下来我们了解一下Launcher是如何显示应用程序图标的。首先从Launcher的onCreate()方法开始，如下所示：</p><pre><code>@Overrideprotected void onCreate(Bundle savedInstanceState) {    ...    // 1    LauncherAppState app = LauncherAppState.getInstance(this);    mOldConfig = new Configuration(getResources().getConfiguration());    // 2    mModel = app.setLauncher(this);    initDeviceProfile(app.getInvariantDeviceProfile());    ...    // We only load the page synchronously if the user rotates (or triggers a    // configuration change) while launcher is in the foreground    int currentScreen = PagedView.INVALID_RESTORE_PAGE;    if (savedInstanceState != null) {        currentScreen = savedInstanceState.getInt(RUNTIME_STATE_CURRENT_SCREEN, currentScreen);    }    // 3    if (!mModel.startLoader(currentScreen)) {        if (!internalStateHandled) {            // If we are not binding synchronously, show a fade in animation when            // the first page bind completes.            mDragLayer.getAlphaProperty(ALPHA_INDEX_LAUNCHER_LOAD).setValue(0);        }    } else {        // Pages bound synchronously.        mWorkspace.setCurrentPage(currentScreen);        setWorkspaceLoading(true);    }}</code></pre><p>首先，在注释1处得到LauncherAppState的实例，在注释2处，调用了它的setLauncher()方法将Launcher对象传进去，setLauncher()方法如下所示：</p><pre><code> LauncherModel setLauncher(Launcher launcher) {    getLocalProvider(mContext).setLauncherProviderChangeListener(launcher);    mModel.initialize(launcher);    return mModel;}</code></pre><p>在setLauncher()方法里面继续调用了LauncherModel的initialize()方法，如下所示：</p><pre><code>/*** Set this as the current Launcher activity object for the loader.*/public void initialize(Callbacks callbacks) {    synchronized (mLock) {        Preconditions.assertUIThread();        mCallbacks = new WeakReference&lt;&gt;(callbacks);    }}</code></pre><p>从此处我们可以得知Launcher被封装成了一个弱引用对象mCallbacks。我们再回到Launcher的onCreate()方法的注释3处的LauncherModel的startLoader()方法，如下所示：</p><pre><code>// 1@Thunk static final HandlerThread sWorkerThread = new HandlerThread(&quot;launcher-loader&quot;);static {    sWorkerThread.start();}// 2@Thunk static final Handler sWorker = new Handler(sWorkerThread.getLooper());public boolean startLoader(int synchronousBindPage) {    // Enable queue before starting loader. It will get disabled in Launcher#finishBindingItems    InstallShortcutReceiver.enableInstallQueue(InstallShortcutReceiver.FLAG_LOADER_RUNNING);    synchronized (mLock) {        // Don&apos;t bother to start the thread if we know it&apos;s not going to do anything        if (mCallbacks != null &amp;&amp; mCallbacks.get() != null) {            final Callbacks oldCallbacks = mCallbacks.get();            // Clear any pending bind-runnables from the synchronized load process.            mUiExecutor.execute(oldCallbacks::clearPendingBinds);            // If there is already one running, tell it to stop.            stopLoader();            // 3            LoaderResults loaderResults = new LoaderResults(mApp, sBgDataModel,                    mBgAllAppsList, synchronousBindPage, mCallbacks);            if (mModelLoaded &amp;&amp; !mIsLoaderTaskRunning) {                // Divide the set of loaded items into those that we are binding synchronously,                // and everything else that is to be bound normally (asynchronously).                loaderResults.bindWorkspace();                // For now, continue posting the binding of AllApps as there are other                // issues that arise from that.                loaderResults.bindAllApps();                loaderResults.bindDeepShortcuts();                loaderResults.bindWidgets();                return true;            } else {                // 4                startLoaderForResults(loaderResults);            }        }    }    return false;}</code></pre><p>在注释1处，新建了具有消息循环的线程HandlerThread对象。注释2处，新建了Handler，并传入了HandlerThread的Looper，此处Handler就是用于向HandlerThread发送消息。接着，在注释3处，创建了LoaderResults，在注释4处，调用了startLoaderForResults()方法并将LoaderResults传入，如下所示：</p><pre><code>public void startLoaderForResults(LoaderResults results) {    synchronized (mLock) {        stopLoader();        mLoaderTask = new LoaderTask(mApp, mBgAllAppsList, sBgDataModel, results);        runOnWorkerThread(mLoaderTask);    }}</code></pre><p>在startLoaderForResults()方法中，调用了runOnWorkerThread()，如下所示：</p><pre><code>/** Runs the specified runnable immediately if called from the worker thread, otherwise it is * posted on the worker thread handler. */private static void runOnWorkerThread(Runnable r) {    // 1    if (sWorkerThread.getThreadId() == Process.myTid()) {        // 2        r.run();    } else {        // If we are not on the worker thread, then post to the worker handler        // 3        sWorker.post(r);    }}</code></pre><p>首先，注释1处会先判断当前的执行线程是否是工作线程，如果是则直接调用注释2处Runnable的run()方法，否则，调用sWorker这个Handler对象的post()方法将LoaderTask作为消息发送给HandlerThread。接下来，我们看看LoaderTask，它实现了Runnable接口，当其所描述的消息被处理时，则会调用它的run()方法，如下所示：</p><pre><code>/*** Runnable for the thread that loads the contents of the launcher:*   - workspace icons*   - widgets*   - all apps icons*   - deep shortcuts within apps*/public class LoaderTask implements Runnable {    ...     synchronized (this) {        // Skip fast if we are already stopped.        if (mStopped) {            return;        }    }    TraceHelper.beginSection(TAG);    try (LauncherModel.LoaderTransaction transaction = mApp.getModel().beginLoader(this)) {        TraceHelper.partitionSection(TAG, &quot;step 1.1: loading workspace&quot;);        // 1        loadWorkspace();        verifyNotStopped();        TraceHelper.partitionSection(TAG, &quot;step 1.2: bind workspace workspace&quot;);        // 2        mResults.bindWorkspace();        // Notify the installer packages of packages with active installs on the first screen.        TraceHelper.partitionSection(TAG, &quot;step 1.3: send first screen broadcast&quot;);        sendFirstScreenActiveInstallsBroadcast();        // Take a break        TraceHelper.partitionSection(TAG, &quot;step 1 completed, wait for idle&quot;);        waitForIdle();        verifyNotStopped();        // second step        TraceHelper.partitionSection(TAG, &quot;step 2.1: loading all apps&quot;);        // 3        loadAllApps();        TraceHelper.partitionSection(TAG, &quot;step 2.2: Binding all apps&quot;);        verifyNotStopped();        // 4        mResults.bindAllApps();        ...     } catch (CancellationException e) {        // Loader stopped, ignore        TraceHelper.partitionSection(TAG, &quot;Cancelled&quot;);    }    TraceHelper.endSection(TAG);}</code></pre><p><strong>Launcher是用工作区的形式来显示系统安装的应用程序快捷图标的，每一个工作区都是用来描述一个抽象桌面的，它由n个屏幕组成，每个屏幕又分为n个单元格，每个单元格用来显示一个应用程序的快捷图标。</strong></p><p>首先，在注释1、2处调用了loadWorkSpace()和LoaderResults的bindWorkspace()方法来加载和绑定工作区信息。注释3处调用了loadAllApps()和LoaderResults的bindAllApps()方法来加载系统已经安装的应用程序信息，bindAllApps()方法如下所示：</p><pre><code>public void bindAllApps() {    // shallow copy    @SuppressWarnings(&quot;unchecked&quot;)    final ArrayList&lt;AppInfo&gt; list = (ArrayList&lt;AppInfo&gt;) mBgAllAppsList.data.clone();    Runnable r = new Runnable() {        public void run() {            // 1            Callbacks callbacks = mCallbacks.get();            if (callbacks != null) {                // 2                callbacks.bindAllApplications(list);            }        }    };    // 3    mUiExecutor.execute(r);}</code></pre><p>首先，在注释1处会从mCallbacks这个Launcher的弱引用对象中取出Launcher对象，并在注释2处调用了它的bindAllApplication()来绑定所有的应用程序信息，最后在注释3处使用mUiExecutor这个MainThreadExecutor执行器对象去执行这个创建好的Runnable对象。接下来，我们看看Launcher的bindAllApplications()方法，如下所示：</p><pre><code>// Main container view for the all apps screen.@Thunk AllAppsContainerView mAppsView;/*** Add the icons for all apps.** Implementation of the method from LauncherModel.Callbacks.*/public void bindAllApplications(ArrayList&lt;AppInfo&gt; apps) {    // 1    mAppsView.getAppsStore().setApps(apps);    if (mLauncherCallbacks != null) {        mLauncherCallbacks.bindAllApplications(apps);    }}</code></pre><p>在注释1处，调用了AllAppsContainerView的getAppsStore()方法得到了一个AllAppsStore对象，AllAppsContainerView是所有App屏幕的主容器视图，AllAppsStore是一个负责维护所有app信息集合的通用工具类。下面，我们看看AllAppsStore对象的setApps()方法：</p><pre><code>/** * Sets the current set of apps. */public void setApps(List&lt;AppInfo&gt; apps) {    mComponentToAppMap.clear();    addOrUpdateApps(apps);}</code></pre><p>这里继续调用了addOrUpdateApps()方法：</p><pre><code> private final HashMap&lt;ComponentKey, AppInfo&gt; mComponentToAppMap = new HashMap&lt;&gt;();/*** Adds or updates existing apps in the list*/public void addOrUpdateApps(List&lt;AppInfo&gt; apps) {    for (AppInfo app : apps) {        mComponentToAppMap.put(app.toComponentKey(), app);    }    notifyUpdate();}</code></pre><p>可以看到，最终将所有app信息保存在了AllAppsStore的HashMap容器中。</p><p>当AllAppsContainerView加载完XML布局时，会调用自身的onFinishInflate()方法，如下所示：</p><pre><code>@Overrideprotected void onFinishInflate() {    super.onFinishInflate();    // This is a focus listener that proxies focus from a view into the list view.  This is to    // work around the search box from getting first focus and showing the cursor.    setOnFocusChangeListener((v, hasFocus) -&gt; {        if (hasFocus &amp;&amp; getActiveRecyclerView() != null) {            getActiveRecyclerView().requestFocus();        }    });    mHeader = findViewById(R.id.all_apps_header);    // 1    rebindAdapters(mUsingTabs, true /* force */);    mSearchContainer = findViewById(R.id.search_container_all_apps);    mSearchUiManager = (SearchUiManager) mSearchContainer;    mSearchUiManager.initialize(this);}</code></pre><p>在注释1处，进行了适配器数据的绑定，我们继续查看rebindAdapters()方法：</p><pre><code>private void rebindAdapters(boolean showTabs) {    rebindAdapters(showTabs, false /* force */);}private void rebindAdapters(boolean showTabs, boolean force) {    ...    if (mUsingTabs) {        // 1        mAH[AdapterHolder.MAIN].setup(mViewPager.getChildAt(0), mPersonalMatcher);        mAH[AdapterHolder.WORK].setup(mViewPager.getChildAt(1), mWorkMatcher);        onTabChanged(mViewPager.getNextPage());    } else {        // 2        mAH[AdapterHolder.MAIN].setup(findViewById(R.id.apps_list_view), null);        mAH[AdapterHolder.WORK].recyclerView = null;    }    setupHeader();    ...}</code></pre><p>可以看到，不管是否正在使用标签，最终都会调用到AdapterHolder的setup()方法，它时AllAppsContainerView的内部类，如下所示：</p><pre><code>void setup(@NonNull View rv, @Nullable ItemInfoMatcher matcher) {        appsList.updateItemFilter(matcher);        recyclerView = (AllAppsRecyclerView) rv;        recyclerView.setEdgeEffectFactory(createEdgeEffectFactory());        // 1        recyclerView.setApps(appsList, mUsingTabs);        recyclerView.setLayoutManager(layoutManager);        // 2        recyclerView.setAdapter(adapter);        recyclerView.setHasFixedSize(true);        // No animations will occur when changes occur to the items in this RecyclerView.        recyclerView.setItemAnimator(null);        FocusedItemDecorator focusedItemDecorator = new FocusedItemDecorator(recyclerView);        recyclerView.addItemDecoration(focusedItemDecorator);        adapter.setIconFocusListener(focusedItemDecorator.getFocusListener());        applyVerticalFadingEdgeEnabled(verticalFadingEdge);        applyPadding();    }</code></pre><p>注释1处，会将app信息列表appsList设置给AllAppsRecyclerView对象，在注释2处，为其设置了Adapter。最终，应用程序快捷图标列表就会显示到屏幕上了。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>到此，我们终于将Android系统启动流程这一主题分析完毕，结合前面的几篇内容，可以得出核心流程如下：</p><ul><li>1、<strong>启动电源以及系统启动</strong>：当电源按下时引导芯片从预定义的订房（固化在ROM）开始执行，加载引导程序BootLoader到RAM，然后执行。</li><li>2、<strong>引导程序BootLoader</strong>：BootLoader是在Android系统开始运行前的一个小程序，主要用于把系统OS拉起来并运行。。</li><li>3、<strong>Linux内核启动</strong>：当内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当其完成系统设置时，会先在系统文件中寻找init.rc文件，并启动init进行。</li><li>4、<strong>init进程启动</strong>：初始化和启动属性服务，并且启动Zygote进程。</li><li>5、<strong>Zygote进程启动</strong>：创建JVM并为其注册JNI方法，创建服务器端Socket，启动SystemServer进程。</li><li>6、<strong>SystemServer进程启动</strong>：启动Binder线程池和SystemServiceManager，并且启动各种系统服务。</li><li>7、<strong>Launcher启动</strong>：被SystemServer进程启动的AMS会启动Launcher，Launcher启动后会将已安装应用的快捷图标显示到系统桌面上。</li></ul><p>下一系列，笔者将会给大家带来Android中的跨进程通信Binder的详细讲解，尽请期待~</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/03/09/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BLauncher%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之SystemServer进程启动</title>
      <link>http://yoursite.com/2019/03/03/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E4%B9%8BSystemServer%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/03/03/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E4%B9%8BSystemServer%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sun, 03 Mar 2019 14:32:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>在上一篇中，笔者已经分析过Android系统启动流程中的init进程启动部分。Android系统中各个进程的先后顺序为：</p><p>init进程 –-&gt; Zygote进程 –&gt; SystemServer进程 –&gt;应用进程</p><p>其中Zygote进程由init进程启动，SystemServer进程和应用进程由Zygote进程启动。在这一篇中，我将继续分析Android系统启动流程中的SystemServer进程启动部分。</p><p>SystemServer进程主要是用于创建系统服务的，例如AMS、WMS、PMS。这篇文章将从以下两个部分来对SystemServer进行分析：</p><ul><li>Zygote处理SystemServer进程</li><li>SystemServer进程解析</li></ul><h3 id="一、Zygote处理SystemServer进程"><a href="#一、Zygote处理SystemServer进程" class="headerlink" title="一、Zygote处理SystemServer进程"></a>一、Zygote处理SystemServer进程</h3><p>由前文可知，在ZygoteInit的forkSystemServer()方法中启动了SystemServer进程，如下所示：</p><pre><code>private static Runnable forkSystemServer(String abiList, String socketName,        ZygoteServer zygoteServer) {    ...    try {        parsedArgs = new ZygoteConnection.Arguments(args);        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);        boolean profileSystemServer = SystemProperties.getBoolean(                &quot;dalvik.vm.profilesystemserver&quot;, false);        if (profileSystemServer) {            parsedArgs.runtimeFlags |= Zygote.PROFILE_SYSTEM_SERVER;        }        /* Request to fork the system server process */        // 1        pid = Zygote.forkSystemServer(                parsedArgs.uid, parsedArgs.gid,                parsedArgs.gids,                parsedArgs.runtimeFlags,                null,                parsedArgs.permittedCapabilities,                parsedArgs.effectiveCapabilities);    } catch (IllegalArgumentException ex) {        throw new RuntimeException(ex);    }    /* For child process */    // 2    if (pid == 0) {        if (hasSecondZygote(abiList)) {            waitForSecondaryZygote(socketName);        }        // 3        zygoteServer.closeServerSocket();        // 4        return handleSystemServerProcess(parsedArgs);    }    return null;}</code></pre><p>在注释1处，调用了Zygote的forkSystemServer()方法创建了SystemServer进程，并返回了当前进程的pid。在注释2处，如果pid==0则说明Zygote进程创建SystemServer进程成功，当前运行在SystemServer进程中。接着，在注释3处，由于SystemServer进程fork了Zygote进程的地址空间，所以会得到Zygote进程创建的Socket，这个Socket对于SystemServer进程是无用的，因此，在此处关闭了该Socket。最后，在注释4处，调用了handleSystemServerprocess()方法来启动SystemServer进程。handleSystemServerProcess()方法如下所示：</p><pre><code>/** * Finish remaining work for the newly forked system server process. */private static Runnable handleSystemServerProcess(ZygoteConnection.Arguments parsedArgs) {    ...    if (parsedArgs.invokeWith != null) {        ...    } else {        ClassLoader cl = null;        if (systemServerClasspath != null) {            // 1            cl = createPathClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);            Thread.currentThread().setContextClassLoader(cl);        }        /*         * Pass the remaining arguments to SystemServer.         */        // 2        return ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);    }}</code></pre><p>在注释1处，使用了systemServerClassPath和targetSdkVersion创建了一个PathClassLoader。接着，在注释2处，执行了ZygoteInit的zygoteInit()方法，该方法如下所示：</p><pre><code>public static final Runnable zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader) {    if (RuntimeInit.DEBUG) {        Slog.d(RuntimeInit.TAG, &quot;RuntimeInit: Starting application from zygote&quot;);    }    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ZygoteInit&quot;);    RuntimeInit.redirectLogStreams();    RuntimeInit.commonInit();    // 1    ZygoteInit.nativeZygoteInit();    // 2    return RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);}</code></pre><p>在zygoteInit()方法中，首先在注释1处执行了nativeZygoteInit()方法，这里看到方法前缀为native可知是一个本地函数，因此，我们先了解它对应的JNI文件，在AndroidRuntime.cpp类中可以查看到nativeZygoteInit()方法对应的native函数，如下所示：</p><pre><code>/** JNI registration.*/int register_com_android_internal_os_ZygoteInit_nativeZygoteInit(JNIEnv* env){    const JNINativeMethod methods[] = {        { &quot;nativeZygoteInit&quot;, &quot;()V&quot;,            (void*) com_android_internal_os_ZygoteInit_nativeZygoteInit },    };    return jniRegisterNativeMethods(env, &quot;com/android/internal/os/ZygoteInit&quot;,        methods, NELEM(methods));}</code></pre><p>这里使用了JNI动态注册的方式，将nativeZygoteInit()方法和native函数com_android_internal_os_ZygoteInit_nativeZygoteInit()建立了映射关系，我们看到这个native方法的代码：</p><pre><code>static AndroidRuntime* gCurRuntime = NULL;static void com_android_internal_os_ZygoteInit_nativeZygoteInit(JNIEnv* env, jobject clazz){    gCurRuntime-&gt;onZygoteInit();}</code></pre><p>可以看到，gCurRuntime是AndroidRuntime类型的指针，具体指向的是其子类AppRuntime，它在app_main.cpp中定义，代码如下所示：</p><pre><code>class AppRuntime : public AndroidRuntime{    ...    virtual void onZygoteInit()    {        // 1        sp&lt;ProcessState&gt; proc = ProcessState::self();        ALOGV(&quot;App process: starting thread pool.\n&quot;);        // 2        proc-&gt;startThreadPool();    }    ...}</code></pre><p>在注释1处，创建了一个ProcessState实例， 在Android中ProcessState是客户端和服务端公共的部分，作为Binder通信的基础，ProcessState是一个singleton类，每个<br>进程只有一个对象，这个对象负责打开Binder驱动，建立线程池，让其进程里面的所有线程都能通过Binder通信。在注释2处，调用了ProcessState实例的startThreadPool()函数启动了一个Binder线程池，其实里面最终会调用到IPCThreadState实例的joinThreadPool()函数进程Binder线程池相关的处理。现在，我们再回到zygoteInit()方法的注释2处，这里调用了RuntimeInit的applicationInit()方法，代码如下所示：</p><pre><code>protected static Runnable applicationInit(int targetSdkVersion, String[] argv,    ClassLoader classLoader) {    ...    // Remaining arguments are passed to the start class&apos;s static main    return findStaticMain(args.startClass, args.startArgs, classLoader);}</code></pre><p>在applicationInit()方法中最后调用了findStaticMain()方法：</p><pre><code>protected static Runnable findStaticMain(String className, String[] argv,        ClassLoader classLoader) {    Class&lt;?&gt; cl;    try {        // 1        cl = Class.forName(className, true, classLoader);    } catch (ClassNotFoundException ex) {        throw new RuntimeException(                &quot;Missing class when invoking static main &quot; + className,                ex);    }    Method m;    try {        // 2        m = cl.getMethod(&quot;main&quot;, new Class[] { String[].class });    } catch (NoSuchMethodException ex) {        throw new RuntimeException(                &quot;Missing static main on &quot; + className, ex);    } catch (SecurityException ex) {        throw new RuntimeException(                &quot;Problem getting static main on &quot; + className, ex);    }    int modifiers = m.getModifiers();    if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {        throw new RuntimeException(                &quot;Main method is not public and static on &quot; + className);    }    /*     * This throw gets caught in ZygoteInit.main(), which responds     * by invoking the exception&apos;s run() method. This arrangement     * clears up all the stack frames that were required in setting     * up the process.     */    // 3    return new MethodAndArgsCaller(m, argv);}</code></pre><p>首先，在注释1处，通过发射得到了SystemServer类。接着，在注释2处，找到了SystemServer中的main()方法。最后，在注释3处，会将main()方法传入MethodAndArgsCaller()方法中，这里的MethodAndArgsCaller()方法是一个Runnable实例，它最终会一直返回出去，直到在ZygoteInit的main()方法中被使用，如下所示：</p><pre><code>if (startSystemServer) {    Runnable r = forkSystemServer(abiList, socketName, zygoteServer);    // {@code r == null} in the parent (zygote) process, and {@code r != null} in the    // child (system_server) process.    if (r != null) {        r.run();        return;    }}</code></pre><p>可以看到，最终直接调用了这个Runnable实例的run()方法，代码如下所示：</p><pre><code>/** * Helper class which holds a method and arguments and can call them. This is used as part of * a trampoline to get rid of the initial process setup stack frames. */static class MethodAndArgsCaller implements Runnable {    /** method to call */    private final Method mMethod;    /** argument array */    private final String[] mArgs;    public MethodAndArgsCaller(Method method, String[] args) {        mMethod = method;        mArgs = args;    }    public void run() {        try {            // 1            mMethod.invoke(null, new Object[] { mArgs });        } catch (IllegalAccessException ex) {            throw new RuntimeException(ex);        } catch (InvocationTargetException ex) {            Throwable cause = ex.getCause();            if (cause instanceof RuntimeException) {                throw (RuntimeException) cause;            } else if (cause instanceof Error) {                throw (Error) cause;            }            throw new RuntimeException(ex);        }    }}</code></pre><p>在注释1处，这个mMethod就是指的SystemServer的main()方法，这里动态调用了SystemServer的main()方法，最终，SystemServer进程就进入了SystemServer的main()方法中了。这里还有个遗留问题，为什么不直接在findStaticMain()方法中直接动态调用SystemServer的main()方法呢？原因就是这种递归返回后再执行入口方法的方式会让SystemServer的main()方法看起来像是SystemServer的入口方法，而且，这样也会清除之前所有SystemServer相关设置过程中需要的堆栈帧。</p><h3 id="二、SystemServer进程解析"><a href="#二、SystemServer进程解析" class="headerlink" title="二、SystemServer进程解析"></a>二、SystemServer进程解析</h3><p>接下来我们看看SystemServer的main()方法：</p><pre><code>/*** The main entry point from zygote.*/public static void main(String[] args) {    new SystemServer().run();}</code></pre><p>main()方法中调用了SystemServer的run()方法，如下所示：</p><pre><code>private void run() {    try {        ...        // 1        Looper.prepareMainLooper();        ...        // Initialize native services.        // 2        System.loadLibrary(&quot;android_servers&quot;);        // Check whether we failed to shut down last time we tried.        // This call may not return.        performPendingShutdown();         // Initialize the system context.        createSystemContext();        // Create the system service manager.        // 3        mSystemServiceManager = new SystemServiceManager(mSystemContext);        mSystemServiceManager.setStartInfo(mRuntimeRestart,                mRuntimeStartElapsedTime, mRuntimeStartUptime);        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);        // Prepare the thread pool for init tasks that can be parallelized        SystemServerInitThreadPool.get();    } finally {        traceEnd();  // InitBeforeStartServices    }    // Start services.    try {        traceBeginAndSlog(&quot;StartServices&quot;);        // 4        startBootstrapServices();        // 5        startCoreServices();        // 6        startOtherServices();        SystemServerInitThreadPool.shutdown();    } catch (Throwable ex) {        Slog.e(&quot;System&quot;, &quot;******************************************&quot;);        Slog.e(&quot;System&quot;, &quot;************ Failure starting system services&quot;, ex);        throw ex;    } finally {        traceEnd();    }    ...    // Loop forever.    // 7    Looper.loop();    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);}</code></pre><p>在注释1处，创建了消息Looper。在注释2处，加载了动态库libandroid_servers.so。接着，在注释3处，创建了SystemServerManager，它的作用是对系统服务进行创建、启动和生命周期管理。在注释4处的startBootstarpServices()方法中使用SystemServiceManager启动了ActivityManagerService、PackageManagerService、PowerManagerService等引导服务。在注释5处的startCoreServices()方法中则启动了BatteryService、WebViewUpdateService、DropBoxManagerService、UsageStatsService4个核心服务。在注释6处的startOtherServices()方法中启动了WindowManagerService、InputManagerService、CameraService等其它服务。这些服务的父类都是SystemService。</p><p>可以看到，上面把系统服务分成了三种类型：引导服务、核心服务、其它服务。这些系统服务共有100多个，其中对于我们来说比较关键的有：</p><ul><li>引导服务：ActivityManagerService，负责四大组件的启动、切换、调度。</li><li>引导服务：PackageManagerService，负责对APK进行安装、解析、删除、卸载等操作。</li><li>引导服务：PowerManagerService，负责计算系统中与Power相关的计算，然后决定系统该如何反应。</li><li>核心服务：BatteryService，管理电池相关的服务。</li><li>其它服务：WindowManagerService，窗口管理服务。</li><li>其它服务：InputManagerService，管理输入事件。</li></ul><p>很多系统服务的启动逻辑都是类似的，这里我以启动ActivityManagerService服务来进行举例，代码如下所示：</p><pre><code>mActivityManagerService = mSystemServiceManager.startService(        ActivityManagerService.Lifecycle.class).getService();</code></pre><p>SystemServiceManager的startService()方法启动了ActivityManagerService，该启动方法如下所示：</p><pre><code>@SuppressWarnings(&quot;unchecked&quot;)public &lt;T extends SystemService&gt; T startService(Class&lt;T&gt; serviceClass) {    try {        final String name = serviceClass.getName();        ...        try {            Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);            // 1            service = constructor.newInstance(mContext);        } catch (InstantiationException ex) {        ...        // 2        startService(service);        return service;    } finally {        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);    }}</code></pre><p>在注释1处使用反射创建了ActivityManagerService实例，并在注释2处调用了另一个startService()重载方法，如下所示：</p><pre><code>public void startService(@NonNull final SystemService service) {    // Register it.    // 1    mServices.add(service);    // Start it.    long time = SystemClock.elapsedRealtime();    try {        // 2        service.onStart();    } catch (RuntimeException ex) {        throw new RuntimeException(&quot;Failed to start service &quot; + service.getClass().getName()                + &quot;: onStart threw an exception&quot;, ex);    }    warnIfTooLong(SystemClock.elapsedRealtime() - time, service, &quot;onStart&quot;);}</code></pre><p>在注释1处，首先会将ActivityManagerService添加在mServices中，它是一个存储SystemService类型的ArrayList，这样就完成了ActivityManagerService的注册。在注释2处，调用了ActivityManagerService的onStart()方法完成了启动ActivityManagerService服务。</p><p>除了使用SystemServiceManager的startService()方法来启动系统服务外，也可以直接调用服务的main()方法来启动系统服务，如PackageManagerService：</p><pre><code>mPackageManagerService = PackageManagerService.main(mSystemContext, installer,        mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</code></pre><p>这里直接调用了PackageManagerService的main()方法：</p><pre><code>public static PackageManagerService main(Context context, Installer installer,        boolean factoryTest, boolean onlyCore) {    // Self-check for initial settings.    PackageManagerServiceCompilerMapping.checkProperties();    // 1    PackageManagerService m = new PackageManagerService(context, installer,            factoryTest, onlyCore);    m.enableSystemUserPackages();    // 2    ServiceManager.addService(&quot;package&quot;, m);    // 3    final PackageManagerNative pmn = m.new PackageManagerNative();    ServiceManager.addService(&quot;package_native&quot;, pmn);    return m;}</code></pre><p>在注释1处，直接新建了一个PackageManagerService实例，并在注释2处将PackageManagerService注册到服务大管家ServiceManager中，ServiceManager用于管理系统中的各种Service，用于系统C/S架构中的Binder进程间通信，即如果Client端需要使用某个Servcie，首先应该到ServiceManager查询Service的相关信息，然后使用这些信息和该Service所在的Server进程建立通信通道，这样Client端就可以服务端进程的Service进行通信了。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>SystemService的启动流程分析至此已经完结，经过以上的分析可知，SystemService进程被创建后，主要的处理如下：</p><ul><li>1、启动Binder线程池，这样就可以与其他进程进行Binder跨进程通信。</li><li>2、创建SystemServiceManager，它用来对系统服务进行创建、启动和生命周期管理。</li><li>3、启动各种系统服务：引导服务、核心服务、其他服务，共100多种。应用开发主要关注引导服务ActivityManagerService、PackageManagerService和其他服务WindowManagerService、InputManagerService即可。</li></ul><p>下篇，将会给大家带来Android系统启动流程之Launcher进程启动的详细分析，希望大家多多支持~</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/03/03/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E4%B9%8BSystemServer%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之Zygote进程启动</title>
      <link>http://yoursite.com/2019/02/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BZygote%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/02/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BZygote%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sun, 24 Feb 2019 10:25:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>在上一篇中，我们已经分析过Android系统启动流程中的init进程启动部分。在这一篇中，我们将继续分享Android系统启动流程中的Zygote进程启动部分。我们先看看Gityuan博客中的一幅系统启动架构图来对Android系统的启动流程有一个宏观的把控。</p><p><img src="http://gityuan.com/images/android-process/android-boot.jpg" alt="image"></p><p>这篇文章将从以下三部分来对Zygote进行分析：</p><ul><li>1、Zygote是什么？</li><li>2、Zygote启动脚本</li><li>3、Zygote进程启动流程</li></ul><h3 id="一、Zygote是什么？"><a href="#一、Zygote是什么？" class="headerlink" title="一、Zygote是什么？"></a>一、Zygote是什么？</h3><p>Zygote是在init进程启动时创建的，它又称为孵化器，它可以通过fork（复制进程）的形式来创建应用程序进程和SystemServer进程。并且，Zygote进程在启动的时候回创建DVM或者ART，因此通过fork而创建的应用程序进程和SystemServer进程可以在内部获取一个DVM或者ART的实例副本。</p><h3 id="二、Zygote启动脚本"><a href="#二、Zygote启动脚本" class="headerlink" title="二、Zygote启动脚本"></a>二、Zygote启动脚本</h3><p>init.rc文件中采用了如下所示的Import类型语句来引入Zygote启动脚本：</p><pre><code>import /init.${ro.zygote}.rc</code></pre><p>这里根据属性ro.zygote的内容来引入不同的Zygote启动脚本。从Android 5.0开始，Android开始支持64位程序，Zygote有了32/64位之别，ro.zygote属性的取值有4种：</p><ul><li>init.zygote32.rc</li><li>init.zygote32_64.rc</li><li>init.zygote64.rc</li><li>init.zygote64_32.rc</li></ul><p>注意：上面的Zygote的启动脚本都存放在system/core/rootdir目录中。</p><p>下面我们来一一分析一下上述的Zygote启动脚本。</p><h4 id="1、init-zygote32-rc"><a href="#1、init-zygote32-rc" class="headerlink" title="1、init.zygote32.rc"></a>1、init.zygote32.rc</h4><p>仅支持32位程序，脚本源码如下所示：</p><pre><code>service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    onrestart write /sys/android_power/request_state wake    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasks</code></pre><p>可以看到，它就是Android初始化语言的Service类型语句，格式如下：</p><pre><code>service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*   //&lt;service的名字&gt;&lt;执行程序路径&gt;&lt;传递参数&gt;      &lt;option&gt;       //option是service的修饰词，影响什么时候、如何启动services      &lt;option&gt;      ...</code></pre><p>由此，我们可以知道Zygote进程的名字为zygote，执行程序路径为/system/bin/app_process，类名为main，上述类似“onrestart restart …”格式的语句表示如果audioserver、cameraserver、media等进程终止了，就会进行重启。</p><h4 id="2、init-zygote32-64-rc"><a href="#2、init-zygote32-64-rc" class="headerlink" title="2、init.zygote32_64.rc"></a>2、init.zygote32_64.rc</h4><p>同时支持32、64位程序，脚本源码如下所示：</p><pre><code>service zygote /system/bin/app_process32 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    onrestart write /sys/android_power/request_state     wake    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasksservice zygote_secondary /system/bin/app_process64 -Xzygote /system/bin --zygote     --socket-name=zygote_secondary    class main    priority -20    user root    group root readproc reserved_disk    socket zygote_secondary stream 660 root system    onrestart restart zygote    writepid /dev/cpuset/foreground/tasks</code></pre><p>可以看出，这里使用了两个Service类型语句启动了两个Zygote进程，一个是名字为zygote，执行程序为app_process32的主模式Zygote进程；另一个是名字为zygote_secondary，执行程序为app_process64的辅模式Zygote进程。另外的init.zygote64.rc和init.zygote64_32.rc与上面的Zygote脚本都是类似的，这里不再多说了。</p><h3 id="三、Zygote进程启动流程"><a href="#三、Zygote进程启动流程" class="headerlink" title="三、Zygote进程启动流程"></a>三、Zygote进程启动流程</h3><p>在init启动Zygote时主要是调用app_main.cpp的main函数中的AppRuntime.start()方法来启动Zygote进程的，我们先看到app_main.cpp的main函数：</p><pre><code>int main(int argc, char* const argv[]){    ...    while (i &lt; argc) {        const char* arg = argv[i++];        // 1        if (strcmp(arg, &quot;--zygote&quot;) == 0) {            zygote = true;            niceName = ZYGOTE_NICE_NAME;        } else if (strcmp(arg, &quot;--start-system-server&quot;) == 0) {            // 2            startSystemServer = true;        } else if (strcmp(arg, &quot;--application&quot;) == 0) {            // 3            application = true;        } else if (strncmp(arg, &quot;--nice-name=&quot;, 12) == 0) {            niceName.setTo(arg + 12);        } else if (strncmp(arg, &quot;--&quot;, 2) != 0) {            className.setTo(arg);            break;        } else {            --i;            break;        }    }    ...    // 4    if (zygote) {        runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;, args, zygote);    } else if (className) {        runtime.start(&quot;com.android.internal.os.RuntimeInit&quot;, args, zygote);    } else {        fprintf(stderr, &quot;Error: no class name or --zygote supplied.\n&quot;);        app_usage();        LOG_ALWAYS_FATAL(&quot;app_process: no class name or --zygote supplied.&quot;);    }}</code></pre><p>由前可知，Zygote进程都是通过fork自身来创建子进程的，这样Zygote进程和由它fork出来的子进程都会进入app_main.cpp的main函数中，所以在mian函数中，首先会判断当前运行在哪个进程，在注释1处，会判断参数arg中释放包含了”–zygote”，如果包含了，则说明main函数是运行在Zygote进程中的并会将zygote标记置为true。在注释2处会判断参数arg中是否包含了”–start-system-server”，如果包含了则表示当前是处在SystemServer进程中并将startSystemServer设置为true。同理在注释3处会判断参数arg是否包含”–application”，如果包含了说明当前处在应用程序进程中并将application标记置为true。最后在注释4处，当zygote标志是true的时候，也就是当前正处在Zygote进程中时，则使用AppRuntime.start()函数启动Zygote进程。</p><p>我们接着看看AndroidRuntime的start函数：</p><pre><code>void AndroidRuntime::start(const char* className, const Vector&lt;String8&gt;&amp; options, bool zygote){    ...    /* start the virtual machine */    JniInvocation jni_invocation;    jni_invocation.Init(NULL);    JNIEnv* env;    // 1    if (startVm(&amp;mJavaVM, &amp;env, zygote) != 0) {        return;    }    onVmCreated(env);    /*     * 2、Register android functions.     */    if (startReg(env) &lt; 0) {        ALOGE(&quot;Unable to register all android natives\n&quot;);        return;    }    ...    // 3    classNameStr = env-&gt;NewStringUTF(className);    assert(classNameStr != NULL);    env-&gt;SetObjectArrayElement(strArray, 0, classNameStr);    for (size_t i = 0; i &lt; options.size(); ++i) {        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).string());        assert(optionsStr != NULL);        env-&gt;SetObjectArrayElement(strArray, i + 1, optionsStr);    }    /*     * Start VM.  This thread becomes the main thread of the VM, and will     * not return until the VM exits.     */    // 4    char* slashClassName = toSlashClassName(className != NULL ? className : &quot;&quot;);    jclass startClass = env-&gt;FindClass(slashClassName);    if (startClass == NULL) {        ALOGE(&quot;JavaVM unable to locate class &apos;%s&apos;\n&quot;, slashClassName);        /* keep going */    } else {        // 6        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,            &quot;([Ljava/lang/String;)V&quot;);        if (startMeth == NULL) {            ALOGE(&quot;JavaVM unable to find main() in &apos;%s&apos;\n&quot;, className);            /* keep going */        } else {            // 6            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);#if 0            if (env-&gt;ExceptionCheck())                threadExitUncaughtException(env);#endif        }    }    free(slashClassName);    ...}</code></pre><p>首先，在AndroidRuntime的start函数中，会现在注释1处使用startVm函数来启动弄Java虚拟机，然后在注释2处使用startReg函数为Java虚拟机注册JNI方法。在注释3处的classNameStr是传入的参数，值为com.android.internall.os.ZygoteInit。然后在注释4处使用toSlashClassName函数将className的”.”替换为”/“，替换后的值为com/android/internal/os/ZygoteInit。接着根据这个值找到ZygoteInit并在注释5处找到ZygoteInit的main函数，最后在注释6处使用JNI调用ZygoteInit的main函数，之所以这里要使用JNI，是因为ZygoteInit是java代码。最终，Zygote就从Native层进入了Java FrameWork层。在此之前，并没有任何代码进入Java FrameWork层面，因此可以认为，Zygote开创了java FrameWork层。</p><p>接着，我们看看Zygoteinit.java中的main方法：</p><pre><code> public static void main(String argv[]) {    ...    try {        ...        // 1        zygoteServer.registerServerSocketFromEnv(socketName);        // In some configurations, we avoid preloading resources and classes eagerly.        // In such cases, we will preload things prior to our first fork.        if (!enableLazyPreload) {            bootTimingsTraceLog.traceBegin(&quot;ZygotePreload&quot;);            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,                SystemClock.uptimeMillis());            // 2            preload(bootTimingsTraceLog);            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,                SystemClock.uptimeMillis());            bootTimingsTraceLog.traceEnd(); // ZygotePreload        } else {            Zygote.resetNicePriority();        }        ...        if (startSystemServer) {            // 3            Runnable r = forkSystemServer(abiList, socketName, zygoteServer);            // {@code r == null} in the parent (zygote) process, and {@code r != null} in the            // child (system_server) process.            if (r != null) {                r.run();                return;            }        }        Log.i(TAG, &quot;Accepting command socket connections&quot;);        // The select loop returns early in the child process after a fork and        // loops forever in the zygote.        // 4        caller = zygoteServer.runSelectLoop(abiList);    } catch (Throwable ex) {        Log.e(TAG, &quot;System zygote died with exception&quot;, ex);        throw ex;    } finally {        zygoteServer.closeServerSocket();    }    // We&apos;re in the child process and have exited the select loop. Proceed to execute the    // command.    if (caller != null) {        caller.run();    }}</code></pre><p>首先，在注释1处调用了ZygoteServer的registerServerSocketFromEnv方法创建了一个名为”zygote”的Server端的Socket，它用来等待ActivityManagerService请求Zygote来创建新的应用程序进程。我首先分析下registerServerSocketFromEnv方法的处理逻辑，源码如下所示：</p><pre><code>private static final String ANDROID_SOCKET_PREFIX = &quot;ANDROID_SOCKET_&quot;;void registerServerSocketFromEnv(String socketName) {    if (mServerSocket == null) {        int fileDesc;        // 1        final String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;        try {            // 2            String env = System.getenv(fullSocketName);            fileDesc = Integer.parseInt(env);        } catch (RuntimeException ex) {            throw new RuntimeException(fullSocketName + &quot; unset or invalid&quot;, ex);        }        try {            FileDescriptor fd = new FileDescriptor();            fd.setInt$(fileDesc);            // 3            mServerSocket = new LocalServerSocket(fd);            mCloseSocketFd = true;        } catch (IOException ex) {            throw new RuntimeException(                    &quot;Error binding to local socket &apos;&quot; + fileDesc + &quot;&apos;&quot;, ex);        }    }}</code></pre><p>首先，会在注释1处将Socket的名字拼接为“ANDROID_SOCKET_zygote“，在注释2处调用System.getenv()方法得到该Socket对应的环境变量中的值，然后将这个Socket环境变量值解析为int类型的文件描述符参数。接着，在注释4处，使用上面得到的文件描述符参数得到一个文件描述符，并由此新建一个服务端Socket。当Zygote进程将SystemServer进程启动红藕，就会在这个服务端Socket上等待AMS请求Zygote进程去创建新的应用程序进程。</p><p>接着，我们回到ZygoteInit的main方法，在注释2处会预加载类和资源。然后在注释3处，使用了forkSystemServer()方法去创建SystemServer进程。forkSystemServer()方法核心代码如下所示：</p><pre><code> private static Runnable forkSystemServer(String abiList, String socketName,        ZygoteServer zygoteServer) {    // 一系统创建SystemServer进程所需参数的准备工作    try {        ...        /* Request to fork the system server process */        // 3.1        pid = Zygote.forkSystemServer(                parsedArgs.uid, parsedArgs.gid,                parsedArgs.gids,                parsedArgs.runtimeFlags,                null,                parsedArgs.permittedCapabilities,                parsedArgs.effectiveCapabilities);    } catch (IllegalArgumentException ex) {        throw new RuntimeException(ex);    }    /* For child process */    if (pid == 0) {        if (hasSecondZygote(abiList)) {            waitForSecondaryZygote(socketName);        }        zygoteServer.closeServerSocket();        // 3.2        return handleSystemServerProcess(parsedArgs);    }    return null;}</code></pre><p>可以看到，forkSystemServer()方法中，注释3.1调用了Zygote的forkSystemServer()方法去创建SystemServer进程，其内部会执行nativeForkSystemServer这个Native方法，它最终会使用fork函数在当前进程创建一个SystemServer进程。如果pid等于0，即当前是处于新创建的子进程ServerServer进程中，则在注释3.2处使用handleSystemServerProcess()方法处理SystemServer进程的一些处理工作。</p><p>我们再回到Zygoteinit.java中main方法中的注释4处，这里调用了ZygoteServer的runSelectLoop方法来等等ActivityManagerService来请求创建新的应用程序进程，runSelectLoop()方法如下所示：</p><pre><code> Runnable runSelectLoop(String abiList) {    ArrayList&lt;FileDescriptor&gt; fds = new ArrayList&lt;FileDescriptor&gt;();    ArrayList&lt;ZygoteConnection&gt; peers = new ArrayList&lt;ZygoteConnection&gt;();    // 1    fds.add(mServerSocket.getFileDescriptor());    peers.add(null);    // 2、无限循环等待AMS请求创建应用程序进程    while (true) {        StructPollfd[] pollFds = new StructPollfd[fds.size()];        for (int i = 0; i &lt; pollFds.length; ++i) {            pollFds[i] = new StructPollfd();            pollFds[i].fd = fds.get(i);            pollFds[i].events = (short) POLLIN;        }        try {            Os.poll(pollFds, -1);        } catch (ErrnoException ex) {            throw new RuntimeException(&quot;poll failed&quot;, ex);        }        // 3        for (int i = pollFds.length - 1; i &gt;= 0; --i) {            if ((pollFds[i].revents &amp; POLLIN) == 0) {                continue;            }            // 4            if (i == 0) {                ZygoteConnection newPeer = acceptCommandPeer(abiList);                peers.add(newPeer);                fds.add(newPeer.getFileDesciptor());            } else {                try {                    ZygoteConnection connection = peers.get(i);                    // 5                    final Runnable command = connection.processOneCommand(this);                    if (mIsForkChild) {                        // We&apos;re in the child. We should always have a command to run at this                        // stage if processOneCommand hasn&apos;t called &quot;exec&quot;.                        if (command == null) {                            throw new IllegalStateException(&quot;command == null&quot;);                        }                        return command;                    } else {                        // We&apos;re in the server - we should never have any commands to run.                        if (command != null) {                            throw new IllegalStateException(&quot;command != null&quot;);                        }                        // We don&apos;t know whether the remote side of the socket was closed or                        // not until we attempt to read from it from processOneCommand. This shows up as                        // a regular POLLIN event in our regular processing loop.                        if (connection.isClosedByPeer()) {                            connection.closeSocket();                            peers.remove(i);                            fds.remove(i);                        }                    }                } catch (Exception e) {                    if (!mIsForkChild) {                        // We&apos;re in the server so any exception here is one that has taken place                        // pre-fork while processing commands or reading / writing from the                        // control socket. Make a loud noise about any such exceptions so that                        // we know exactly what failed and why.                        Slog.e(TAG, &quot;Exception executing zygote command: &quot;, e);                        // Make sure the socket is closed so that the other end knows immediately                        // that something has gone wrong and doesn&apos;t time out waiting for a                        // response.                        ZygoteConnection conn = peers.remove(i);                        conn.closeSocket();                        fds.remove(i);                    } else {                        // We&apos;re in the child so any exception caught here has happened post                        // fork and before we execute ActivityThread.main (or any other main()                        // method). Log the details of the exception and bring down the process.                        Log.e(TAG, &quot;Caught post-fork exception in child process.&quot;, e);                        throw e;                    }                } finally {                    // Reset the child flag, in the event that the child process is a child-                    // zygote. The flag will not be consulted this loop pass after the Runnable                    // is returned.                    mIsForkChild = false;                }            }        }    }}</code></pre><p>首先，在注释1处，会调用服务端的mServerSocket的getFileDescriptor()函数来去获得自身的fd字段值并加入fds列表中。然后，在注释2处，无限循环用来等待AMS请求Zygote进程创建新的应用程序进程。在注释3处会遍历pollFds这个fd列表，如果i等于0，则说明服务端Socket与客户端连接上了，即当前Zygote进程与AMS进程建立了连接。接着，在注释4处调用acceptCommandPeer()方法得到ZygoteConnection对象，并将其加入peers列表中。如果i不等于0，则表明AMS想Zygote进程发送了一个创建应用程序进程的请求，最后会在注释5处执行ZygoteConnection.runOnce方法去创建一个新的应用程序进程。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>从以上的分析可以得知，Zygote进程启动中承担的主要职责如下：</p><ul><li>1、创建AppRuntime，执行其start方法，启动Zygote进程。。</li><li>2、创建JVM并为JVM注册JNI方法。</li><li>3、使用JNI调用ZygoteInit的main函数进入Zygote的Java FrameWork层。</li><li>4、使用registerZygoteSocket方法创建服务器端Socket，并通过runSelectLoop方法等等AMS的请求去创建新的应用进程。</li><li>5、启动SystemServer进程。</li></ul><p>至此，Android系统启动流程之Zygote进程启动部分分析完毕，下一篇将会详细分析SystemServer进程启动相关的部分，敬请期待！</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/02/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BZygote%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之init进程启动</title>
      <link>http://yoursite.com/2019/02/18/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8Binit%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/02/18/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8Binit%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sun, 17 Feb 2019 17:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>众所周知，Android核心源码这一块的知识一直是阻碍广大Android开发者成为高级甚至资深Android的拦路虎，因此，从这篇开始，笔者接下来将会陪大家深入分析Android中的核心源码，从而能够让我们真正地去理解Android源码背后的设计思想与艺术，真真切切地提升自己的内功。</p><p>Android系统启动流程共分为四篇，分别为：</p><ul><li>Android系统启动流程之init进程启动</li><li>Android系统启动流程之Zygote进程启动</li><li>Android系统启动流之SystemServer进程启动</li><li>Android系统启动流程之Launcher进程启动</li></ul><p>接下来，笔者将会为大家介绍Android系统启动流程的相关知识，但是由于篇幅太长，这里便打算分为四部分来进行讲解。这一篇，我将首先对其中最重要的init进程启动过程进行分析。这里，先给出一幅Gityuan博客中的一幅系统启动架构图来对Android系统的启动流程有一个宏观的把控。</p><p><img src="http://gityuan.com/images/android-arch/android-boot.jpg" alt="image"></p><p>下面，我们正式开始进行分析~</p><h2 id="一、启动电源以及系统启动"><a href="#一、启动电源以及系统启动" class="headerlink" title="一、启动电源以及系统启动"></a>一、启动电源以及系统启动</h2><p>当电源按下时引导芯片代码会从预定义的地方（固化在ROM）开始执行，加载引导程序BootLoader到RAM，然后执行。</p><h2 id="二、引导程序BootLoader"><a href="#二、引导程序BootLoader" class="headerlink" title="二、引导程序BootLoader"></a>二、引导程序BootLoader</h2><p>它是Android操作系统开始运行前的一个小程序，主要将操作系统OS拉起来并进行。</p><h2 id="三、Linux内核启动"><a href="#三、Linux内核启动" class="headerlink" title="三、Linux内核启动"></a>三、Linux内核启动</h2><p>当内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。此外，还启动了Kernel的swapper进程（pid = 0）和kthreadd进程（pid = 2）。下面分别介绍下它们：</p><ul><li>swapper进程：又称为idle进程，系统初始化过程Kernel由无到有开创的第一个进程, 用于初始化进程管理、内存管理，加载Binder Driver、Display、Camera Driver等相关工作。</li><li>kthreadd进程：Linux系统的内核进程，是所有内核进程的鼻祖，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护进程。</li></ul><p>当内核完成系统设置时，它首先在系统文件中寻找init.rc文件，并启动init进程。</p><h2 id="四、init进程启动"><a href="#四、init进程启动" class="headerlink" title="四、init进程启动"></a>四、init进程启动</h2><p>init进程主要用来初始化和启动属性服务，并且启动Zygote进程。</p><h3 id="1、init进程是什么？"><a href="#1、init进程是什么？" class="headerlink" title="1、init进程是什么？"></a>1、init进程是什么？</h3><p>Linux系统的用户进程，是所有用户进程的鼻祖，进程号为1，它有许多重要的职责，比如创建Zygote孵化器和属性服务等。并且它是由多个源文件组成的，对应源码目录system/core/init中。</p><h3 id="2、init进程启动核心代码流程分析"><a href="#2、init进程启动核心代码流程分析" class="headerlink" title="2、init进程启动核心代码流程分析"></a>2、init进程启动核心代码流程分析</h3><p>init进程的启动会首先从init进程的入口函数开始，init进程的入口函数main位于system/core/init/init.cpp中，代码如下所示：</p><pre><code>int main(int argc, char** argv) {    ...    // 如果是初始化第一阶段，则需要执行下面的步骤1    if (is_first_stage) {        ...        // 清理umask        umask(0);        ...        // 1、创建和挂载启动所需的文件目录        mount(&quot;tmpfs&quot;, &quot;/dev&quot;, &quot;tmpfs&quot;, MS_NOSUID, &quot;mode=0755&quot;);        mkdir(&quot;/dev/pts&quot;, 0755);        mkdir(&quot;/dev/socket&quot;, 0755);        mount(&quot;devpts&quot;, &quot;/dev/pts&quot;, &quot;devpts&quot;, 0, NULL);        #define MAKE_STR(x) __STRING(x)        mount(&quot;proc&quot;, &quot;/proc&quot;, &quot;proc&quot;, 0, &quot;hidepid=2,gid=&quot; MAKE_STR(AID_READPROC));        ...        // 初识化Kernel的Log，获取外界的Kernel日志        InitKernelLogging(argv);        ...    }    // 初识化Kernel的Log，获取外界的Kernel日志    InitKernelLogging(argv);    ...    // 2、初始化属性相关资源    property_init();    ...    // 创建epoll句柄    epoll_fd = epoll_createl(EPOLL_CLOEXEC);    ...    // 3、设置子信号处理函数    sigchld_handler_init();    // 导入默认的环境变量    property_load_boot_defaults();    // 4、启动属性服务    start_property_service();    set_usb_controller();    ...    // 加载引导脚本    LoadBootScripts(am, sm);    ...       while (true) {        ...        if (!(waiting_for_prop || Service::is_exec_service_running())) {            // 内部会偏离执行每个action中携带的command对应的执行函数            am.ExecuteOneCommand();        }        if (!(waiting_for_prop || Service::is_exec_service_running())) {            if (!shutting_down) {                // 重启死去的子进程                auto next_process_restart_time = RestartProcesses();                ...            }            // If there&apos;s more work to do, wake up again immediately.            if (am.HasMoreCommands()) epoll_timeout_ms = 0;        }        epoll_event ev;        int nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &amp;ev, 1, epoll_timeout_ms));        if (nr == -1) {            PLOG(ERROR) &lt;&lt; &quot;epoll_wait failed&quot;;        } else if (nr == 1) {            ((void (*)()) ev.data.ptr)();        }    }    return 0;}static void LoadBootScripts(ActionManager&amp;action_manager, ServiceList&amp; service_list) {    Parser parser = CreateParser(action_manager, service_list);    std::string bootscript = GetProperty(&quot;ro.boot.init_rc&quot;, &quot;&quot;);    // bootscript默认是空的    if (bootscript.empty()) {        // 5、解析init.rc配置文件        parser.ParseConfig(&quot;/init.rc&quot;);        if (!parser.ParseConfig(&quot;/system/etc/init&quot;)) {            late_import_paths.emplace_back(&quot;/system/etc/init&quot;);        }        if (!parser.ParseConfig(&quot;/product/etc/init&quot;)) {            late_import_paths.emplace_back(&quot;/product/etc/init&quot;);        }        if (!parser.ParseConfig(&quot;/odm/etc/init&quot;)) {            late_import_paths.emplace_back(&quot;/odm/etc/init&quot;);        }        if (!parser.ParseConfig(&quot;/vendor/etc/init&quot;)) {            late_import_paths.emplace_back(&quot;/vendor/etc/init&quot;);        }    } else {        parser.ParseConfig(bootscript);    }}</code></pre><h4 id="1、创建和挂载启动所需的文件目录"><a href="#1、创建和挂载启动所需的文件目录" class="headerlink" title="1、创建和挂载启动所需的文件目录"></a>1、创建和挂载启动所需的文件目录</h4><p>其中挂载了tmpsf、devpts、proc、sysfs和selinuxfs共5种文件系统（它们均是系统运行时目录）：</p><pre><code>mount(...);mkdir(...);...</code></pre><h4 id="2、对属性服务进行初始化"><a href="#2、对属性服务进行初始化" class="headerlink" title="2、对属性服务进行初始化"></a>2、对属性服务进行初始化</h4><pre><code>property_init();</code></pre><h5 id="什么是属性服务？"><a href="#什么是属性服务？" class="headerlink" title="什么是属性服务？"></a>什么是属性服务？</h5><p>Windows平台上有一个注册表管理器，注册表的内容采用键值对的形式来记录用户、软件等使用信息。如果系统或软件重启，还是能够根据这份注册表中的记录，进行相应的初识化工作。Android也提供了一个这样类型的机制，即属性服务。</p><h5 id="它具体是如何进行初始化的？"><a href="#它具体是如何进行初始化的？" class="headerlink" title="它具体是如何进行初始化的？"></a>它具体是如何进行初始化的？</h5><p>我们查看system/core/init/property_service.cpp源码中的property_init()函数：</p><pre><code>void property_init() {    mkdir(&quot;/dev/__properties__&quot;, S_IRWXU | S_IXGRP S_IXOTH);    CreateSerializedPropertyInfo();    // 关注点    if (__system_property_area_init()) {        LOG(FATAL) &lt;&lt; &quot;Failed to initialize property area&quot;;    }    if (!property_info_area.LoadDefaultPath()) {        LOG(FATAL) &lt;&lt; &quot;Failed to load serialized property info file&quot;;    }}</code></pre><p>init进程启动时会启动属性服务，并为其分配内存，用来存储这些属性，如果需要就可以直接读取，具体在代码里就是执行了property_init()函数中的__system_property_area_init()函数去初始化属性内存区域。</p><h4 id="3、设置子进程信号处理函数，如果子进程（zygote进程）异常退出，init进程会调用该函数中设定的信号处理函数来进行处理"><a href="#3、设置子进程信号处理函数，如果子进程（zygote进程）异常退出，init进程会调用该函数中设定的信号处理函数来进行处理" class="headerlink" title="3、设置子进程信号处理函数，如果子进程（zygote进程）异常退出，init进程会调用该函数中设定的信号处理函数来进行处理"></a>3、设置子进程信号处理函数，如果子进程（zygote进程）异常退出，init进程会调用该函数中设定的信号处理函数来进行处理</h4><pre><code>sigchld_handler_init();</code></pre><h5 id="sigchld-handler-init-的作用："><a href="#sigchld-handler-init-的作用：" class="headerlink" title="sigchld_handler_init()的作用："></a>sigchld_handler_init()的作用：</h5><p>防止init进程的子进程成为僵尸进程，为了防止僵尸进程的出现，系统会在子进程暂停和终止的时候发出SIGCJHLD信号，该函数就是用来接收SIGCHLD信号的，注意它仅处理进程终止的SIGCHLD信号。</p><h5 id="僵尸进程是什么？"><a href="#僵尸进程是什么？" class="headerlink" title="僵尸进程是什么？"></a>僵尸进程是什么？</h5><p>在UNIX/Linux中，父进程使用fork创建子进程，子进程终止后，如果父进程不知道子进程已经终止的话，这时子进程虽然已经退出，但是在系统进程表中还为它保留了一些信息（如进程号、运行时间、退出状态等），这个子进程就是所谓的僵尸进程。其中系统进程表是一项有限的资源，如果它被僵尸进程耗尽的话，系统可能会无法创建新的进程。</p><h5 id="如果是Zygote进程终止了，则会如何？"><a href="#如果是Zygote进程终止了，则会如何？" class="headerlink" title="如果是Zygote进程终止了，则会如何？"></a>如果是Zygote进程终止了，则会如何？</h5><p>sigchld_handler_init()函数内部会找到Zygote进程并移除所有的Zygote进程的信息，在重启Zygote服务的启动脚本（如init.zygote64.rc）中带有onrestart选项的服务。</p><h4 id="4、启动属性服务（其中会启动servicemanager-binder服务大管家-、bootanim-开机动画-等重要服务）"><a href="#4、启动属性服务（其中会启动servicemanager-binder服务大管家-、bootanim-开机动画-等重要服务）" class="headerlink" title="4、启动属性服务（其中会启动servicemanager(binder服务大管家)、bootanim(开机动画)等重要服务）"></a>4、启动属性服务（其中会启动servicemanager(binder服务大管家)、bootanim(开机动画)等重要服务）</h4><pre><code>start_property_service();</code></pre><h5 id="属性服务是如何启动的？"><a href="#属性服务是如何启动的？" class="headerlink" title="属性服务是如何启动的？"></a>属性服务是如何启动的？</h5><p>我们查看system/core/init/property_service.cpp源码中的start_property_service()函数：</p><pre><code>void start_property_service() {    selinux_callback cb;    cb.func_audit = SelinuxAuditCallback;    selinux_set_callback(SELINUX_CB_AUDIT, cb);    property_set(&quot;ro.property_service.version&quot;, &quot;2&quot;);    // 1    property_set_fd = CreateSocket(PROP_SERVICE_NAME, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,                                   false, 0666, 0, 0,  nullptr);    if (property_set_fd == -1) {        PLOG(FATAL) &lt;&lt; &quot;start_property_service socket creation failed&quot;;    }    // 2    listen(property_set_fd, 8);    // 3、4、5    register_epoll_handler(property_set_fd, handle_property_set_fd);}</code></pre><ul><li>1、首先，创建非阻塞式的Socket，并返回property_set_fd文件描述符。</li><li>2、使用listen()函数去监听property_set_fd，此时Socket即成为属性服务端，并且它最多同时可为8个试图设置属性的用户提供服务。</li><li>3、使用epoll()来监听property_set_fd：当property_set_fd中有数据到来时，init进程将调用handle_property_set_fd()函数进行处理。在Andorid 8.0的源码中则在handle_property_set_fd()函数中添加了handle_property_set函数做进一步封装处理。</li><li>4、系统属性分为两种属性，即普通属性和控制属性。控制属性用来执行一些命令，比如开机的动画就使用了这种属性。在handle_property_set_fd()函数中会先判断如果属性名是以”ctl.”开头的，就说明是控制属性，如果客户端权限满足，则会调用handle_control_message()函数来修改控制属性。如果是普通属性，则会在客户端全面满足的条件下调用property_set函数来修改普通属性。</li><li>5、在property_set中会先从属性存储空间中查找该属性，如果有，则更新，否则添加该属性。此外，如果名称是以”ro”开头（表示只读，不能修改），直接返回，如果名称是以”persist.”开头，则写入持久化属性。</li></ul><h5 id="epoll是什么？"><a href="#epoll是什么？" class="headerlink" title="epoll是什么？"></a>epoll是什么？</h5><p>在Linux的新内核中，epoll是用来取代select/poll的，它是Linux内核为处理大批量文件描述符的改进版poll，是Linux下多路复用I/O接口select/poll的增强版，它能显著提升程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</p><h5 id="epoll和select的区别？"><a href="#epoll和select的区别？" class="headerlink" title="epoll和select的区别？"></a>epoll和select的区别？</h5><p>epoll内部用于保存事件的数据类型是红黑树，查找速度快，select采用的数组保存信息，查找速度很慢，只有当等待少量文件描述符时，epoll和select的效率才差不多。</p><h4 id="5、解析init-rc配置文件"><a href="#5、解析init-rc配置文件" class="headerlink" title="5、解析init.rc配置文件"></a>5、解析init.rc配置文件</h4><pre><code>parser.ParseConfig(&quot;/init.rc&quot;);</code></pre><h5 id="init-rc是什么？"><a href="#init-rc是什么？" class="headerlink" title="init.rc是什么？"></a>init.rc是什么？</h5><p>它是由Android初始化语言编写的一个非常重要的配置脚本文件。Android初始化语言主要包含5种类型的语句：</p><ul><li>Action（常用）</li><li>Service（常用）</li><li>Command</li><li>Option</li><li>Import</li></ul><p>这里了解下Action和Service的格式：</p><pre><code>on &lt;trigger&gt; [&amp;&amp; &lt;trigger&gt;]*     //设置触发器      &lt;command&gt;      &lt;command&gt;      //动作触发之后要执行的命令    ...service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*   //&lt;service的名字&gt;&lt;执行程序路径&gt;&lt;传递参数&gt;      &lt;option&gt;       //option是service的修饰词，影响什么时候、如何启动services      &lt;option&gt;      ...</code></pre><p>注意：Android8.0对init.rc文件进行了拆分，每个服务对应一个rc文件。</p><h5 id="init-rc中的Action、Service语句都有相应的XXXParser类来解析，即ActionParser、ServiceParser。那么ServiceParser是如何解析Service语句的？"><a href="#init-rc中的Action、Service语句都有相应的XXXParser类来解析，即ActionParser、ServiceParser。那么ServiceParser是如何解析Service语句的？" class="headerlink" title="init.rc中的Action、Service语句都有相应的XXXParser类来解析，即ActionParser、ServiceParser。那么ServiceParser是如何解析Service语句的？"></a>init.rc中的Action、Service语句都有相应的XXXParser类来解析，即ActionParser、ServiceParser。那么ServiceParser是如何解析Service语句的？</h5><p>查看相应的XXXparser，即ServiceParser：</p><pre><code>bool ServiceParser::ParseSection(const std::vector&lt;std::string&gt;&amp; args,                                 std::string* err) {    // 判断Service是否有name和可执行程序                                 if (args.size() &lt; 3) {        *err = &quot;services must have a name and a     program&quot;;        return false;    }    const std::string&amp; name = args[1];    if (!IsValidName(name)) {        *err = StringPrintf(&quot;invalid service name     &apos;%s&apos;&quot;, name.c_str());        return false;    }    std::vector&lt;std::string&gt; str_args(args.begin() + 2, args.end());    // 1    service_ = std::make_unique&lt;Service&gt;(name, str_args);    return true;}bool ServiceParser::ParseLineSection(const std::vector&lt;std::string&gt;&amp; args,                                     const std::string&amp;  filename, int line,                                     std::string* err)  const {    // 2                                     return service_ ? service_-&gt;ParseLine(args, err) : false;}void ServiceParser::EndSection() {    if (service_) {        // 3        ServiceManager::GetInstance().AddService(std::move(service_));    }}void ServiceManager::AddService(std::unique_ptr&lt;Service&gt; service) {    Service* old_service = FindServiceByName(service-&gt;name());    if (old_service) {        ERROR(&quot;ignored duplicate definition of service &apos;%s&apos;&quot;,            service-&gt;name().c_str());        return;    }    services_.emplace_back(std::move(service));//1}</code></pre><ul><li>1、先使用ParseSection()方法根据参数创建出一个Service对象。</li><li>2、再使用ParseLineSection()方法解析Service语句中的每一个子项，将其中的内容添加到Service对象中。</li><li>3、然后，在解析完所有数据后，会调用EndSection函数，内部会执行ServiceManager的AddService函数，最终将Service对象加入vector类型的Service链表中。</li></ul><h5 id="init启动Zygote流程？"><a href="#init启动Zygote流程？" class="headerlink" title="init启动Zygote流程？"></a>init启动Zygote流程？</h5><p>先看到init.rc的这部分配置代码：</p><pre><code>...on nonencrypted        exec - root -- /system/bin/update_verifier nonencrypted      // 1    class_start main             class_start late_start ...</code></pre><p>1、使用class_start这个COMMAND去启动Zygote。其中class_start对应do_class_start()函数。</p><pre><code>static Result&lt;Success&gt; do_class_start(const BuiltinArguments&amp; args) {    // Starting a class does not start services which are explicitly disabled.    // They must be started individually.    for (const auto&amp; service : ServiceList::GetInstance()) {        if (service-&gt;classnames().count(args[1])) {            // 2            if (auto result = service-&gt;StartIfNotDisabled(); !result) {                LOG(ERROR) &lt;&lt; &quot;Could not start service&apos;&quot; &lt;&lt; service-&gt;name()                           &lt;&lt; &quot;&apos; as part of class &apos;&quot; &lt;&lt;  args[1] &lt;&lt; &quot;&apos;: &quot; &lt;&lt;  result.error();            }        }    }    return Success();}</code></pre><p>2、在system/core/init/builtins.cpp的do_class_start()函数中会遍历前面的Vector类型的Service链表，找到classname为main的Zygote，并调用system/core/init/service.cpp中的startIfNotDisabled()函数。</p><pre><code>bool Service::StartIfNotDisabled() {    if (!(flags_ &amp; SVC_DISABLED)) {        return Start();    } else {        flags_ |= SVC_DISABLED_START;    }    return Success();}</code></pre><p>3、如果Service没有再其对应的rc文件中设置disabled选项，则会调用Start()启动该Service。</p><pre><code>bool Service::Start() {    ...    if (flags_ &amp; SVC_RUNNING) {        if ((flags_ &amp; SVC_ONESHOT) &amp;&amp; disabled) {            flags_ |= SVC_RESTART;        }        // 如果不是一个错误，尝试去启动一个已经启动的服务        return Success();    }    ...    // 判断需要启动的Service的对应的执行文件是否存在，不存在则不启动该Service    struct stat sb;    if (stat(args_[0].c_str(), &amp;sb) == -1) {        flags_ |= SVC_DISABLED;        return ErrnoError() &lt;&lt; &quot;Cannot find &apos;&quot; &lt;&lt; args_[0] &lt;&lt; &quot;&apos;&quot;;    }    ...    // fork函数创建子进程    pid_t pid = fork();    // 运行在子进程中    if (pid == 0) {        umask(077);        ...        // 在ExpandArgsAndExecv函数里进行了参数装配并使用了execve()执行程序        if (!ExpandArgsAndExecv(args_)) {            PLOG(ERROR) &lt;&lt; &quot;cannot execve(&apos;&quot; &lt;&lt; args_[0] &lt;&lt; &quot;&apos;)&quot;;        }         _exit(127);    }    ...    return true;}static bool ExpandArgsAndExecv(cons std::vector&lt;std::string&gt;&amp; args) {    std::vector&lt;std::string&gt; expanded_args;    std::vector&lt;char*&gt; c_strings;    expanded_args.resize(args.size());    c_strings.push_back(const_cast&lt;char*&gt;(args[0].data()));    for (std::size_t i = 1; i &lt; args.size(); ++i) {        if (!expand_props(args[i], &amp;expanded_args[i])) {            LOG(FATAL) &lt;&lt; args[0] &lt;&lt; &quot;: cannot expand &apos;&quot; &lt;&lt; args[i] &lt;&lt; &quot;&apos;&quot;;        }        c_strings.push_back(expanded_args[i].data());    }    c_strings.push_back(nullptr);    // 最终通过execve执行程序    return execv(c_strings[0], c_strings.data()) == 0;}</code></pre><p>4、在Start()函数中，如果Service已经运行，则不再启动。如果没有，则使用fork()函数创建子进程，并返回pid值。当pid为0时，则说明当前代码逻辑在子进程中运行，最然后会调用execve()函数去启动子进程，并进入该Service的main函数中，如果该Service是Zygote，则会执行Zygote的main函数。（对应frameworks/base/cmds/app_process/app_main.cpp中的main()函数）</p><pre><code>int main(int argc, char* const argv[]){    ...    if (zygote) {        runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;, args, zygote);    } else if (className) {        runtime.start(&quot;com.android.internal.os.RuntimeInit&quot;, args, zygote);    } else {        fprintf(stderr, &quot;Error: no class name or --zygote supplied.\n&quot;);        app_usage();        LOG_ALWAYS_FATAL(&quot;app_process: no class name or --zygote supplied.&quot;);    }}</code></pre><p>5、最后，调用runtime的start函数启动Zygote。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>经过以上的分析，init进程的启动过程主要分为以下三部：</p><ul><li>1、创建和挂载启动所需的文件目录。</li><li>2、初始化和启动属性服务。</li><li>3、解析init.rc配置文件并启动Zygote进程。</li></ul><p>下篇，将会继续为大家讲解Android系统启动流程中的Zygote进程和SystemService启动过程，敬请期待~</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/02/18/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8Binit%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
