<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deep into Android</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Persist + Plan = Growing</description>
    <pubDate>Sun, 28 Jul 2019 10:18:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Android性能优化之绘制优化</title>
      <link>http://yoursite.com/2019/07/28/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E7%BB%98%E5%88%B6%E4%BC%98%E5%8C%96/</link>
      <guid>http://yoursite.com/2019/07/28/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E7%BB%98%E5%88%B6%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Sun, 28 Jul 2019 10:07:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>我们都知道，造成绘制不流畅最大的罪魁祸首就是卡顿，而卡顿的主要场景有很多，按场景可以分成4类：UI绘制、应用启动、页面跳转、事件响应，其中又可细分为如下：</p><h5 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h5><ul><li>绘制</li><li>刷新</li></ul><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><ul><li>安装启动</li><li>冷启动</li><li>热启动</li></ul><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><ul><li>页面间跳转</li><li>前后台切换</li></ul><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><ul><li>按键</li><li>系统事件</li><li>滑动</li></ul><p>造成其根本原因可以分为两大类：</p><h5 id="界面绘制"><a href="#界面绘制" class="headerlink" title="界面绘制"></a>界面绘制</h5><ul><li>绘制层级深</li><li>页面复杂</li><li>刷新不合理</li></ul><h5 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h5><ul><li>数据处理在UI线程</li><li>占用CPU高，导致主线程拿不到时间片</li><li>内存增加导致GC频繁，从而引起卡顿</li></ul><h3 id="一、Android系统显示原理"><a href="#一、Android系统显示原理" class="headerlink" title="一、Android系统显示原理"></a>一、Android系统显示原理</h3><p>Android的显示过程可以简单概括为：Android应用程序把经过测量、布局、绘制后的surface缓存数据、通过SurfaceFlinger把数据渲染到显示屏幕上，通过Android的刷新机制来刷新数据。也就是说应用层负责绘制，系统层负责渲染，通过进程间通信把应用层需要绘制的数据传递到系统层服务，系统层服务通过刷新机制把数据更新到屏幕。</p><h4 id="1-1、绘制原理"><a href="#1-1、绘制原理" class="headerlink" title="1.1、绘制原理"></a>1.1、绘制原理</h4><h5 id="1、应用层"><a href="#1、应用层" class="headerlink" title="1、应用层"></a>1、应用层</h5><p>在Android的每个View都会经过Measure和Layout来确定当前需要绘制的View所在的大小和位置，通过绘制到surface，在Android系统中整体的绘制源码是在ViewRootImpl类的performTraversals()方法，通过这个方法可以看出Measure和Layout都是递归来获取View的大小和位置，并且以深度作为优先级。显然，层级越深，元素越多，耗时就越长。</p><p>对于绘制，Android支持两种绘制方式：</p><ul><li>软件绘制（CPU）</li><li>硬件绘制（GPU）</li></ul><p>硬件加速从Android 3.0开始支持，它在UI显示和绘制效率方面远高于软件绘制。但它的局限如下：</p><ul><li>耗电：GPU功耗高于CPU。</li><li>兼容性：不兼容某些接口和函数。</li><li>内存大：使用OpenGL的接口需要占用内存8MB。</li></ul><h5 id="2、系统层"><a href="#2、系统层" class="headerlink" title="2、系统层"></a>2、系统层</h5><p>将数据渲染到屏幕上是通过系统级进程中的SurfaceFlinger服务来实现的，它的主要工作流程如下：</p><ul><li>1、响应客户端事件，创建Layer与客户端的Surface建立连接。</li><li>2、接收客户端数据和属性，修改Layer属性，如尺寸、颜色、透明度等。</li><li>3、将创建的Layer内容刷新到屏幕上。</li><li>4、维持Layer的序列，并对Layer最终输出做出裁剪计算。</li></ul><p>其中，SurfaceFlinger系统进程和应用进程使用了匿名共享内存SharedClient，并且，每一个应用和SurfaceFlinger之间都会创建一个SharedClient，并且，每个SharedClient中，最多可以创建31个SharedBufferStack，每一个SharedBufferStack对应一个Surface，即一个window。（其中包含了两个（小于4.1版本）或者三个（4.1及以上版本）缓冲区）</p><p>因此，从上可知，一个Android应用程序最多可以包含31个窗口。最后，显示的整体流程如下：</p><ul><li>应用层绘制到缓冲区</li><li>SurfaceFlinger把缓冲区数据渲染到屏幕，其中使用了Android匿名共享内存SharedClient缓存需要显示的数据来达到目的。</li></ul><p>绘制的过程首先是CPU准备数据，通过Driver层把数据交给CPU渲染，其中CPU主要负责Measure、Layout、Record、Execute的数据计算工作，GPU负责Rasterization（栅格化）、渲染。因为图形API不允许CPU直接和GPU通信，所以要通过一个图形驱动的中间层来进行连接。图形驱动里面维护了一个队列，CPU把display list（待显示的数据列表）添加到队列中，GPU从这个队列中取出数据进行绘制，最终才在显示屏上显示出来。</p><p>Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，如果每次渲染都成功，这样就能够达到流畅的画面所需的60FPS。</p><h4 id="1-2-刷新机制"><a href="#1-2-刷新机制" class="headerlink" title="1.2 刷新机制"></a>1.2 刷新机制</h4><p>4.1版本的Project Butter对Android Display系统进行了重构，引入了三个核心元素：VSYNC（Vertical Synchronization）、Triple Buffer、Choreographer。其中作为Project Buffer核心的VSYNC，即垂直同步可认为是一种定时中断。而Choreographer起调度的作用，将绘制工作统一到VSYNC的某个时间点上，使应用的绘制工作有序。</p><h5 id="为什么要推出Project-Butter？"><a href="#为什么要推出Project-Butter？" class="headerlink" title="为什么要推出Project Butter？"></a>为什么要推出Project Butter？</h5><p>解决刷新不同步的问题。</p><h5 id="为什么要使用双缓冲技术？"><a href="#为什么要使用双缓冲技术？" class="headerlink" title="为什么要使用双缓冲技术？"></a>为什么要使用双缓冲技术？</h5><p>在Linux上通常使用Framebuffer来做显示输出，当用户进程更新Framebuffer中的数据后，显示驱动会把FrameBuffer中每个像素点的值更新到屏幕，但是如果上一帧数据还没显示完，Framebuffer中的数据又更新了，就会带来残影的问题，用户会觉得有闪烁感，所以采用了双缓冲技术。</p><h5 id="双缓冲的含义？"><a href="#双缓冲的含义？" class="headerlink" title="双缓冲的含义？"></a>双缓冲的含义？</h5><p>双缓冲意味着要使用两个缓冲区（在上文提及的SharedBufferStack中），其中一个称为Front Buffer，另一个称为Back Buffer。UI总是先在Back Buffer中绘制，然后再和Front Buffer交换，渲染到显示设备中。即只有当另一个buffer的数据准备好后，通过io_ctl来通知显示设备切换Buffer。</p><h5 id="Choreographer的作用是什么？"><a href="#Choreographer的作用是什么？" class="headerlink" title="Choreographer的作用是什么？"></a>Choreographer的作用是什么？</h5><p>当收到VSYNC信号时，调用用户设置的回调函数。回调类型的优先级从高到低为CALLBACK_INPUT、CALLBACK_ANIMATION、CALLBACK_TRAVERSAL。</p><h5 id="当第一帧数据没有及时处理时，为什么CPU不能在第二个16ms处即VSync到来就开始工作呢？"><a href="#当第一帧数据没有及时处理时，为什么CPU不能在第二个16ms处即VSync到来就开始工作呢？" class="headerlink" title="当第一帧数据没有及时处理时，为什么CPU不能在第二个16ms处即VSync到来就开始工作呢？"></a>当第一帧数据没有及时处理时，为什么CPU不能在第二个16ms处即VSync到来就开始工作呢？</h5><p>因为只有两个Buffer；所以4.1版本后，出现了第三个缓冲区：Triple Buffer。它利用CPU/GPU的空闲等待时间提前准备好数据，并不一定会使用。</p><p><strong>注意</strong>：除非必要，大部分情况下只是用到双缓冲。而且，缓冲区并不是越多越好，要做到平衡到最佳效果。</p><h5 id="Google做了这么多的优化，为什么实际开发中应用还存在卡顿现象？"><a href="#Google做了这么多的优化，为什么实际开发中应用还存在卡顿现象？" class="headerlink" title="Google做了这么多的优化，为什么实际开发中应用还存在卡顿现象？"></a>Google做了这么多的优化，为什么实际开发中应用还存在卡顿现象？</h5><p>因为VSync 中断处理的线程优先级一定要最高，否则即使接收到VSync中断，不能及时处理，也是徒劳无功。</p><h4 id="1-3、卡顿的根本原因"><a href="#1-3、卡顿的根本原因" class="headerlink" title="1.3、卡顿的根本原因"></a>1.3、卡顿的根本原因</h4><ul><li>绘制任务太重、绘制一帧内容耗时太长。</li><li>主线程太忙，导致VSync信号来时还没有准备好数据导致丢帧。</li></ul><h3 id="二、性能分析工具"><a href="#二、性能分析工具" class="headerlink" title="二、性能分析工具"></a>二、性能分析工具</h3><p>Android常用的性能优化工具一般有如下几种：</p><ul><li>Hierarchy View：查看Layout层次</li><li>Android Studio自带的Profile工具</li><li>静态代码检查工具Lint</li><li>TraceView</li><li>Systrace</li></ul><h4 id="2-1、卡顿检测工具Profile-GPU-Rendering"><a href="#2-1、卡顿检测工具Profile-GPU-Rendering" class="headerlink" title="2.1、卡顿检测工具Profile GPU Rendering"></a>2.1、卡顿检测工具Profile GPU Rendering</h4><p>它是Android手机上自带的一个辅助工具，打开Profile GPU Rendering后可以看到实时刷新的彩色图，其中每一根竖线表示一帧，由多个颜色组成，不同颜色的解释如下：</p><ul><li>每一条柱状图都由红、黄、蓝、紫组成，分别对应每一帧在不同阶段的实际耗时。</li><li>蓝色：测量绘制的时间，需要多长时间去创建和更新DisplayList。在蓝色的线很高时，有可能是因为需要重新绘制，或者自定义视图的onDraw函数处理事情太多。</li><li>红色：Android进行2D渲染Display List的执行的时间。当红色的线非常高时，可能是由于重新提交了视图导致的。</li><li>橙色：处理时间或CPU告诉GPU渲染一帧的地方，如果柱状图很高，就意味着GPU太繁忙了。</li><li>紫色：将资源转移到渲染线程的时间。（4.0版本以上提供）</li></ul><p>并且，从Android M开始变成了渲染八步骤：</p><h5 id="1、橙色-Swap-Buffers"><a href="#1、橙色-Swap-Buffers" class="headerlink" title="1、橙色-Swap Buffers"></a>1、橙色-Swap Buffers</h5><p>表示GPU处理任务的时间。</p><h5 id="2、红色-Command-Issue"><a href="#2、红色-Command-Issue" class="headerlink" title="2、红色-Command Issue"></a>2、红色-Command Issue</h5><p>进行2D渲染显示列表的时间，越高表示需要绘制的视图越多。</p><h5 id="3、浅蓝-Sync-amp-Upload"><a href="#3、浅蓝-Sync-amp-Upload" class="headerlink" title="3、浅蓝-Sync&amp;Upload"></a>3、浅蓝-Sync&amp;Upload</h5><p>准备有待绘制的图片所耗费的时间，越高表示图片数量越多或图片越大。</p><h5 id="4、深蓝-Draw"><a href="#4、深蓝-Draw" class="headerlink" title="4、深蓝-Draw"></a>4、深蓝-Draw</h5><p>测量和绘制视图所需的时间，越高表示视图越多或onDraw方法有耗时操作。</p><h5 id="5、一级绿-Measure-Layout"><a href="#5、一级绿-Measure-Layout" class="headerlink" title="5、一级绿-Measure/Layout"></a>5、一级绿-Measure/Layout</h5><p>onMeasure与onLayout所花费的时间。</p><h5 id="6、二级绿-Animation"><a href="#6、二级绿-Animation" class="headerlink" title="6、二级绿-Animation"></a>6、二级绿-Animation</h5><p>执行动画所需要花费的时间。越高表示使用了非官方动画工具或执行中有读写操作。</p><h5 id="7、三级绿-Input-Handling"><a href="#7、三级绿-Input-Handling" class="headerlink" title="7、三级绿-Input Handling"></a>7、三级绿-Input Handling</h5><p>系统处理输入事件所耗费的时间。</p><h5 id="8、四级绿-Misc-Time-Vsync-Delay"><a href="#8、四级绿-Misc-Time-Vsync-Delay" class="headerlink" title="8、四级绿-Misc Time/Vsync Delay"></a>8、四级绿-Misc Time/Vsync Delay</h5><p>主线程执行了太多任务，导致UI渲染跟不上vSync的信号而出现掉帧。</p><p>此外，可通过如下adb命令将具体的耗时输出到日志中来分析：</p><pre><code>adb shell dumpsys gfxinfo com.**.** </code></pre><h4 id="2-2、TraceView"><a href="#2-2、TraceView" class="headerlink" title="2.2、TraceView"></a>2.2、TraceView</h4><p>它主要用来分析函数的调用过程，可以对Android的应用程序以及Framework层代码进行性能分析。</p><p>使用TraceView查看耗时，主要关注Calls + Recur Calls / Total和（该方法调用次数+递归次数）和Cpu Time / Call（该方法耗时）这两个值，然后优化这些方法的逻辑和调用次数，减少耗时。</p><p><strong>注意</strong>：RealTime（实际时长）的实际执行时间要比CPU Time要长，因为它包括了CPU的上下文切换、阻塞、GC等。</p><h4 id="2-3、Systrace-UI性能分析"><a href="#2-3、Systrace-UI性能分析" class="headerlink" title="2.3、Systrace UI性能分析"></a>2.3、Systrace UI性能分析</h4><p>Systrace是Android 4.1及以上版本提供的性能数据采样和分析工具，它的作用有：</p><ul><li>收集Android关键子系统（如surfaceflinger、WindowManagerService等Framework部分关键模块、服务、View系统等）的运行信息，这样可以更直观地分析系统瓶颈，改进性能。</li><li>跟踪系统的I/0操作、内核工作队列、CPU负载等，在UI显示性能分析上提供很好的数据，特别是在动画播放不流畅、渲染卡等问题上。</li></ul><p><strong>注意：Systrace是以系统的角度返回一些信息，并不能定位到具体耗时的方法，建议使用TraceView。</strong></p><h5 id="1、Systrace使用方法"><a href="#1、Systrace使用方法" class="headerlink" title="1、Systrace使用方法"></a>1、Systrace使用方法</h5><p>使用事项如下：</p><ul><li>支持4.1版本及以上。</li><li>4.3以前的系统版本需要打开Setting&gt;Developer options&gt;Monitoring&gt;Enable traces。</li></ul><p>一般我们使用命令行来得到输出的html表单，在4.3版本及以上可以省略设置跟踪类别标签来获取默认值。命令如下：</p><pre><code>cd android-sdk/platform-tools/systracepython systrace.py --time=10 -o mynewtrace.html sched gfx view wm</code></pre><p>其中，常用的几个参数命令如下：</p><ul><li>-o <file>：保存的文件名。</file></li><li>-t N, –time=N：多少秒内的数据，默认为5s，以当前时间点往后倒N秒时间。</li></ul><p>其余标签用法请<a href="http://developer.android.com/intl/zh-cn/tools/help/systrace.html" target="_blank" rel="external">参见此处</a>。</p><p>此外，我们可以使用代码插桩的方式，在Android 4.3及以上版本可以使用Trace类的Trace.beginSection()与Trace.endSection()方法来进行追踪。其中需要注意：</p><ul><li>保证beginSection和endSection的调用次数要匹配。</li><li>Trace的begin与end必须在同一线程中执行。</li></ul><h5 id="2、分析Systrace报告"><a href="#2、分析Systrace报告" class="headerlink" title="2、分析Systrace报告"></a>2、分析Systrace报告</h5><p>使用Chrome打开文件后，其中和UI绘制关系最密切的是Alerts和Frame两个数据：</p><ul><li>Alerts：标记了性能有问题的点，单击该点可以查看详细信息，右侧的Alerts框还可以看到每个类型的Alerts的数量。</li><li>Frame：每个应用都有一行专门显示frame，每一帧就显示为一个绿色的圆圈。当显示为黄色或者红色时，它的渲染时间超过了16.6ms。</li></ul><p>这里，列出Systrace有用的快捷键：</p><ul><li>W：放大</li><li>S：缩小</li><li>A：左移</li><li>D：右移</li></ul><h3 id="三、布局优化"><a href="#三、布局优化" class="headerlink" title="三、布局优化"></a>三、布局优化</h3><h4 id="3-1、布局优化方法"><a href="#3-1、布局优化方法" class="headerlink" title="3.1、布局优化方法"></a>3.1、布局优化方法</h4><h5 id="1、减少层级"><a href="#1、减少层级" class="headerlink" title="1、减少层级"></a>1、减少层级</h5><ul><li>合理使用RelativeLayout和LinearLayout。</li><li>合理使用Merge。</li></ul><p>RelativeLayout也存在性能低的问题，原因是RelativeLayout会对子View做两次测量。但如果在LinearLayout中有weight属性，也需要进行两次测量，因为没有更多的依赖关系，所以仍然会比RelativeLayout的效率高。</p><p><strong>注意：由于Android的碎片化程度很高，所以使用RelativeLayout能使构建的布局适应性更强。</strong></p><p>merge的原理：在Android布局的源码中，如果是Merge标签，那么直接将其中的子元素添加到Merge标签Parent中。</p><p>注意：</p><ul><li>Merge只能用在布局XML文件的根元素。</li><li>使用merge来加载一个布局时，必须指定一个ViewGroup作为其父元素，并且要设置加载的attachToRoot参数为true。</li><li>不能在ViewStub中使用Merge标签。原因就是ViewStub的inflate方法中根本没有attachToRoot的设置。</li></ul><h5 id="2、提供显示速度"><a href="#2、提供显示速度" class="headerlink" title="2、提供显示速度"></a>2、提供显示速度</h5><p>ViewStub是一个轻量级的View，它是一个看不见的，并且不占布局位置，占用资源非常小的视图对象。可以为ViewStub指定一个布局，加载布局时，只有ViewStub会被初始化，然后当ViewStub被设置为可见时，或是调用了ViewStub.inflate()时，ViewStub所指向的布局会被加载和实例化，然后ViewStub的布局属性都会传给它指向的布局。</p><p>注意：</p><ul><li>ViewStub只能加载一次，之后ViewStub对象会被置为空。所以它不适用于需要按需显示隐藏的情况。</li><li>ViewStub只能用来加载一个布局文件，而不是某个具体的View。</li><li>ViewStub中不能嵌套Merge标签。</li></ul><h5 id="3、布局复用"><a href="#3、布局复用" class="headerlink" title="3、布局复用"></a>3、布局复用</h5><p>Android的布局复用可以通过<include>标签来实现。</include></p><p>一些优化总结：</p><ul><li>使用<viewstub>标签加载一些不常用的布局。</viewstub></li><li>尽可能少用wrap_content，wrap_content会增加布局measure时的计算成本，已知宽高为固定值时，不用wrap_content。</li><li>使用TextView替换RL、LL。</li><li>使用低端机进行优化，以发现性能瓶颈。</li><li>使用TextView的行间距替换多行文本：lineSpacingExtra/lineSpacingMultiplier。</li><li>使用Spannable/Html.fromHtml替换多种不同规格文字。</li><li>尽可能使用LinearLayout自带的分割线。</li><li>使用Space添加间距。</li><li>多利用lint + alibaba规约修复问题点。</li><li>嵌套层级过多可以考虑使用约束布局。</li></ul><h3 id="四、避免过度绘制"><a href="#四、避免过度绘制" class="headerlink" title="四、避免过度绘制"></a>四、避免过度绘制</h3><p>导致过度绘制的主要原因是：</p><ul><li>XML布局：控件有重叠且都有设置背景。</li><li>View自绘：View.OnDraw里面同一个区域被绘制多次。</li></ul><h4 id="4-1、过度绘制检测工具"><a href="#4-1、过度绘制检测工具" class="headerlink" title="4.1、过度绘制检测工具"></a>4.1、过度绘制检测工具</h4><p>打开手机开发者选项中的Show GPU Overdraw选项，会有不同的颜色来表示过度绘制次数，依次是无、蓝、绿、淡红、深红，分别对应0-4次过度绘制。</p><h4 id="4-2、如何避免过度绘制"><a href="#4-2、如何避免过度绘制" class="headerlink" title="4.2、如何避免过度绘制"></a>4.2、如何避免过度绘制</h4><h5 id="1、布局上的优化"><a href="#1、布局上的优化" class="headerlink" title="1、布局上的优化"></a>1、布局上的优化</h5><ul><li>移除XML中非必需的背景，或根据条件设置。</li><li>有选择性地移除窗口背景：getWindow().setBackgroundDrawable(null)。</li><li>按需显示占位背景图片。</li></ul><p>比如：在获取Avatar的图像之后，把ImageView的Background设置为Transparent，只有当图像没有获取到时，才设置对应的Background占位图片。</p><h5 id="2、自定义View优化"><a href="#2、自定义View优化" class="headerlink" title="2、自定义View优化"></a>2、自定义View优化</h5><p>通过canvas.clipRect()来帮助系统识别那些可见的区域。这个方法可以指定一块矩形区域，只有在这个区域内才会被绘制。并且，它还可以节约CPU和GPU资源，在clipRect区域之外的绘制指令都不会被执行。</p><p>在绘制一个单元之前，首先判断该单元的区域是否在Canvas的剪切域内。若不在，直接返回，避免CPU和GPU的计算和渲染工作。</p><h3 id="五、启动优化"><a href="#五、启动优化" class="headerlink" title="五、启动优化"></a>五、启动优化</h3><h4 id="5-1、应用启动流程"><a href="#5-1、应用启动流程" class="headerlink" title="5.1、应用启动流程"></a>5.1、应用启动流程</h4><p>应用的启动流程即为从点击图标到用户可操作的全部过程。它的意义就是为了避免用户一安装应用就卸载。</p><p>启动分为两种类型：</p><ul><li>冷启动：系统会重新创建一个新的进程分配给它。</li><li>热启动：因为会从已有的进程中启动，所以它不会再创建和初识Application。</li></ul><p>具体又可分为如下过程：</p><h5 id="冷启动前"><a href="#冷启动前" class="headerlink" title="冷启动前"></a>冷启动前</h5><ul><li>1、点击相应应用图标。</li><li>2、App启动之后立即展示一个空白的Window（预览窗口显示）。</li><li>3、创建App进程。</li></ul><h5 id="冷启动后"><a href="#冷启动后" class="headerlink" title="冷启动后"></a>冷启动后</h5><ul><li>1、创建App对象。</li><li>2、启动Main Thread。</li><li>3、创建启动的Activity对象，闪屏显示。</li><li>4、创建启动的MainActivity对象，主页显示。</li><li>5、其它工作。</li></ul><h4 id="5-2、启动耗时监测"><a href="#5-2、启动耗时监测" class="headerlink" title="5.2、启动耗时监测"></a>5.2、启动耗时监测</h4><h5 id="1、adb-shell-am"><a href="#1、adb-shell-am" class="headerlink" title="1、adb shell am"></a>1、adb shell am</h5><p>使用adb shell获取应用真实的启动时间：</p><pre><code>adb shell am start -W [packageName]/[packageName.AppstartActivity]</code></pre><p>执行后会得到三个时间：ThisTime、TotalTime和WaitTime，一般查看得到的TotalTime，即应用的启动时间，包括创建进程+Application初始化+Activity初始化到界面显示。</p><h5 id="2、代码打点"><a href="#2、代码打点" class="headerlink" title="2、代码打点"></a>2、代码打点</h5><p>可以写一个统计耗时的工具类来记录整个过程的耗时情况。其中需要注意的有：</p><ul><li>在上传数据到服务器时建议根据用户ID的尾号来抽样上报。</li><li>在项目中核心基类的关键回调函数和核心方法中加入打点。</li></ul><p>代码如下：</p><pre><code>/*** 耗时监视器对象，记录整个过程的耗时情况，可以用在很多需要统计的地方，比如Activity的启动耗时和Fragment的启动耗时。*/public class TimeMonitor {    private final String TAG = TimeMonitor.class.getSimpleName();    private int mMonitorId = -1;    // 保存一个耗时统计模块的各种耗时，tag对应某一个阶段的时间    private HashMap&lt;String, Long&gt; mTimeTag = new HashMap&lt;&gt;();    private long mStartTime = 0;    public TimeMonitor(int mMonitorId) {        Log.d(TAG, &quot;init TimeMonitor id: &quot; + mMonitorId);        this.mMonitorId = mMonitorId;    }    public int getMonitorId() {        return mMonitorId;    }    public void startMonitor() {        // 每次重新启动都把前面的数据清除，避免统计错误的数据        if (mTimeTag.size() &gt; 0) {        mTimeTag.clear();        }        mStartTime = System.currentTimeMillis();    }    /**    * 每打一次点，记录某个tag的耗时    */    public void recordingTimeTag(String tag) {        // 若保存过相同的tag，先清除        if (mTimeTag.get(tag) != null) {            mTimeTag.remove(tag);        }        long time = System.currentTimeMillis() - mStartTime;        Log.d(TAG, tag + &quot;: &quot; + time);        mTimeTag.put(tag, time);    }    public void end(String tag, boolean writeLog) {        recordingTimeTag(tag);        end(writeLog);    }    public void end(boolean writeLog) {        if (writeLog) {            //写入到本地文件        }    }    public HashMap&lt;String, Long&gt; getTimeTags() {        return mTimeTag;    }}</code></pre><p>为了使代码更好管理，定义一个打点配置类：</p><pre><code>/*** 打点配置类，用于统计各阶段的耗时，便于代码的维护和管理。*/public final class TimeMonitorConfig {    // 应用启动耗时    public static final int TIME_MONITOR_ID_APPLICATION_START = 1;}</code></pre><p>因为，耗时统计可能会在多个模块和类中需要打点，所以需要一个单例类来管理各个耗时统计的数据：</p><pre><code>/*** 采用单例管理各个耗时统计的数据。*/public class TimeMonitorManager {    private static TimeMonitorManager mTimeMonitorManager = null;private HashMap&lt;Integer, TimeMonitor&gt; mTimeMonitorMap = null;    public synchronized static TimeMonitorManager getInstance() {        if (mTimeMonitorManager == null) {            mTimeMonitorManager = new TimeMonitorManager();        }        return mTimeMonitorManager;    }    public TimeMonitorManager() {        this.mTimeMonitorMap = new HashMap&lt;Integer, TimeMonitor&gt;();    }    /**     * 初始化打点模块    */    public void resetTimeMonitor(int id) {        if (mTimeMonitorMap.get(id) != null) {            mTimeMonitorMap.remove(id);        }        getTimeMonitor(id);    }    /**    * 获取打点器    */    public TimeMonitor getTimeMonitor(int id) {        TimeMonitor monitor = mTimeMonitorMap.get(id);        if (monitor == null) {            monitor = new TimeMonitor(id);            mTimeMonitorMap.put(id, monitor);        }        return monitor;    }}</code></pre><p>主要在以下几个方面需要打点：</p><ul><li>应用程序的生命周期节点。</li><li>启动时需要初始化的重要方法，如数据库初始化，读取本地的一些数据。</li><li>其他耗时的一些算法。</li></ul><p>例如，启动时在Application和第一个Activity加入打点统计：</p><p><strong>Application：</strong></p><pre><code>@Overrideprotected void attachBaseContext(Context base) {    super.attachBaseContext(base);    TimeMonitorManager.getInstance().resetTimeMonitor(TimeMonitorConfig.TIME_MONITOR_ID_APPLICATION_START);}@Overridepublic void onCreate() {    super.onCreate();    SoLoader.init(this, /* native exopackage */ false);    TimeMonitorManager.getInstance().getTimeMonitor(TimeMonitorConfig.TIME_MONITOR_ID_APPLICATION_START).recordingTimeTag(&quot;Application-onCreate&quot;);}</code></pre><p><strong>第一个Activity：</strong></p><pre><code>@Overrideprotected void onCreate(Bundle savedInstanceState) {    TimeMonitorManager.getInstance().getTimeMonitor(TimeMonitorConfig.TIME_MONITOR_ID_APPLICATION_START).recordingTimeTag(&quot;SplashActivity-onCreate&quot;);    super.onCreate(savedInstanceState);    initData();    TimeMonitorManager.getInstance().getTimeMonitor(TimeMonitorConfig.TIME_MONITOR_ID_APPLICATION_START).recordingTimeTag(&quot;SplashActivity-onCreate-Over&quot;);}@Overrideprotected void onStart() {    super.onStart();    TimeMonitorManager.getInstance().getTimeMonitor(TimeMonitorConfig.TIME_MONITOR_ID_APPLICATION_START).end(&quot;SplashActivity-onStart&quot;, false);}</code></pre><h4 id="5-3-启动速度分析工具"><a href="#5-3-启动速度分析工具" class="headerlink" title="5.3 启动速度分析工具"></a>5.3 启动速度分析工具</h4><p>目标：力求获取准确的数据评估。</p><h5 id="1、TraceView"><a href="#1、TraceView" class="headerlink" title="1、TraceView"></a>1、TraceView</h5><p>性能损耗太大，得出的结果并不真实</p><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>主要做热点分析，得到两种数据：</p><ul><li>单次执行最耗时的方法。</li><li>执行次数最多的方法。</li></ul><h5 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h5><ul><li>1、代码中添加：Debug.startMethodTracing()、检测方法、Debug.stopMethodTracing()。</li><li>2、打开Profile-&gt;CPU-&gt;点击Record-&gt;点击Stop-&gt;查看Profile下方Top Down/Bottom Up找出耗时的热点方法。</li></ul><h5 id="2、Systrace-函数插桩"><a href="#2、Systrace-函数插桩" class="headerlink" title="2、Systrace+函数插桩"></a>2、Systrace+函数插桩</h5><h5 id="Systrace原理"><a href="#Systrace原理" class="headerlink" title="Systrace原理"></a>Systrace原理</h5><p>在系统的一些关键链路（如SystemServcie、虚拟机、Binder驱动）插入一些信息（Label），<br>通过Label的开始和结束来确定某个核心过程的执行时间，然后把这些Label信息收集起来得到系统关键路径的运行时间信息，<br>最后得到整个系统的运行性能信息。Android Framework里面一些重要的模块都插入了label信息(Java层通过android.os.Trace类完成，<br>native层通过ATrace宏完成），用户App中可以添加自定义的Lable。</p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li>系统版本越高，Android Framework中添加的系统可用Label就越多，能够支持和分析的系统模块也就越多。</li><li>必须手动缩小范围，会帮助你加速收敛问题的分析过程，进而快速地定位和解决问题。</li></ul><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><h5 id="1、命令行"><a href="#1、命令行" class="headerlink" title="1、命令行"></a>1、命令行</h5><p>systrace.py -t 10 sched gfx view wm am app webview -a <package-name></package-name></p><h5 id="2、代码插桩"><a href="#2、代码插桩" class="headerlink" title="2、代码插桩"></a>2、代码插桩</h5><p>定义Trace静态工厂类i，o封装Trace.begainSection(),Trace.endSection()。</p><p>分析App的冷启动过程：在Application类的attachBaseContext调用<code>Trace.beginSection(&quot;Boot Procedure&quot;)</code>，然后在App首页的onWindowFoucusChanged方法<br>或者你认为别的合适的启动结束点调用<code>Trace.endSection</code>就可以到启动过程的信息。</p><p>手动开启App自定义Label的Trace功能：通过反射设置setAppTracingAllowed方法为true。</p><h4 id="5-4、启动优化方案"><a href="#5-4、启动优化方案" class="headerlink" title="5.4、启动优化方案"></a>5.4、启动优化方案</h4><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><h5 id="1、点击图标很久都不响应"><a href="#1、点击图标很久都不响应" class="headerlink" title="1、点击图标很久都不响应"></a>1、点击图标很久都不响应</h5><p>预览窗口被禁用或设置为透明</p><h5 id="2、首页显示太慢"><a href="#2、首页显示太慢" class="headerlink" title="2、首页显示太慢"></a>2、首页显示太慢</h5><p>初始化任务太多</p><h5 id="3、首页显示后无法操作"><a href="#3、首页显示后无法操作" class="headerlink" title="3、首页显示后无法操作"></a>3、首页显示后无法操作</h5><p>太多任务初始化异步/延迟</p><h5 id="优化区域"><a href="#优化区域" class="headerlink" title="优化区域"></a>优化区域</h5><p>Application、Activity创建以及回调等过程</p><h5 id="通常手段"><a href="#通常手段" class="headerlink" title="通常手段"></a>通常手段</h5><ul><li>利用主题背景防止出现白屏</li><li>减少Application的onCreate中所要做的事情</li><li>一些不重要的SDK延迟或者异步加载</li><li>多进程情况下一定要可以在onCreate中去区分进程做一些初始化工作</li><li>部分将要使用到的类异步加载（IntentService）</li><li>针对multidex专门做优化（5.0以上默认使用ART，在安装时已将Class.dex转换为oat文件了，无需优化）</li></ul><h5 id="具体优化步骤如下所示："><a href="#具体优化步骤如下所示：" class="headerlink" title="具体优化步骤如下所示："></a>具体优化步骤如下所示：</h5><h5 id="1、主题切换"><a href="#1、主题切换" class="headerlink" title="1、主题切换"></a>1、主题切换</h5><p>使用Activity的windowBackground主题属性预先设置一个启动图片（layer-list）,在启动后，在Activity的onCreate()方法前再setTheme(R.style.AppTheme)</p><ul><li>优点：简单</li><li>缺点：<br>治标不治本，表面上产生一种快的感觉。</li></ul><p>对于中低端机，总的闪屏时间会更长，建议只在Android6.0/7.0以上才启用“预览闪屏”方案，让手机性能好的用户可以有更好的体验。</p><h5 id="2、避免过重的App初始化"><a href="#2、避免过重的App初始化" class="headerlink" title="2、避免过重的App初始化"></a>2、避免过重的App初始化</h5><p>获取所有应用activity堆栈信息</p><pre><code>adb shell dumpsys activity</code></pre><p>adb获取自己的应用activity堆栈信息</p><pre><code>adb shell dumpsys activity | grep com.xxx.xxx.xx</code></pre><p>使用adb命令启动一个Activity</p><pre><code>adb shell am start com.growingwiththeweb.example/.MainActivity</code></pre><p>adb命令统计启动时间</p><pre><code>adb shell am start -W com.growingwiththeweb.example/.SplashActivity</code></pre><ul><li>1、分步初始化（优先级高的放前面）</li><li>2、异步初始化（如出现主线程要使用时还没初始化则在此次使用前初始化）</li><li>3、延迟初始化（利用闪屏页的停留时间进行部分初始化）</li></ul><h5 id="3、Multidex预加载优化"><a href="#3、Multidex预加载优化" class="headerlink" title="3、Multidex预加载优化"></a>3、Multidex预加载优化</h5><ul><li>1、启动时单独开一个进程进行Multidex的第一次加载，即Dex提取和Dexopt操作。</li><li>2、此时，主进程在后台等待，优化进程执行完毕后通知主进程继续执行，此时执行到Multidex时，则已经发现提取优化好了Dex，直接执行。</li></ul><p><strong>注意：判断只有在主进程及SDK 5.0以下才进行Multidex的预加载。</strong></p><h5 id="4、闪屏页和主页绘制优化（即布局优化和过渡绘制优化）"><a href="#4、闪屏页和主页绘制优化（即布局优化和过渡绘制优化）" class="headerlink" title="4、闪屏页和主页绘制优化（即布局优化和过渡绘制优化）"></a>4、闪屏页和主页绘制优化（即布局优化和过渡绘制优化）</h5><h5 id="5、业务层面优化"><a href="#5、业务层面优化" class="headerlink" title="5、业务层面优化"></a>5、业务层面优化</h5><h3 id="六、合理的刷新机制"><a href="#六、合理的刷新机制" class="headerlink" title="六、合理的刷新机制"></a>六、合理的刷新机制</h3><h4 id="6-1-减少刷新次数"><a href="#6-1-减少刷新次数" class="headerlink" title="6.1 减少刷新次数"></a>6.1 减少刷新次数</h4><ul><li>控制刷新频率</li><li>避免没有必要的刷新</li></ul><h4 id="6-2-避免后台线程的影响"><a href="#6-2-避免后台线程的影响" class="headerlink" title="6.2 避免后台线程的影响"></a>6.2 避免后台线程的影响</h4><p>如通过监听ListView的onScrollStateChanged事件，在滚动时暂停图片下载线程工作，结束后再开始，可以提高ListView的滚动平滑度。</p><h4 id="6-3-缩小刷新区域"><a href="#6-3-缩小刷新区域" class="headerlink" title="6.3 缩小刷新区域"></a>6.3 缩小刷新区域</h4><p>如自定义View一般采用invalidate方法刷新，可以用以下重载方法刷新要刷新的区域：</p><ul><li>invalidate(Rect dirty);</li><li>invalidate(int left, int top, int right, int bottom);</li></ul><h3 id="七、提升动画性能"><a href="#七、提升动画性能" class="headerlink" title="七、提升动画性能"></a>七、提升动画性能</h3><p>提升动画性能主要从以下三个纬度着手：</p><ul><li>流畅度：控制每一帧动画在16m内完成。</li><li>内存：避免内存泄漏，减小内存开销。</li><li>耗电：减小运算量，优化算法，减小CPU占用。</li></ul><h4 id="7-1-帧动画"><a href="#7-1-帧动画" class="headerlink" title="7.1 帧动画"></a>7.1 帧动画</h4><p>消耗资源最多，效果最差，能不用就不用。</p><h4 id="7-2-补间动画"><a href="#7-2-补间动画" class="headerlink" title="7.2 补间动画"></a>7.2 补间动画</h4><p>使用补间动画实现导致View重绘非常频繁，更新DisplayList的次数过多，且有以下缺点：</p><ul><li>只能用于View对象。</li><li>只有4种动画操作。</li><li>只是改变View的显示效果，但是不会真正改变View的属性。</li></ul><h4 id="7-3-属性动画"><a href="#7-3-属性动画" class="headerlink" title="7.3 属性动画"></a>7.3 属性动画</h4><p>相比于补间动画，属性动画重绘明显会少很多，应优先使用。</p><h4 id="7-4-硬件加速"><a href="#7-4-硬件加速" class="headerlink" title="7.4 硬件加速"></a>7.4 硬件加速</h4><h5 id="1、硬件加速原理"><a href="#1、硬件加速原理" class="headerlink" title="1、硬件加速原理"></a>1、硬件加速原理</h5><p>核心类：DisplayList，每一个View对应一个。</p><p>在打开硬件渲染后绘制View时，其中执行绘制的draw()方法会把所有绘制命令记录到一个新的显示列表（DisplayList），这个显示列表包含了输出的View层级的绘制代码，但并不是加入到显示列表就立刻执行，当这个ViewTree的DisplayList全都记录完毕后，由OpenGLRender负责将Root View中的DisplayList渲染到屏幕上。而invalidate()方法只是在显示列表中记录和更新显示层级，去标记不需要绘制的View。</p><h5 id="2、硬件加速控制级别"><a href="#2、硬件加速控制级别" class="headerlink" title="2、硬件加速控制级别"></a>2、硬件加速控制级别</h5><p>如果应用程序中只使用了标准View或者Drawable，就可以为整个系统打开硬件加速的全局设置。</p><h5 id="3、在动画上使用硬件加速"><a href="#3、在动画上使用硬件加速" class="headerlink" title="3、在动画上使用硬件加速"></a>3、在动画上使用硬件加速</h5><p>硬件纹理操作对一个View进行动画绘制，如果不调用invalidate()方法，就可以减少对View自身频繁的重绘。同时Android 3.0的属性动画也减小了重绘，当View通过硬件层返回时，最终所有的层叠画面显示到屏幕，View的属性同时被处理好，因此只要设置这些属性，就可以明显提高绘制的效率，它们不需要View重绘，设置属性后，View会自动刷新。因此，属性动画中绘制的递归次数比补间动画少很多。</p><p>在Android 3.0前，使用View的绘制缓冲或Canvas.saveLayer()函数对离屏缓冲进行渲染。Android 3.0后则使用View,.setLayerType(type, paint)方法代替，type可以为以下三种Layer类型之一：</p><ul><li>LAYER_TYPE_NONE：普通渲染方式，不会返回一个离屏的缓冲，默认值。</li><li>LAYER_TYPE_HARDWARE：如果这个应用使用了硬件加速，这个View将会在硬件中渲染为硬件纹理。</li><li>LAYER_TYPE_SOFTWARE：此View通过软件渲染为一个Bitmap。</li></ul><h5 id="设计一个动画的流程如下："><a href="#设计一个动画的流程如下：" class="headerlink" title="设计一个动画的流程如下："></a>设计一个动画的流程如下：</h5><p>1、将要执行动画的View的LayerType设置为LAYER_TYPE_HARDWARE。</p><p>2、计算动画View的属性等信息，更新View的属性。</p><p>3、若动画结束，将LayerType设置为NONE。</p><h5 id="硬件加速需要注意的问题："><a href="#硬件加速需要注意的问题：" class="headerlink" title="硬件加速需要注意的问题："></a>硬件加速需要注意的问题：</h5><ul><li>在软件渲染时，可以使用重用Bitmap的方法来节省内存，但是如果开起来硬件加速，这个方案就不起作用。</li><li>开启硬件加速的View在前台运行时，需要耗费额外的内存，加速的UI切换到后台时，产生的额外内存有可能不释放。</li><li>当UI中存在过渡绘制时，硬件加速会比较容易发问题。</li></ul><h3 id="八、卡顿监控方案与实现"><a href="#八、卡顿监控方案与实现" class="headerlink" title="八、卡顿监控方案与实现"></a>八、卡顿监控方案与实现</h3><p>目前比较流行的方案都是利用了Looper中的Printer来实现监控。</p><h4 id="8-1-监控原理"><a href="#8-1-监控原理" class="headerlink" title="8.1 监控原理"></a>8.1 监控原理</h4><p>利用主线程的消息队列处理机制，通过自定义Printer，然后在Printer中获取到两次被调用的时间差，这个时间差就是执行时间。如果该时间超过阈值（如1000ms）时，主线程卡顿发生，并抛出各种有用信息，供开发者分析。（此外，也可以在UI线程以外开启一个异步线程，定时向UI线程发送一个任务，并记下发送时间。任务的内容是将执行时间同步到发送线程，如果UI线程被阻塞，那么发送过去的任务不能被准时执行。但此方法会增加系统开销，不可取）</p><h5 id="可抓取的信息"><a href="#可抓取的信息" class="headerlink" title="可抓取的信息"></a>可抓取的信息</h5><ul><li>基础信息：系统版本、机型、进程名、应用版本号、磁盘空间、UID等。</li><li>耗时信息：卡顿开始和结束时间。</li><li>CPU信息：CPU的信息、整体CPU使用率和本进程CPU使用率（可粗略判断是当前应用消耗CPU资源太多导致的卡顿，还是其他原因）等。</li><li>堆栈信息。</li></ul><h5 id="注意：这里的信息建议抽样上报或者可以先将其保存到本地，在合适的时机以及达到一定的量时，再压缩上报到服务器，供开发者分析。具体监控代码实现可以参考BlockCanary开源项目的代码。"><a href="#注意：这里的信息建议抽样上报或者可以先将其保存到本地，在合适的时机以及达到一定的量时，再压缩上报到服务器，供开发者分析。具体监控代码实现可以参考BlockCanary开源项目的代码。" class="headerlink" title="注意：这里的信息建议抽样上报或者可以先将其保存到本地，在合适的时机以及达到一定的量时，再压缩上报到服务器，供开发者分析。具体监控代码实现可以参考BlockCanary开源项目的代码。"></a>注意：这里的信息建议抽样上报或者可以先将其保存到本地，在合适的时机以及达到一定的量时，再压缩上报到服务器，供开发者分析。具体监控代码实现可以参考BlockCanary开源项目的代码。</h5><h3 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h3><p>至此，这里我们分析一下绘制优化应经历的几个过程：</p><ul><li>1、发现问题：除使用时感知的卡顿外，还应通过卡段监控工具来发现整体的耗时情况，或打开开发者选项的一些辅助工具来发现问题。</li><li>2、分析问题：可以使用Systrace和TraceView来分析耗时，使用Hierarhy Viewer来分析页面层级。</li><li>3、寻求原因：深入探索导致问题的根本原因。</li><li>4、解决问题。</li></ul><p>应用之所以会出现卡顿，除了绘制方面的问题，还有一个影响因素就是内存，不合理地使用内存不仅会导致卡顿，还会对耗电和应用的稳定性造成很大影响，下一篇文章，笔者将对Android中的内存优化进行全面的讲解，若读者觉得哪里有写的不好的地方或有误的地方希望多多进行批评指正，愿我们共同进步和成长！</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android应用性能优化最佳实践</p><p>2、<a href="https://mp.weixin.qq.com/s/QVOYF2nfoWMCbM5YsxQgRQ?" target="_blank" rel="external">必知必会 | Android 性能优化的方面方面都在这儿</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/07/28/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E7%BB%98%E5%88%B6%E4%BC%98%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android开发工程师高效成长指南</title>
      <link>http://yoursite.com/2019/05/12/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E6%95%88%E6%88%90%E9%95%BF%E6%8C%87%E5%8D%97/</link>
      <guid>http://yoursite.com/2019/05/12/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E6%95%88%E6%88%90%E9%95%BF%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Sun, 12 May 2019 13:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>从去年的互联网寒冬开始，移动开发甚至前后端的招聘需求越来越少，公司对开发者的技术要求也越来越高。特别是对于我们Android开发来说，似乎我们的生存空间越来越小，处境也变得越来越困难。所以，在这个时代，我们必须找到适合自己的一条“黄金路”。其实，对于Android来说，它其实有很多个细分领域，比如音视频、iot、图像处理、安全攻防、移动AI、性能优化等，职业生涯的前几年，我们只要选中其中的某一个领域，把它研究到极致，就可以拥有真正的核心竞争力，而对于像前后端、Flutter等跨领域的知识我们只要有一定程度的了解即可。这其实就是很多大厂一直青睐的T型人才。下面，我就性能优化这一细分领域来分析一下如何把它做到极致。</p><p>性能优化其实一块很深很深的知识领域，对于Android来说，它从最上层的应用层，顺延着Framework层、ART/Davilk、Linux内核层，一直到最底层的硬件层，都有我们需要深入研究的技术点。因此，根据这一思路，我根据我自身的情况，定制了一套自下而上的学习路线。下面，我就来说一下详细的学习方案。</p><p>对于学习资源来说，最重要的就是高质量和成体系的知识。因此，在学习的时候，我们必须以经典的高质量书籍为主，其他优秀的文章、视频教程为辅。</p><h3 id="一、成长路线规划"><a href="#一、成长路线规划" class="headerlink" title="一、成长路线规划"></a>一、成长路线规划</h3><p>首先是数学和算法，要想成为世界上最顶尖的程序员，这两门功课必须要打好基础。</p><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><ul><li>数学之美</li><li>程序员的数学基础课（极客时间）</li></ul><h4 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h4><ul><li>大话数据结构</li><li>算法图解</li><li>剑指Offer</li><li>数据结构与算法之美（极客时间）</li><li>算法面试通关（极客时间）</li><li>LetteCode</li><li>编程之美</li><li>编程珠玑</li><li>趣学算法</li><li>算法（红本）</li></ul><h4 id="硬件原理"><a href="#硬件原理" class="headerlink" title="硬件原理"></a>硬件原理</h4><ul><li>深入浅出计算机组成原理（极客时间）</li></ul><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li>计算机网络：自顶向下方法</li><li>趣谈网络协议（极客时间）</li><li>图解TCP/IP</li><li>HTTP权威指南</li><li>Wireshark网络分析就这么简单</li><li>Wireshark网络分析的艺术</li><li>Web性能权威指南</li><li>Unix网络编程：卷1</li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li>现代操作系统</li><li>鸟哥的Linux私房菜</li><li>深入理解计算机系统</li><li>Linux程序设计</li><li>UNIX环境高级编程</li><li>深入Linux内核架构</li><li>性能之巅</li><li>最强Android书</li><li>Linux性能优化实战</li></ul><h4 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h4><ul><li>编码</li><li>编译原理</li></ul><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><ul><li>Java核心技术 卷1</li><li>Java编程思想</li><li>Java并发编程实战（极客时间）</li><li>Java并发编程的艺术</li><li>Java核心技术36讲（极客时间）</li><li>深入理解JVM</li><li>深入拆解JVM（极客时间）</li><li>揭秘JVM</li><li>程序员的自我修养—链接、装载与库</li><li>垃圾回收算法手册</li><li>深入理解Android JVM ART</li><li>深入解析Android 虚拟机</li></ul><h4 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h4><ul><li>HeadFirst设计模式</li><li>Android源码设计模式</li><li>Android进阶解密</li><li>Android框架解密</li><li>深入理解Android内核设计思想</li><li>Android系统源代码情景分析</li></ul><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><ul><li>More Effective C++</li><li>Effective Java</li><li>Kotlin实战、快速上手Kotlin开发（极客时间）</li></ul><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ul><li>第一行代码</li><li>Android开发进阶 从小工到专家</li><li>Android进阶之光</li><li>Android开发艺术探索</li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li>Android开发高手课（极客时间）</li><li>Android应用性能优化最佳实践</li></ul><h4 id="组件化、热修复、插件化"><a href="#组件化、热修复、插件化" class="headerlink" title="组件化、热修复、插件化"></a>组件化、热修复、插件化</h4><ul><li>Android组件化架构</li><li>Android热修复技术原理</li><li>Android插件化开发指南</li></ul><h3 id="二、如何读书？"><a href="#二、如何读书？" class="headerlink" title="二、如何读书？"></a>二、如何读书？</h3><p>首先，我们需要定一个学习计划，比如一年读50本书，一周一本。读书的时候可以<strong>根据同一个技能点按照难度选取3到5本书阅读，其中最好的书读3遍</strong>。对于碎片化的时间，我们也可以充分利用起来对某一个知识点进行系统学习，以求真正地将其完全掌握。最后，这里再重申一遍，<strong>要想真正掌握一本书的核心内容，需要读三遍。第一遍：细读，目的在于完整阅读全书，并且划出重点，写上读书笔记；一个月后读第二遍：扫读，主要快速翻阅第一遍阅读时做的笔记和划的重点，目的在于加深记忆；半年后第三遍：忆读，读的时候只看目录，然后去回想内容，如果回想不起来，再去进行扫读。这样三遍下来，基本上一本书的核心内容就能够很好的吸收</strong>。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>当你对某一个细分领域有非常深入的理解后，比如性能优化，音视频等，其实，此时许多底层知识都已经打通了。假如，你现在再去学习前端、Vue/React或者后端、其它领域的知识，都能够在较短时间内快速领悟到中高级层面的知识。我想，这就是一通百通的能力吧。</p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/12/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E6%95%88%E6%88%90%E9%95%BF%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之Launcher进程启动</title>
      <link>http://yoursite.com/2019/03/09/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BLauncher%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/03/09/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BLauncher%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sat, 09 Mar 2019 07:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>前面几篇文章我们已经详细分析了Android系统启动流程的init进程、Zygote进程和SystemServer进程。本篇，我们来分析一下Launcher的启动过程。</p><p>Android系统启动的最后一步就是启动了一个Launcher应用程序来显示系统中已经安装的应用程序。<strong>Launcher在启动的过程中会请求请求PMS返回系统中已安装的应用程序的信息，并将这些信息封装成一个快捷图标列表显示在系统屏幕上，从而使得用户可以点击这些快捷图片来启动相应的应用程序。</strong></p><p>Launcher作为Android系统的桌面，它的作用有两点：</p><ul><li>1、作为Android系统的启动器，用于启动应用程序。</li><li>2、作为Android系统的桌面，用于显示和管理应用程序的快捷图标或者其它桌面组件。</li></ul><p>下面，我们从以下两个方面来分析Launcher的启动过程：</p><ul><li>1、Launcher启动流程</li><li>2、Launcher中应用图标的显示过程</li></ul><h3 id="一、Launcher启动过程分析"><a href="#一、Launcher启动过程分析" class="headerlink" title="一、Launcher启动过程分析"></a>一、Launcher启动过程分析</h3><p>SystemServer进程在启动的过程中会启动PMS，PMS启动后会将系统中的应用程序安装完成，先前已经启动的AMS会将Launcher启动起来。在SystemServer的startOtherServices()方法中，调用了AMS的systemReady()方法，此即为Launcher的入口，如下所示：</p><pre><code>private void startOtherServices() {    ...    mActivityManagerService.systemReady(() -&gt; {        Slog.i(TAG, &quot;Making services ready&quot;);        traceBeginAndSlog(&quot;StartActivityManagerReadyPhase&quot;);        mSystemServiceManager.startBootPhase(                SystemService.PHASE_ACTIVITY_MANAGER_READY);        ...        }    ...}</code></pre><p>在Android 8.0及以上的部分源码中，都引入了Java Lambda表达式，可见其重要性的上升。下面继续分析AMS的systemReady()方法：</p><pre><code>public void systemReady(final Runnable goingCallback, TimingsTraceLog traceLog) {    ...    synchronized (this) {        ...        mStackSupervisor.resumeFocusedStackTopActivityLocked();        mUserController.sendUserSwitchBroadcasts(-1, currentUserId);        ...    }}</code></pre><p>在systemReady()方法中继续调用了ActivityStackSupervisor的resumeFocusedStackTopActivityLocked()方法，如下所示：</p><pre><code>boolean resumeFocusedStackTopActivityLocked() {    return resumeFocusedStackTopActivityLocked(null, null, null);}boolean resumeFocusedStackTopActivityLocked(        ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions) {    ...    if (targetStack != null &amp;&amp; isFocusedStack(targetStack)) {        // 1        return targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);    }    ...    return false;}</code></pre><p>最终，调用了注释1处ActivityStack（描述Acitivity堆栈）的resumeTopActivityUncheckedLocked()方法，如下所示：</p><pre><code>@GuardedBy(&quot;mService&quot;)boolean resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions options) {    if (mStackSupervisor.inResumeTopActivity) {        // Don&apos;t even start recursing.        return false;    }    boolean result = false;    try {        // Protect against recursion.        mStackSupervisor.inResumeTopActivity = true;        // 1        result = resumeTopActivityInnerLocked(prev, options);        // When resuming the top activity, it may be necessary to pause the top activity (for        // example, returning to the lock screen. We suppress the normal pause logic in        // {@link #resumeTopActivityUncheckedLocked}, since the top activity is resumed at the        // end. We call the {@link ActivityStackSupervisor#checkReadyForSleepLocked} again here        // to ensure any necessary pause logic occurs. In the case where the Activity will be        // shown regardless of the lock screen, the call to        // {@link ActivityStackSupervisor#checkReadyForSleepLocked} is skipped.        final ActivityRecord next = topRunningActivityLocked(true /* focusableOnly */);        if (next == null || !next.canTurnScreenOn()) {            checkReadyForSleep();        }    } finally {        mStackSupervisor.inResumeTopActivity = false;    }     return result;}</code></pre><p>在注释1处调用了resumeTopActivityInnerLocked()方法，如下所示：</p><pre><code>@GuardedBy(&quot;mService&quot;)private boolean resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions options) {    ...     if (!hasRunningActivity) {        // There are no activities left in the stack, let&apos;s look somewhere else.        return resumeTopActivityInNextFocusableStack(prev, options, &quot;noMoreActivities&quot;);    }    ...}</code></pre><p>resumeTopActivityInnerLocked()方法非常长，大概有好几百行代码，但是对于主要流程来说最关键的就是在其中调用了resumeTopActivityInNextFocusableStack()方法，如下所示：</p><pre><code>private boolean resumeTopActivityInNextFocusableStack(ActivityRecord prev,        ActivityOptions options, String reason) {    if (adjustFocusToNextFocusableStack(reason)) {        // Try to move focus to the next visible stack with a running activity if this        // stack is not covering the entire screen or is on a secondary display (with no home        // stack).        return mStackSupervisor.resumeFocusedStackTopActivityLocked(                mStackSupervisor.getFocusedStack(), prev, null);    }    // Let&apos;s just start up the Launcher...    ActivityOptions.abort(options);    if (DEBUG_STATES) Slog.d(TAG_STATES,            &quot;resumeTopActivityInNextFocusableStack: &quot; + reason + &quot;, go home&quot;);    if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();    // Only resume home if on home display    // 1    return isOnHomeDisplay() &amp;&amp;            mStackSupervisor.resumeHomeStackTask(prev, reason);}</code></pre><p>在注释1处，调用了ActivityStackSupervisor的resumeHomeStackTask()方法，如下所示：</p><pre><code>boolean resumeHomeStackTask(ActivityRecord prev, String reason) {    ...    // Only resume home activity if isn&apos;t finishing.    if (r != null &amp;&amp; !r.finishing) {        moveFocusableActivityStackToFrontLocked(r, myReason);        return resumeFocusedStackTopActivityLocked(mHomeStack, prev, null);    }    // 1    return mService.startHomeActivityLocked(mCurrentUser, myReason);}</code></pre><p>注释1处，调用了AMS的startHomeActivityLocked()方法，如下所示：</p><pre><code>boolean startHomeActivityLocked(int userId, String reason) {    // 1    if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL            &amp;&amp; mTopAction == null) {        // We are running in factory test mode, but unable to find        // the factory test app, so just sit around displaying the        // error message and don&apos;t try to start anything.        return false;    }    // 2    Intent intent = getHomeIntent();    ActivityInfo aInfo = resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);    if (aInfo != null) {        intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));        // Don&apos;t do this if the home app is currently being        // instrumented.        aInfo = new ActivityInfo(aInfo);        aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);        ProcessRecord app = getProcessRecordLocked(aInfo.processName,                aInfo.applicationInfo.uid, true);        // 3        if (app == null || app.instr == null) {            intent.setFlags(intent.getFlags() | FLAG_ACTIVITY_NEW_TASK);            final int resolvedUserId = UserHandle.getUserId(aInfo.applicationInfo.uid);            // For ANR debugging to verify if the user activity is the one that actually            // launched.            final String myReason = reason + &quot;:&quot; + userId + &quot;:&quot; + resolvedUserId;            // 4            mActivityStartController.startHomeActivity(intent, aInfo, myReason);        }    } else {        Slog.wtf(TAG, &quot;No home screen found for &quot; + intent, new Throwable());    }    return true;}</code></pre><p>首先，会在注释1处判断工厂模式和mTopAction的值，这里的工厂模式mFactoryTest代表的了系统的运行模式，它分为三种：</p><ul><li>1、非工厂模式</li><li>2、低级工厂模式</li><li>3、高级工厂模式</li></ul><p>而mTopAction是来描述第一个被启动Activity组件的Action，默认值为Intent.ACTION_MAIN。所以，此时可知当mFactoryTest为低级工厂模式并且mTopAction为空时，则返回false。接着，在注释2处，调用了getHomeintent()方法，如下所示：</p><pre><code>Intent getHomeIntent() {    // 1    Intent intent = new Intent(mTopAction, mTopData != null ? Uri.parse(mTopData) : null);    intent.setComponent(mTopComponent);    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);    if (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) {        // 2        intent.addCategory(Intent.CATEGORY_HOME);    }    return intent;}</code></pre><p>在getHomeIntent()方法的注释1处，根据mTopAction和mTopData创建了Intent。注释2处，会判断如果系统运行模式不是低级工厂模式，则会将Category设置为Intent.CATEGORY_HOME，最后返回该Intent。</p><p>我们再回到AMS的startHomeActivityLocked()方法的注释3处，这里会判断符合上述Intent的应用程序是否已经启动，如果没有启动，则会在注释4处调用ActivityStartController的startHomeActivity()方法启动该应用程序，即Launcher。下面我们继续看看startHomeActivity()方法，如下所示：</p><pre><code>void startHomeActivity(Intent intent, ActivityInfo aInfo, String reason) {    // 1    mSupervisor.moveHomeStackTaskToTop(reason);    // 2    mLastHomeActivityStartResult = obtainStarter(intent, &quot;startHomeActivity: &quot; + reason)            .setOutActivity(tmpOutRecord)            .setCallingUid(0)            .setActivityInfo(aInfo)            .execute();    mLastHomeActivityStartRecord = tmpOutRecord[0];    if (mSupervisor.inResumeTopActivity) {        // If we are in resume section already, home activity will be initialized, but not        // resumed (to avoid recursive resume) and will stay that way until something pokes it        // again. We need to schedule another resume.        mSupervisor.scheduleResumeTopActivities();    }}</code></pre><p>注释1处，会将Launcher放入HomeStack中，它是ActivityStackSupervisor中用于存储Launcher的变量。然后，在注释2处调用了obtainStarter()方法，如下所示：</p><pre><code>** * @return A starter to configure and execute starting an activity. It is valid until after *         {@link ActivityStarter#execute} is invoked. At that point, the starter should be *         considered invalid and no longer modified or used. */ActivityStarter obtainStarter(Intent intent, String reason) {    return mFactory.obtain().setIntent(intent).setReason(reason);}</code></pre><p>可知这里最终会返回一个配置好指定intent和reason和ActivityStarter，当它调用execute()方法时，则会启动Launcher，如下所示：</p><pre><code>int execute() {    try {        // TODO(b/64750076): Look into passing request directly to these methods to allow        // for transactional diffs and preprocessing.        if (mRequest.mayWait) {            return startActivityMayWait(mRequest.caller, mRequest.callingUid,                    mRequest.callingPackage, mRequest.intent, mRequest.resolvedType,                    mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,                    mRequest.resultWho, mRequest.requestCode, mRequest.startFlags,                    mRequest.profilerInfo, mRequest.waitResult, mRequest.globalConfig,                    mRequest.activityOptions, mRequest.ignoreTargetSecurity, mRequest.userId,                    mRequest.inTask, mRequest.reason,                    mRequest.allowPendingRemoteAnimationRegistryLookup);        } else {            return startActivity(mRequest.caller, mRequest.intent, mRequest.ephemeralIntent,                    mRequest.resolvedType, mRequest.activityInfo, mRequest.resolveInfo,                    mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,                    mRequest.resultWho, mRequest.requestCode, mRequest.callingPid,                    mRequest.callingUid, mRequest.callingPackage, mRequest.realCallingPid,                    mRequest.realCallingUid, mRequest.startFlags, mRequest.activityOptions,                    mRequest.ignoreTargetSecurity, mRequest.componentSpecified,                    mRequest.outActivity, mRequest.inTask, mRequest.reason,                    mRequest.allowPendingRemoteAnimationRegistryLookup);        }    } finally {        onExecutionComplete();    }}</code></pre><p>可以看到，这里调用了startActivity()方法来启动Launcher，最终会进入Launcher的onCreate()方法，Launcher启动完成。</p><h3 id="二、Launcher中应用图标的显示过程"><a href="#二、Launcher中应用图标的显示过程" class="headerlink" title="二、Launcher中应用图标的显示过程"></a>二、Launcher中应用图标的显示过程</h3><p>应用程序图标是进入应用程序的入口，接下来我们了解一下Launcher是如何显示应用程序图标的。首先从Launcher的onCreate()方法开始，如下所示：</p><pre><code>@Overrideprotected void onCreate(Bundle savedInstanceState) {    ...    // 1    LauncherAppState app = LauncherAppState.getInstance(this);    mOldConfig = new Configuration(getResources().getConfiguration());    // 2    mModel = app.setLauncher(this);    initDeviceProfile(app.getInvariantDeviceProfile());    ...    // We only load the page synchronously if the user rotates (or triggers a    // configuration change) while launcher is in the foreground    int currentScreen = PagedView.INVALID_RESTORE_PAGE;    if (savedInstanceState != null) {        currentScreen = savedInstanceState.getInt(RUNTIME_STATE_CURRENT_SCREEN, currentScreen);    }    // 3    if (!mModel.startLoader(currentScreen)) {        if (!internalStateHandled) {            // If we are not binding synchronously, show a fade in animation when            // the first page bind completes.            mDragLayer.getAlphaProperty(ALPHA_INDEX_LAUNCHER_LOAD).setValue(0);        }    } else {        // Pages bound synchronously.        mWorkspace.setCurrentPage(currentScreen);        setWorkspaceLoading(true);    }}</code></pre><p>首先，在注释1处得到LauncherAppState的实例，在注释2处，调用了它的setLauncher()方法将Launcher对象传进去，setLauncher()方法如下所示：</p><pre><code> LauncherModel setLauncher(Launcher launcher) {    getLocalProvider(mContext).setLauncherProviderChangeListener(launcher);    mModel.initialize(launcher);    return mModel;}</code></pre><p>在setLauncher()方法里面继续调用了LauncherModel的initialize()方法，如下所示：</p><pre><code>/*** Set this as the current Launcher activity object for the loader.*/public void initialize(Callbacks callbacks) {    synchronized (mLock) {        Preconditions.assertUIThread();        mCallbacks = new WeakReference&lt;&gt;(callbacks);    }}</code></pre><p>从此处我们可以得知Launcher被封装成了一个弱引用对象mCallbacks。我们再回到Launcher的onCreate()方法的注释3处的LauncherModel的startLoader()方法，如下所示：</p><pre><code>// 1@Thunk static final HandlerThread sWorkerThread = new HandlerThread(&quot;launcher-loader&quot;);static {    sWorkerThread.start();}// 2@Thunk static final Handler sWorker = new Handler(sWorkerThread.getLooper());public boolean startLoader(int synchronousBindPage) {    // Enable queue before starting loader. It will get disabled in Launcher#finishBindingItems    InstallShortcutReceiver.enableInstallQueue(InstallShortcutReceiver.FLAG_LOADER_RUNNING);    synchronized (mLock) {        // Don&apos;t bother to start the thread if we know it&apos;s not going to do anything        if (mCallbacks != null &amp;&amp; mCallbacks.get() != null) {            final Callbacks oldCallbacks = mCallbacks.get();            // Clear any pending bind-runnables from the synchronized load process.            mUiExecutor.execute(oldCallbacks::clearPendingBinds);            // If there is already one running, tell it to stop.            stopLoader();            // 3            LoaderResults loaderResults = new LoaderResults(mApp, sBgDataModel,                    mBgAllAppsList, synchronousBindPage, mCallbacks);            if (mModelLoaded &amp;&amp; !mIsLoaderTaskRunning) {                // Divide the set of loaded items into those that we are binding synchronously,                // and everything else that is to be bound normally (asynchronously).                loaderResults.bindWorkspace();                // For now, continue posting the binding of AllApps as there are other                // issues that arise from that.                loaderResults.bindAllApps();                loaderResults.bindDeepShortcuts();                loaderResults.bindWidgets();                return true;            } else {                // 4                startLoaderForResults(loaderResults);            }        }    }    return false;}</code></pre><p>在注释1处，新建了具有消息循环的线程HandlerThread对象。注释2处，新建了Handler，并传入了HandlerThread的Looper，此处Handler就是用于向HandlerThread发送消息。接着，在注释3处，创建了LoaderResults，在注释4处，调用了startLoaderForResults()方法并将LoaderResults传入，如下所示：</p><pre><code>public void startLoaderForResults(LoaderResults results) {    synchronized (mLock) {        stopLoader();        mLoaderTask = new LoaderTask(mApp, mBgAllAppsList, sBgDataModel, results);        runOnWorkerThread(mLoaderTask);    }}</code></pre><p>在startLoaderForResults()方法中，调用了runOnWorkerThread()，如下所示：</p><pre><code>/** Runs the specified runnable immediately if called from the worker thread, otherwise it is * posted on the worker thread handler. */private static void runOnWorkerThread(Runnable r) {    // 1    if (sWorkerThread.getThreadId() == Process.myTid()) {        // 2        r.run();    } else {        // If we are not on the worker thread, then post to the worker handler        // 3        sWorker.post(r);    }}</code></pre><p>首先，注释1处会先判断当前的执行线程是否是工作线程，如果是则直接调用注释2处Runnable的run()方法，否则，调用sWorker这个Handler对象的post()方法将LoaderTask作为消息发送给HandlerThread。接下来，我们看看LoaderTask，它实现了Runnable接口，当其所描述的消息被处理时，则会调用它的run()方法，如下所示：</p><pre><code>/*** Runnable for the thread that loads the contents of the launcher:*   - workspace icons*   - widgets*   - all apps icons*   - deep shortcuts within apps*/public class LoaderTask implements Runnable {    ...     synchronized (this) {        // Skip fast if we are already stopped.        if (mStopped) {            return;        }    }    TraceHelper.beginSection(TAG);    try (LauncherModel.LoaderTransaction transaction = mApp.getModel().beginLoader(this)) {        TraceHelper.partitionSection(TAG, &quot;step 1.1: loading workspace&quot;);        // 1        loadWorkspace();        verifyNotStopped();        TraceHelper.partitionSection(TAG, &quot;step 1.2: bind workspace workspace&quot;);        // 2        mResults.bindWorkspace();        // Notify the installer packages of packages with active installs on the first screen.        TraceHelper.partitionSection(TAG, &quot;step 1.3: send first screen broadcast&quot;);        sendFirstScreenActiveInstallsBroadcast();        // Take a break        TraceHelper.partitionSection(TAG, &quot;step 1 completed, wait for idle&quot;);        waitForIdle();        verifyNotStopped();        // second step        TraceHelper.partitionSection(TAG, &quot;step 2.1: loading all apps&quot;);        // 3        loadAllApps();        TraceHelper.partitionSection(TAG, &quot;step 2.2: Binding all apps&quot;);        verifyNotStopped();        // 4        mResults.bindAllApps();        ...     } catch (CancellationException e) {        // Loader stopped, ignore        TraceHelper.partitionSection(TAG, &quot;Cancelled&quot;);    }    TraceHelper.endSection(TAG);}</code></pre><p><strong>Launcher是用工作区的形式来显示系统安装的应用程序快捷图标的，每一个工作区都是用来描述一个抽象桌面的，它由n个屏幕组成，每个屏幕又分为n个单元格，每个单元格用来显示一个应用程序的快捷图标。</strong></p><p>首先，在注释1、2处调用了loadWorkSpace()和LoaderResults的bindWorkspace()方法来加载和绑定工作区信息。注释3处调用了loadAllApps()和LoaderResults的bindAllApps()方法来加载系统已经安装的应用程序信息，bindAllApps()方法如下所示：</p><pre><code>public void bindAllApps() {    // shallow copy    @SuppressWarnings(&quot;unchecked&quot;)    final ArrayList&lt;AppInfo&gt; list = (ArrayList&lt;AppInfo&gt;) mBgAllAppsList.data.clone();    Runnable r = new Runnable() {        public void run() {            // 1            Callbacks callbacks = mCallbacks.get();            if (callbacks != null) {                // 2                callbacks.bindAllApplications(list);            }        }    };    // 3    mUiExecutor.execute(r);}</code></pre><p>首先，在注释1处会从mCallbacks这个Launcher的弱引用对象中取出Launcher对象，并在注释2处调用了它的bindAllApplication()来绑定所有的应用程序信息，最后在注释3处使用mUiExecutor这个MainThreadExecutor执行器对象去执行这个创建好的Runnable对象。接下来，我们看看Launcher的bindAllApplications()方法，如下所示：</p><pre><code>// Main container view for the all apps screen.@Thunk AllAppsContainerView mAppsView;/*** Add the icons for all apps.** Implementation of the method from LauncherModel.Callbacks.*/public void bindAllApplications(ArrayList&lt;AppInfo&gt; apps) {    // 1    mAppsView.getAppsStore().setApps(apps);    if (mLauncherCallbacks != null) {        mLauncherCallbacks.bindAllApplications(apps);    }}</code></pre><p>在注释1处，调用了AllAppsContainerView的getAppsStore()方法得到了一个AllAppsStore对象，AllAppsContainerView是所有App屏幕的主容器视图，AllAppsStore是一个负责维护所有app信息集合的通用工具类。下面，我们看看AllAppsStore对象的setApps()方法：</p><pre><code>/** * Sets the current set of apps. */public void setApps(List&lt;AppInfo&gt; apps) {    mComponentToAppMap.clear();    addOrUpdateApps(apps);}</code></pre><p>这里继续调用了addOrUpdateApps()方法：</p><pre><code> private final HashMap&lt;ComponentKey, AppInfo&gt; mComponentToAppMap = new HashMap&lt;&gt;();/*** Adds or updates existing apps in the list*/public void addOrUpdateApps(List&lt;AppInfo&gt; apps) {    for (AppInfo app : apps) {        mComponentToAppMap.put(app.toComponentKey(), app);    }    notifyUpdate();}</code></pre><p>可以看到，最终将所有app信息保存在了AllAppsStore的HashMap容器中。</p><p>当AllAppsContainerView加载完XML布局时，会调用自身的onFinishInflate()方法，如下所示：</p><pre><code>@Overrideprotected void onFinishInflate() {    super.onFinishInflate();    // This is a focus listener that proxies focus from a view into the list view.  This is to    // work around the search box from getting first focus and showing the cursor.    setOnFocusChangeListener((v, hasFocus) -&gt; {        if (hasFocus &amp;&amp; getActiveRecyclerView() != null) {            getActiveRecyclerView().requestFocus();        }    });    mHeader = findViewById(R.id.all_apps_header);    // 1    rebindAdapters(mUsingTabs, true /* force */);    mSearchContainer = findViewById(R.id.search_container_all_apps);    mSearchUiManager = (SearchUiManager) mSearchContainer;    mSearchUiManager.initialize(this);}</code></pre><p>在注释1处，进行了适配器数据的绑定，我们继续查看rebindAdapters()方法：</p><pre><code>private void rebindAdapters(boolean showTabs) {    rebindAdapters(showTabs, false /* force */);}private void rebindAdapters(boolean showTabs, boolean force) {    ...    if (mUsingTabs) {        // 1        mAH[AdapterHolder.MAIN].setup(mViewPager.getChildAt(0), mPersonalMatcher);        mAH[AdapterHolder.WORK].setup(mViewPager.getChildAt(1), mWorkMatcher);        onTabChanged(mViewPager.getNextPage());    } else {        // 2        mAH[AdapterHolder.MAIN].setup(findViewById(R.id.apps_list_view), null);        mAH[AdapterHolder.WORK].recyclerView = null;    }    setupHeader();    ...}</code></pre><p>可以看到，不管是否正在使用标签，最终都会调用到AdapterHolder的setup()方法，它时AllAppsContainerView的内部类，如下所示：</p><pre><code>void setup(@NonNull View rv, @Nullable ItemInfoMatcher matcher) {        appsList.updateItemFilter(matcher);        recyclerView = (AllAppsRecyclerView) rv;        recyclerView.setEdgeEffectFactory(createEdgeEffectFactory());        // 1        recyclerView.setApps(appsList, mUsingTabs);        recyclerView.setLayoutManager(layoutManager);        // 2        recyclerView.setAdapter(adapter);        recyclerView.setHasFixedSize(true);        // No animations will occur when changes occur to the items in this RecyclerView.        recyclerView.setItemAnimator(null);        FocusedItemDecorator focusedItemDecorator = new FocusedItemDecorator(recyclerView);        recyclerView.addItemDecoration(focusedItemDecorator);        adapter.setIconFocusListener(focusedItemDecorator.getFocusListener());        applyVerticalFadingEdgeEnabled(verticalFadingEdge);        applyPadding();    }</code></pre><p>注释1处，会将app信息列表appsList设置给AllAppsRecyclerView对象，在注释2处，为其设置了Adapter。最终，应用程序快捷图标列表就会显示到屏幕上了。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>到此，我们终于将Android系统启动流程这一主题分析完毕，结合前面的几篇内容，可以得出核心流程如下：</p><ul><li>1、<strong>启动电源以及系统启动</strong>：当电源按下时引导芯片从预定义的订房（固化在ROM）开始执行，加载引导程序BootLoader到RAM，然后执行。</li><li>2、<strong>引导程序BootLoader</strong>：BootLoader是在Android系统开始运行前的一个小程序，主要用于把系统OS拉起来并运行。。</li><li>3、<strong>Linux内核启动</strong>：当内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当其完成系统设置时，会先在系统文件中寻找init.rc文件，并启动init进行。</li><li>4、<strong>init进程启动</strong>：初始化和启动属性服务，并且启动Zygote进程。</li><li>5、<strong>Zygote进程启动</strong>：创建JVM并为其注册JNI方法，创建服务器端Socket，启动SystemServer进程。</li><li>6、<strong>SystemServer进程启动</strong>：启动Binder线程池和SystemServiceManager，并且启动各种系统服务。</li><li>7、<strong>Launcher启动</strong>：被SystemServer进程启动的AMS会启动Launcher，Launcher启动后会将已安装应用的快捷图标显示到系统桌面上。</li></ul><p>下一系列，笔者将会给大家带来Android中的跨进程通信Binder的详细讲解，尽请期待~</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/03/09/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BLauncher%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之SystemServer进程启动</title>
      <link>http://yoursite.com/2019/03/03/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E4%B9%8BSystemServer%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/03/03/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E4%B9%8BSystemServer%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sun, 03 Mar 2019 14:32:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>在上一篇中，笔者已经分析过Android系统启动流程中的init进程启动部分。Android系统中各个进程的先后顺序为：</p><p>init进程 –-&gt; Zygote进程 –&gt; SystemServer进程 –&gt;应用进程</p><p>其中Zygote进程由init进程启动，SystemServer进程和应用进程由Zygote进程启动。在这一篇中，我将继续分析Android系统启动流程中的SystemServer进程启动部分。</p><p>SystemServer进程主要是用于创建系统服务的，例如AMS、WMS、PMS。这篇文章将从以下两个部分来对SystemServer进行分析：</p><ul><li>Zygote处理SystemServer进程</li><li>SystemServer进程解析</li></ul><h3 id="一、Zygote处理SystemServer进程"><a href="#一、Zygote处理SystemServer进程" class="headerlink" title="一、Zygote处理SystemServer进程"></a>一、Zygote处理SystemServer进程</h3><p>由前文可知，在ZygoteInit的forkSystemServer()方法中启动了SystemServer进程，如下所示：</p><pre><code>private static Runnable forkSystemServer(String abiList, String socketName,        ZygoteServer zygoteServer) {    ...    try {        parsedArgs = new ZygoteConnection.Arguments(args);        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);        boolean profileSystemServer = SystemProperties.getBoolean(                &quot;dalvik.vm.profilesystemserver&quot;, false);        if (profileSystemServer) {            parsedArgs.runtimeFlags |= Zygote.PROFILE_SYSTEM_SERVER;        }        /* Request to fork the system server process */        // 1        pid = Zygote.forkSystemServer(                parsedArgs.uid, parsedArgs.gid,                parsedArgs.gids,                parsedArgs.runtimeFlags,                null,                parsedArgs.permittedCapabilities,                parsedArgs.effectiveCapabilities);    } catch (IllegalArgumentException ex) {        throw new RuntimeException(ex);    }    /* For child process */    // 2    if (pid == 0) {        if (hasSecondZygote(abiList)) {            waitForSecondaryZygote(socketName);        }        // 3        zygoteServer.closeServerSocket();        // 4        return handleSystemServerProcess(parsedArgs);    }    return null;}</code></pre><p>在注释1处，调用了Zygote的forkSystemServer()方法创建了SystemServer进程，并返回了当前进程的pid。在注释2处，如果pid==0则说明Zygote进程创建SystemServer进程成功，当前运行在SystemServer进程中。接着，在注释3处，由于SystemServer进程fork了Zygote进程的地址空间，所以会得到Zygote进程创建的Socket，这个Socket对于SystemServer进程是无用的，因此，在此处关闭了该Socket。最后，在注释4处，调用了handleSystemServerprocess()方法来启动SystemServer进程。handleSystemServerProcess()方法如下所示：</p><pre><code>/** * Finish remaining work for the newly forked system server process. */private static Runnable handleSystemServerProcess(ZygoteConnection.Arguments parsedArgs) {    ...    if (parsedArgs.invokeWith != null) {        ...    } else {        ClassLoader cl = null;        if (systemServerClasspath != null) {            // 1            cl = createPathClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);            Thread.currentThread().setContextClassLoader(cl);        }        /*         * Pass the remaining arguments to SystemServer.         */        // 2        return ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);    }}</code></pre><p>在注释1处，使用了systemServerClassPath和targetSdkVersion创建了一个PathClassLoader。接着，在注释2处，执行了ZygoteInit的zygoteInit()方法，该方法如下所示：</p><pre><code>public static final Runnable zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader) {    if (RuntimeInit.DEBUG) {        Slog.d(RuntimeInit.TAG, &quot;RuntimeInit: Starting application from zygote&quot;);    }    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ZygoteInit&quot;);    RuntimeInit.redirectLogStreams();    RuntimeInit.commonInit();    // 1    ZygoteInit.nativeZygoteInit();    // 2    return RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);}</code></pre><p>在zygoteInit()方法中，首先在注释1处执行了nativeZygoteInit()方法，这里看到方法前缀为native可知是一个本地函数，因此，我们先了解它对应的JNI文件，在AndroidRuntime.cpp类中可以查看到nativeZygoteInit()方法对应的native函数，如下所示：</p><pre><code>/** JNI registration.*/int register_com_android_internal_os_ZygoteInit_nativeZygoteInit(JNIEnv* env){    const JNINativeMethod methods[] = {        { &quot;nativeZygoteInit&quot;, &quot;()V&quot;,            (void*) com_android_internal_os_ZygoteInit_nativeZygoteInit },    };    return jniRegisterNativeMethods(env, &quot;com/android/internal/os/ZygoteInit&quot;,        methods, NELEM(methods));}</code></pre><p>这里使用了JNI动态注册的方式，将nativeZygoteInit()方法和native函数com_android_internal_os_ZygoteInit_nativeZygoteInit()建立了映射关系，我们看到这个native方法的代码：</p><pre><code>static AndroidRuntime* gCurRuntime = NULL;static void com_android_internal_os_ZygoteInit_nativeZygoteInit(JNIEnv* env, jobject clazz){    gCurRuntime-&gt;onZygoteInit();}</code></pre><p>可以看到，gCurRuntime是AndroidRuntime类型的指针，具体指向的是其子类AppRuntime，它在app_main.cpp中定义，代码如下所示：</p><pre><code>class AppRuntime : public AndroidRuntime{    ...    virtual void onZygoteInit()    {        // 1        sp&lt;ProcessState&gt; proc = ProcessState::self();        ALOGV(&quot;App process: starting thread pool.\n&quot;);        // 2        proc-&gt;startThreadPool();    }    ...}</code></pre><p>在注释1处，创建了一个ProcessState实例， 在Android中ProcessState是客户端和服务端公共的部分，作为Binder通信的基础，ProcessState是一个singleton类，每个<br>进程只有一个对象，这个对象负责打开Binder驱动，建立线程池，让其进程里面的所有线程都能通过Binder通信。在注释2处，调用了ProcessState实例的startThreadPool()函数启动了一个Binder线程池，其实里面最终会调用到IPCThreadState实例的joinThreadPool()函数进程Binder线程池相关的处理。现在，我们再回到zygoteInit()方法的注释2处，这里调用了RuntimeInit的applicationInit()方法，代码如下所示：</p><pre><code>protected static Runnable applicationInit(int targetSdkVersion, String[] argv,    ClassLoader classLoader) {    ...    // Remaining arguments are passed to the start class&apos;s static main    return findStaticMain(args.startClass, args.startArgs, classLoader);}</code></pre><p>在applicationInit()方法中最后调用了findStaticMain()方法：</p><pre><code>protected static Runnable findStaticMain(String className, String[] argv,        ClassLoader classLoader) {    Class&lt;?&gt; cl;    try {        // 1        cl = Class.forName(className, true, classLoader);    } catch (ClassNotFoundException ex) {        throw new RuntimeException(                &quot;Missing class when invoking static main &quot; + className,                ex);    }    Method m;    try {        // 2        m = cl.getMethod(&quot;main&quot;, new Class[] { String[].class });    } catch (NoSuchMethodException ex) {        throw new RuntimeException(                &quot;Missing static main on &quot; + className, ex);    } catch (SecurityException ex) {        throw new RuntimeException(                &quot;Problem getting static main on &quot; + className, ex);    }    int modifiers = m.getModifiers();    if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {        throw new RuntimeException(                &quot;Main method is not public and static on &quot; + className);    }    /*     * This throw gets caught in ZygoteInit.main(), which responds     * by invoking the exception&apos;s run() method. This arrangement     * clears up all the stack frames that were required in setting     * up the process.     */    // 3    return new MethodAndArgsCaller(m, argv);}</code></pre><p>首先，在注释1处，通过发射得到了SystemServer类。接着，在注释2处，找到了SystemServer中的main()方法。最后，在注释3处，会将main()方法传入MethodAndArgsCaller()方法中，这里的MethodAndArgsCaller()方法是一个Runnable实例，它最终会一直返回出去，直到在ZygoteInit的main()方法中被使用，如下所示：</p><pre><code>if (startSystemServer) {    Runnable r = forkSystemServer(abiList, socketName, zygoteServer);    // {@code r == null} in the parent (zygote) process, and {@code r != null} in the    // child (system_server) process.    if (r != null) {        r.run();        return;    }}</code></pre><p>可以看到，最终直接调用了这个Runnable实例的run()方法，代码如下所示：</p><pre><code>/** * Helper class which holds a method and arguments and can call them. This is used as part of * a trampoline to get rid of the initial process setup stack frames. */static class MethodAndArgsCaller implements Runnable {    /** method to call */    private final Method mMethod;    /** argument array */    private final String[] mArgs;    public MethodAndArgsCaller(Method method, String[] args) {        mMethod = method;        mArgs = args;    }    public void run() {        try {            // 1            mMethod.invoke(null, new Object[] { mArgs });        } catch (IllegalAccessException ex) {            throw new RuntimeException(ex);        } catch (InvocationTargetException ex) {            Throwable cause = ex.getCause();            if (cause instanceof RuntimeException) {                throw (RuntimeException) cause;            } else if (cause instanceof Error) {                throw (Error) cause;            }            throw new RuntimeException(ex);        }    }}</code></pre><p>在注释1处，这个mMethod就是指的SystemServer的main()方法，这里动态调用了SystemServer的main()方法，最终，SystemServer进程就进入了SystemServer的main()方法中了。这里还有个遗留问题，为什么不直接在findStaticMain()方法中直接动态调用SystemServer的main()方法呢？原因就是这种递归返回后再执行入口方法的方式会让SystemServer的main()方法看起来像是SystemServer的入口方法，而且，这样也会清除之前所有SystemServer相关设置过程中需要的堆栈帧。</p><h3 id="二、SystemServer进程解析"><a href="#二、SystemServer进程解析" class="headerlink" title="二、SystemServer进程解析"></a>二、SystemServer进程解析</h3><p>接下来我们看看SystemServer的main()方法：</p><pre><code>/*** The main entry point from zygote.*/public static void main(String[] args) {    new SystemServer().run();}</code></pre><p>main()方法中调用了SystemServer的run()方法，如下所示：</p><pre><code>private void run() {    try {        ...        // 1        Looper.prepareMainLooper();        ...        // Initialize native services.        // 2        System.loadLibrary(&quot;android_servers&quot;);        // Check whether we failed to shut down last time we tried.        // This call may not return.        performPendingShutdown();         // Initialize the system context.        createSystemContext();        // Create the system service manager.        // 3        mSystemServiceManager = new SystemServiceManager(mSystemContext);        mSystemServiceManager.setStartInfo(mRuntimeRestart,                mRuntimeStartElapsedTime, mRuntimeStartUptime);        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);        // Prepare the thread pool for init tasks that can be parallelized        SystemServerInitThreadPool.get();    } finally {        traceEnd();  // InitBeforeStartServices    }    // Start services.    try {        traceBeginAndSlog(&quot;StartServices&quot;);        // 4        startBootstrapServices();        // 5        startCoreServices();        // 6        startOtherServices();        SystemServerInitThreadPool.shutdown();    } catch (Throwable ex) {        Slog.e(&quot;System&quot;, &quot;******************************************&quot;);        Slog.e(&quot;System&quot;, &quot;************ Failure starting system services&quot;, ex);        throw ex;    } finally {        traceEnd();    }    ...    // Loop forever.    // 7    Looper.loop();    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);}</code></pre><p>在注释1处，创建了消息Looper。在注释2处，加载了动态库libandroid_servers.so。接着，在注释3处，创建了SystemServerManager，它的作用是对系统服务进行创建、启动和生命周期管理。在注释4处的startBootstarpServices()方法中使用SystemServiceManager启动了ActivityManagerService、PackageManagerService、PowerManagerService等引导服务。在注释5处的startCoreServices()方法中则启动了BatteryService、WebViewUpdateService、DropBoxManagerService、UsageStatsService4个核心服务。在注释6处的startOtherServices()方法中启动了WindowManagerService、InputManagerService、CameraService等其它服务。这些服务的父类都是SystemService。</p><p>可以看到，上面把系统服务分成了三种类型：引导服务、核心服务、其它服务。这些系统服务共有100多个，其中对于我们来说比较关键的有：</p><ul><li>引导服务：ActivityManagerService，负责四大组件的启动、切换、调度。</li><li>引导服务：PackageManagerService，负责对APK进行安装、解析、删除、卸载等操作。</li><li>引导服务：PowerManagerService，负责计算系统中与Power相关的计算，然后决定系统该如何反应。</li><li>核心服务：BatteryService，管理电池相关的服务。</li><li>其它服务：WindowManagerService，窗口管理服务。</li><li>其它服务：InputManagerService，管理输入事件。</li></ul><p>很多系统服务的启动逻辑都是类似的，这里我以启动ActivityManagerService服务来进行举例，代码如下所示：</p><pre><code>mActivityManagerService = mSystemServiceManager.startService(        ActivityManagerService.Lifecycle.class).getService();</code></pre><p>SystemServiceManager的startService()方法启动了ActivityManagerService，该启动方法如下所示：</p><pre><code>@SuppressWarnings(&quot;unchecked&quot;)public &lt;T extends SystemService&gt; T startService(Class&lt;T&gt; serviceClass) {    try {        final String name = serviceClass.getName();        ...        try {            Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);            // 1            service = constructor.newInstance(mContext);        } catch (InstantiationException ex) {        ...        // 2        startService(service);        return service;    } finally {        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);    }}</code></pre><p>在注释1处使用反射创建了ActivityManagerService实例，并在注释2处调用了另一个startService()重载方法，如下所示：</p><pre><code>public void startService(@NonNull final SystemService service) {    // Register it.    // 1    mServices.add(service);    // Start it.    long time = SystemClock.elapsedRealtime();    try {        // 2        service.onStart();    } catch (RuntimeException ex) {        throw new RuntimeException(&quot;Failed to start service &quot; + service.getClass().getName()                + &quot;: onStart threw an exception&quot;, ex);    }    warnIfTooLong(SystemClock.elapsedRealtime() - time, service, &quot;onStart&quot;);}</code></pre><p>在注释1处，首先会将ActivityManagerService添加在mServices中，它是一个存储SystemService类型的ArrayList，这样就完成了ActivityManagerService的注册。在注释2处，调用了ActivityManagerService的onStart()方法完成了启动ActivityManagerService服务。</p><p>除了使用SystemServiceManager的startService()方法来启动系统服务外，也可以直接调用服务的main()方法来启动系统服务，如PackageManagerService：</p><pre><code>mPackageManagerService = PackageManagerService.main(mSystemContext, installer,        mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</code></pre><p>这里直接调用了PackageManagerService的main()方法：</p><pre><code>public static PackageManagerService main(Context context, Installer installer,        boolean factoryTest, boolean onlyCore) {    // Self-check for initial settings.    PackageManagerServiceCompilerMapping.checkProperties();    // 1    PackageManagerService m = new PackageManagerService(context, installer,            factoryTest, onlyCore);    m.enableSystemUserPackages();    // 2    ServiceManager.addService(&quot;package&quot;, m);    // 3    final PackageManagerNative pmn = m.new PackageManagerNative();    ServiceManager.addService(&quot;package_native&quot;, pmn);    return m;}</code></pre><p>在注释1处，直接新建了一个PackageManagerService实例，并在注释2处将PackageManagerService注册到服务大管家ServiceManager中，ServiceManager用于管理系统中的各种Service，用于系统C/S架构中的Binder进程间通信，即如果Client端需要使用某个Servcie，首先应该到ServiceManager查询Service的相关信息，然后使用这些信息和该Service所在的Server进程建立通信通道，这样Client端就可以服务端进程的Service进行通信了。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>SystemService的启动流程分析至此已经完结，经过以上的分析可知，SystemService进程被创建后，主要的处理如下：</p><ul><li>1、启动Binder线程池，这样就可以与其他进程进行Binder跨进程通信。</li><li>2、创建SystemServiceManager，它用来对系统服务进行创建、启动和生命周期管理。</li><li>3、启动各种系统服务：引导服务、核心服务、其他服务，共100多种。应用开发主要关注引导服务ActivityManagerService、PackageManagerService和其他服务WindowManagerService、InputManagerService即可。</li></ul><p>下篇，将会给大家带来Android系统启动流程之Launcher进程启动的详细分析，希望大家多多支持~</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/03/03/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E4%B9%8BSystemServer%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android系统启动流程之Zygote进程启动</title>
      <link>http://yoursite.com/2019/02/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BZygote%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</link>
      <guid>http://yoursite.com/2019/02/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BZygote%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</guid>
      <pubDate>Sun, 24 Feb 2019 10:25:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。&quot;&gt;&lt;a href=
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样-。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样~。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://github.com/JsonChao/Awesome-Android-Exercise" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样~。</h4><p>在上一篇中，我们已经分析过Android系统启动流程中的init进程启动部分。在这一篇中，我们将继续分享Android系统启动流程中的Zygote进程启动部分。我们先看看Gityuan博客中的一幅系统启动架构图来对Android系统的启动流程有一个宏观的把控。</p><p><img src="http://gityuan.com/images/android-process/android-boot.jpg" alt="image"></p><p>这篇文章将从以下三部分来对Zygote进行分析：</p><ul><li>1、Zygote是什么？</li><li>2、Zygote启动脚本</li><li>3、Zygote进程启动流程</li></ul><h3 id="一、Zygote是什么？"><a href="#一、Zygote是什么？" class="headerlink" title="一、Zygote是什么？"></a>一、Zygote是什么？</h3><p>Zygote是在init进程启动时创建的，它又称为孵化器，它可以通过fork（复制进程）的形式来创建应用程序进程和SystemServer进程。并且，Zygote进程在启动的时候回创建DVM或者ART，因此通过fork而创建的应用程序进程和SystemServer进程可以在内部获取一个DVM或者ART的实例副本。</p><h3 id="二、Zygote启动脚本"><a href="#二、Zygote启动脚本" class="headerlink" title="二、Zygote启动脚本"></a>二、Zygote启动脚本</h3><p>init.rc文件中采用了如下所示的Import类型语句来引入Zygote启动脚本：</p><pre><code>import /init.${ro.zygote}.rc</code></pre><p>这里根据属性ro.zygote的内容来引入不同的Zygote启动脚本。从Android 5.0开始，Android开始支持64位程序，Zygote有了32/64位之别，ro.zygote属性的取值有4种：</p><ul><li>init.zygote32.rc</li><li>init.zygote32_64.rc</li><li>init.zygote64.rc</li><li>init.zygote64_32.rc</li></ul><p>注意：上面的Zygote的启动脚本都存放在system/core/rootdir目录中。</p><p>下面我们来一一分析一下上述的Zygote启动脚本。</p><h4 id="1、init-zygote32-rc"><a href="#1、init-zygote32-rc" class="headerlink" title="1、init.zygote32.rc"></a>1、init.zygote32.rc</h4><p>仅支持32位程序，脚本源码如下所示：</p><pre><code>service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    onrestart write /sys/android_power/request_state wake    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasks</code></pre><p>可以看到，它就是Android初始化语言的Service类型语句，格式如下：</p><pre><code>service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*   //&lt;service的名字&gt;&lt;执行程序路径&gt;&lt;传递参数&gt;      &lt;option&gt;       //option是service的修饰词，影响什么时候、如何启动services      &lt;option&gt;      ...</code></pre><p>由此，我们可以知道Zygote进程的名字为zygote，执行程序路径为/system/bin/app_process，类名为main，上述类似“onrestart restart …”格式的语句表示如果audioserver、cameraserver、media等进程终止了，就会进行重启。</p><h4 id="2、init-zygote32-64-rc"><a href="#2、init-zygote32-64-rc" class="headerlink" title="2、init.zygote32_64.rc"></a>2、init.zygote32_64.rc</h4><p>同时支持32、64位程序，脚本源码如下所示：</p><pre><code>service zygote /system/bin/app_process32 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    onrestart write /sys/android_power/request_state     wake    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasksservice zygote_secondary /system/bin/app_process64 -Xzygote /system/bin --zygote     --socket-name=zygote_secondary    class main    priority -20    user root    group root readproc reserved_disk    socket zygote_secondary stream 660 root system    onrestart restart zygote    writepid /dev/cpuset/foreground/tasks</code></pre><p>可以看出，这里使用了两个Service类型语句启动了两个Zygote进程，一个是名字为zygote，执行程序为app_process32的主模式Zygote进程；另一个是名字为zygote_secondary，执行程序为app_process64的辅模式Zygote进程。另外的init.zygote64.rc和init.zygote64_32.rc与上面的Zygote脚本都是类似的，这里不再多说了。</p><h3 id="三、Zygote进程启动流程"><a href="#三、Zygote进程启动流程" class="headerlink" title="三、Zygote进程启动流程"></a>三、Zygote进程启动流程</h3><p>在init启动Zygote时主要是调用app_main.cpp的main函数中的AppRuntime.start()方法来启动Zygote进程的，我们先看到app_main.cpp的main函数：</p><pre><code>int main(int argc, char* const argv[]){    ...    while (i &lt; argc) {        const char* arg = argv[i++];        // 1        if (strcmp(arg, &quot;--zygote&quot;) == 0) {            zygote = true;            niceName = ZYGOTE_NICE_NAME;        } else if (strcmp(arg, &quot;--start-system-server&quot;) == 0) {            // 2            startSystemServer = true;        } else if (strcmp(arg, &quot;--application&quot;) == 0) {            // 3            application = true;        } else if (strncmp(arg, &quot;--nice-name=&quot;, 12) == 0) {            niceName.setTo(arg + 12);        } else if (strncmp(arg, &quot;--&quot;, 2) != 0) {            className.setTo(arg);            break;        } else {            --i;            break;        }    }    ...    // 4    if (zygote) {        runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;, args, zygote);    } else if (className) {        runtime.start(&quot;com.android.internal.os.RuntimeInit&quot;, args, zygote);    } else {        fprintf(stderr, &quot;Error: no class name or --zygote supplied.\n&quot;);        app_usage();        LOG_ALWAYS_FATAL(&quot;app_process: no class name or --zygote supplied.&quot;);    }}</code></pre><p>由前可知，Zygote进程都是通过fork自身来创建子进程的，这样Zygote进程和由它fork出来的子进程都会进入app_main.cpp的main函数中，所以在mian函数中，首先会判断当前运行在哪个进程，在注释1处，会判断参数arg中释放包含了”–zygote”，如果包含了，则说明main函数是运行在Zygote进程中的并会将zygote标记置为true。在注释2处会判断参数arg中是否包含了”–start-system-server”，如果包含了则表示当前是处在SystemServer进程中并将startSystemServer设置为true。同理在注释3处会判断参数arg是否包含”–application”，如果包含了说明当前处在应用程序进程中并将application标记置为true。最后在注释4处，当zygote标志是true的时候，也就是当前正处在Zygote进程中时，则使用AppRuntime.start()函数启动Zygote进程。</p><p>我们接着看看AndroidRuntime的start函数：</p><pre><code>void AndroidRuntime::start(const char* className, const Vector&lt;String8&gt;&amp; options, bool zygote){    ...    /* start the virtual machine */    JniInvocation jni_invocation;    jni_invocation.Init(NULL);    JNIEnv* env;    // 1    if (startVm(&amp;mJavaVM, &amp;env, zygote) != 0) {        return;    }    onVmCreated(env);    /*     * 2、Register android functions.     */    if (startReg(env) &lt; 0) {        ALOGE(&quot;Unable to register all android natives\n&quot;);        return;    }    ...    // 3    classNameStr = env-&gt;NewStringUTF(className);    assert(classNameStr != NULL);    env-&gt;SetObjectArrayElement(strArray, 0, classNameStr);    for (size_t i = 0; i &lt; options.size(); ++i) {        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).string());        assert(optionsStr != NULL);        env-&gt;SetObjectArrayElement(strArray, i + 1, optionsStr);    }    /*     * Start VM.  This thread becomes the main thread of the VM, and will     * not return until the VM exits.     */    // 4    char* slashClassName = toSlashClassName(className != NULL ? className : &quot;&quot;);    jclass startClass = env-&gt;FindClass(slashClassName);    if (startClass == NULL) {        ALOGE(&quot;JavaVM unable to locate class &apos;%s&apos;\n&quot;, slashClassName);        /* keep going */    } else {        // 6        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,            &quot;([Ljava/lang/String;)V&quot;);        if (startMeth == NULL) {            ALOGE(&quot;JavaVM unable to find main() in &apos;%s&apos;\n&quot;, className);            /* keep going */        } else {            // 6            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);#if 0            if (env-&gt;ExceptionCheck())                threadExitUncaughtException(env);#endif        }    }    free(slashClassName);    ...}</code></pre><p>首先，在AndroidRuntime的start函数中，会现在注释1处使用startVm函数来启动弄Java虚拟机，然后在注释2处使用startReg函数为Java虚拟机注册JNI方法。在注释3处的classNameStr是传入的参数，值为com.android.internall.os.ZygoteInit。然后在注释4处使用toSlashClassName函数将className的”.”替换为”/“，替换后的值为com/android/internal/os/ZygoteInit。接着根据这个值找到ZygoteInit并在注释5处找到ZygoteInit的main函数，最后在注释6处使用JNI调用ZygoteInit的main函数，之所以这里要使用JNI，是因为ZygoteInit是java代码。最终，Zygote就从Native层进入了Java FrameWork层。在此之前，并没有任何代码进入Java FrameWork层面，因此可以认为，Zygote开创了java FrameWork层。</p><p>接着，我们看看Zygoteinit.java中的main方法：</p><pre><code> public static void main(String argv[]) {    ...    try {        ...        // 1        zygoteServer.registerServerSocketFromEnv(socketName);        // In some configurations, we avoid preloading resources and classes eagerly.        // In such cases, we will preload things prior to our first fork.        if (!enableLazyPreload) {            bootTimingsTraceLog.traceBegin(&quot;ZygotePreload&quot;);            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,                SystemClock.uptimeMillis());            // 2            preload(bootTimingsTraceLog);            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,                SystemClock.uptimeMillis());            bootTimingsTraceLog.traceEnd(); // ZygotePreload        } else {            Zygote.resetNicePriority();        }        ...        if (startSystemServer) {            // 3            Runnable r = forkSystemServer(abiList, socketName, zygoteServer);            // {@code r == null} in the parent (zygote) process, and {@code r != null} in the            // child (system_server) process.            if (r != null) {                r.run();                return;            }        }        Log.i(TAG, &quot;Accepting command socket connections&quot;);        // The select loop returns early in the child process after a fork and        // loops forever in the zygote.        // 4        caller = zygoteServer.runSelectLoop(abiList);    } catch (Throwable ex) {        Log.e(TAG, &quot;System zygote died with exception&quot;, ex);        throw ex;    } finally {        zygoteServer.closeServerSocket();    }    // We&apos;re in the child process and have exited the select loop. Proceed to execute the    // command.    if (caller != null) {        caller.run();    }}</code></pre><p>首先，在注释1处调用了ZygoteServer的registerServerSocketFromEnv方法创建了一个名为”zygote”的Server端的Socket，它用来等待ActivityManagerService请求Zygote来创建新的应用程序进程。我首先分析下registerServerSocketFromEnv方法的处理逻辑，源码如下所示：</p><pre><code>private static final String ANDROID_SOCKET_PREFIX = &quot;ANDROID_SOCKET_&quot;;void registerServerSocketFromEnv(String socketName) {    if (mServerSocket == null) {        int fileDesc;        // 1        final String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;        try {            // 2            String env = System.getenv(fullSocketName);            fileDesc = Integer.parseInt(env);        } catch (RuntimeException ex) {            throw new RuntimeException(fullSocketName + &quot; unset or invalid&quot;, ex);        }        try {            FileDescriptor fd = new FileDescriptor();            fd.setInt$(fileDesc);            // 3            mServerSocket = new LocalServerSocket(fd);            mCloseSocketFd = true;        } catch (IOException ex) {            throw new RuntimeException(                    &quot;Error binding to local socket &apos;&quot; + fileDesc + &quot;&apos;&quot;, ex);        }    }}</code></pre><p>首先，会在注释1处将Socket的名字拼接为“ANDROID_SOCKET_zygote“，在注释2处调用System.getenv()方法得到该Socket对应的环境变量中的值，然后将这个Socket环境变量值解析为int类型的文件描述符参数。接着，在注释4处，使用上面得到的文件描述符参数得到一个文件描述符，并由此新建一个服务端Socket。当Zygote进程将SystemServer进程启动红藕，就会在这个服务端Socket上等待AMS请求Zygote进程去创建新的应用程序进程。</p><p>接着，我们回到ZygoteInit的main方法，在注释2处会预加载类和资源。然后在注释3处，使用了forkSystemServer()方法去创建SystemServer进程。forkSystemServer()方法核心代码如下所示：</p><pre><code> private static Runnable forkSystemServer(String abiList, String socketName,        ZygoteServer zygoteServer) {    // 一系统创建SystemServer进程所需参数的准备工作    try {        ...        /* Request to fork the system server process */        // 3.1        pid = Zygote.forkSystemServer(                parsedArgs.uid, parsedArgs.gid,                parsedArgs.gids,                parsedArgs.runtimeFlags,                null,                parsedArgs.permittedCapabilities,                parsedArgs.effectiveCapabilities);    } catch (IllegalArgumentException ex) {        throw new RuntimeException(ex);    }    /* For child process */    if (pid == 0) {        if (hasSecondZygote(abiList)) {            waitForSecondaryZygote(socketName);        }        zygoteServer.closeServerSocket();        // 3.2        return handleSystemServerProcess(parsedArgs);    }    return null;}</code></pre><p>可以看到，forkSystemServer()方法中，注释3.1调用了Zygote的forkSystemServer()方法去创建SystemServer进程，其内部会执行nativeForkSystemServer这个Native方法，它最终会使用fork函数在当前进程创建一个SystemServer进程。如果pid等于0，即当前是处于新创建的子进程ServerServer进程中，则在注释3.2处使用handleSystemServerProcess()方法处理SystemServer进程的一些处理工作。</p><p>我们再回到Zygoteinit.java中main方法中的注释4处，这里调用了ZygoteServer的runSelectLoop方法来等等ActivityManagerService来请求创建新的应用程序进程，runSelectLoop()方法如下所示：</p><pre><code> Runnable runSelectLoop(String abiList) {    ArrayList&lt;FileDescriptor&gt; fds = new ArrayList&lt;FileDescriptor&gt;();    ArrayList&lt;ZygoteConnection&gt; peers = new ArrayList&lt;ZygoteConnection&gt;();    // 1    fds.add(mServerSocket.getFileDescriptor());    peers.add(null);    // 2、无限循环等待AMS请求创建应用程序进程    while (true) {        StructPollfd[] pollFds = new StructPollfd[fds.size()];        for (int i = 0; i &lt; pollFds.length; ++i) {            pollFds[i] = new StructPollfd();            pollFds[i].fd = fds.get(i);            pollFds[i].events = (short) POLLIN;        }        try {            Os.poll(pollFds, -1);        } catch (ErrnoException ex) {            throw new RuntimeException(&quot;poll failed&quot;, ex);        }        // 3        for (int i = pollFds.length - 1; i &gt;= 0; --i) {            if ((pollFds[i].revents &amp; POLLIN) == 0) {                continue;            }            // 4            if (i == 0) {                ZygoteConnection newPeer = acceptCommandPeer(abiList);                peers.add(newPeer);                fds.add(newPeer.getFileDesciptor());            } else {                try {                    ZygoteConnection connection = peers.get(i);                    // 5                    final Runnable command = connection.processOneCommand(this);                    if (mIsForkChild) {                        // We&apos;re in the child. We should always have a command to run at this                        // stage if processOneCommand hasn&apos;t called &quot;exec&quot;.                        if (command == null) {                            throw new IllegalStateException(&quot;command == null&quot;);                        }                        return command;                    } else {                        // We&apos;re in the server - we should never have any commands to run.                        if (command != null) {                            throw new IllegalStateException(&quot;command != null&quot;);                        }                        // We don&apos;t know whether the remote side of the socket was closed or                        // not until we attempt to read from it from processOneCommand. This shows up as                        // a regular POLLIN event in our regular processing loop.                        if (connection.isClosedByPeer()) {                            connection.closeSocket();                            peers.remove(i);                            fds.remove(i);                        }                    }                } catch (Exception e) {                    if (!mIsForkChild) {                        // We&apos;re in the server so any exception here is one that has taken place                        // pre-fork while processing commands or reading / writing from the                        // control socket. Make a loud noise about any such exceptions so that                        // we know exactly what failed and why.                        Slog.e(TAG, &quot;Exception executing zygote command: &quot;, e);                        // Make sure the socket is closed so that the other end knows immediately                        // that something has gone wrong and doesn&apos;t time out waiting for a                        // response.                        ZygoteConnection conn = peers.remove(i);                        conn.closeSocket();                        fds.remove(i);                    } else {                        // We&apos;re in the child so any exception caught here has happened post                        // fork and before we execute ActivityThread.main (or any other main()                        // method). Log the details of the exception and bring down the process.                        Log.e(TAG, &quot;Caught post-fork exception in child process.&quot;, e);                        throw e;                    }                } finally {                    // Reset the child flag, in the event that the child process is a child-                    // zygote. The flag will not be consulted this loop pass after the Runnable                    // is returned.                    mIsForkChild = false;                }            }        }    }}</code></pre><p>首先，在注释1处，会调用服务端的mServerSocket的getFileDescriptor()函数来去获得自身的fd字段值并加入fds列表中。然后，在注释2处，无限循环用来等待AMS请求Zygote进程创建新的应用程序进程。在注释3处会遍历pollFds这个fd列表，如果i等于0，则说明服务端Socket与客户端连接上了，即当前Zygote进程与AMS进程建立了连接。接着，在注释4处调用acceptCommandPeer()方法得到ZygoteConnection对象，并将其加入peers列表中。如果i不等于0，则表明AMS想Zygote进程发送了一个创建应用程序进程的请求，最后会在注释5处执行ZygoteConnection.runOnce方法去创建一个新的应用程序进程。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>从以上的分析可以得知，Zygote进程启动中承担的主要职责如下：</p><ul><li>1、创建AppRuntime，执行其start方法，启动Zygote进程。。</li><li>2、创建JVM并为JVM注册JNI方法。</li><li>3、使用JNI调用ZygoteInit的main函数进入Zygote的Java FrameWork层。</li><li>4、使用registerZygoteSocket方法创建服务器端Socket，并通过runSelectLoop方法等等AMS的请求去创建新的应用进程。</li><li>5、启动SystemServer进程。</li></ul><p>至此，Android系统启动流程之Zygote进程启动部分分析完毕，下一篇将会详细分析SystemServer进程启动相关的部分，敬请期待！</p><h5 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h5><hr><p>1、Android V9.0.0 源码</p><p>2、Android进阶解密第二章</p><p>3、<a href="http://gityuan.com/android/" target="_blank" rel="external">Android系统开篇</a></p><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能成为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能成为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能成为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能成为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/02/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B9%8BZygote%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
