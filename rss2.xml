<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deep into Android</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Persist + Plan = Growing</description>
    <pubDate>Fri, 12 Jan 2018 12:35:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Android 插件化</title>
      <link>http://yoursite.com/2018/01/12/Android%20%E6%8F%92%E4%BB%B6%E5%8C%96/</link>
      <guid>http://yoursite.com/2018/01/12/Android%20%E6%8F%92%E4%BB%B6%E5%8C%96/</guid>
      <pubDate>Fri, 12 Jan 2018 08:34:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;2012年，Android插件化技术诞生，从最初只支持动态加载Activity到完全模拟app运行时的沙箱系统，历经了快6年的时间
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>2012年，Android插件化技术诞生，从最初只支持动态加载Activity到完全模拟app运行时的沙箱系统，历经了快6年的时间，本文，旨在从全方面的角度解析Android插件化技术。</p><h4 id="实现Android插件化需要解决的问题"><a href="#实现Android插件化需要解决的问题" class="headerlink" title="实现Android插件化需要解决的问题"></a>实现Android插件化需要解决的问题</h4><pre><code>插件中代码的加载和主工程的相互调用插件中资源的加载和主工程的相互调用Android四大组件的生命周期管理</code></pre><h4 id="Android插件化的发展历程"><a href="#Android插件化的发展历程" class="headerlink" title="Android插件化的发展历程"></a>Android插件化的发展历程</h4><p>第一代：dynamic-load-apk和DroidPlugin</p><pre><code>dynamic-load-apk:早期使用ProxyActivity的代理技术，由ProxyActivity去控制插件Activity的生命周期。缺点：每一个Activity都必须继承插件Activity，处理Context时必须小心。DroidPlugin：通过hook系统服务的方式启动插件Activity，来达到和使用普通方式开发app的效果。缺点：过多的hook系统服务，这一过程十分复杂且不够稳定。</code></pre><p>第二代：VirtulApk、Small、RePlugin</p><pre><code>原理：实现原理上都选择尽量少的hook，通过在manifest上预埋一些组件实现四大组件的插件化。其中Small更形成了一个跨平台、组件化的框架。</code></pre><p>第三代：VirtulApp、Atlas</p><pre><code>VirtulApp：能够完全模拟app的运行环境，能够实现免安装应用和双开技术。Atlas：阿里出品，号称是一个容器化框架，结合了组件化和热更新技术。</code></pre><h4 id="Android插件化的实现原理"><a href="#Android插件化的实现原理" class="headerlink" title="Android插件化的实现原理"></a>Android插件化的实现原理</h4><p>一、类加载</p><p>1.外部apk中的类加载</p><pre><code>Android中有两种类加载器，DexClassLoader和PathClassLoader，它们都继承于BaseDexClassLoader。两者的区别：DexClassLoader多了一个optimizedDirectory的路径参数，这个目录必须是内部存储路径，用于缓存系统创建的Dex文件。所以我们可以使用DexClassLoader去加载外部Apk中的类。</code></pre><p>2.双亲委托机制</p><pre><code>ClassLoader调用loadClass方法加载类采用了双亲委托机制来避免重复加载类。首先，ClassLoader会查看自身已经加载的类中是否已经存在此类，如不存在，然后，则会使用父类来加载此类，如不能成功加载，则会使用自身重载于BaseDexClassLoader的findClass()方法来加载此类。DexClass的DexPathList在DexClass的构造器中生成，findClass()方法则是从DexPathList下面找出对应的DexFile，循环DexElements，通过dexElement.dexFile取出对应的DexFile，再通过DexFile.loadClassBinaryName()加载对应的类。</code></pre><p>二、单DexClassLoader和多DexClassLoader</p><p>作用：使用插件DexClassLoader加载出需要的类。</p><p>1.多DexClassLoader（Replugin）</p><pre><code>通过每一个插件的DexClassLoader加载出自身所需要的类，当每一个插件需要加载相同的类库时，可采用该类库的不同版本来使用。</code></pre><p>2.单DexClassLoader（Small）</p><pre><code>通过把每一个插件的pathList（DexFile）合并到主app的DexClassLoader上，来使各个插件和主app直接能够相互调用类和方法，并且各个插件中相同的功能可以抽取出来作为一个Common插件供其它插件使用。</code></pre><p>3.互相调用</p><p>插件调用主工程</p><pre><code>在ClassLoader构造时指定主工程的DexClassLoader为父加载器即可直接调用主工程中的类和方法。</code></pre><p>主工程调用插件</p><pre><code>如果是多DexClassLoader的情况，则需要通过插件的DexClassLoader加载对应的类并反射调用其方法。此种情况，主工程一般会在一个统一的地方对访问插件中的类和方法做一些访问权限的管理及配置。如果是单DexClassLoader的情况，则可以直接调用插件中的类和方法。但是当多个插件引用的库的版本不同时，会出现错误，因此，建议采用Gradle版本依赖管理统一处理主工程及各个插件的库依赖。</code></pre><p>三、资源加载</p><p>Android通过Resource来加载资源，只要有插件apk，就可以使用assertManager.addAssertPath（apkPath）的方式来生成assertManager，再使用其new出对应的Resource对象即可。</p><p>注意：由于AssertManager并不是Public，所以需要通过反射的方式去调用它。并且由于一些Rom对Resource的处理，所以，需要兼容处理。</p><p>1.资源路径的处理</p><p>有2种处理方式：</p><pre><code>合并式：利用assertManager.addAssetPath()将主工程和各个插件的apk路径一起加入。优势：资源共用。逆势：需要处理资源id冲突。独立式：主工程和插件都生成各自独立的Resource。优势：不需要处理资源id冲突。逆势：各个插件需要通过某些方式去获取其它插件的Resource。</code></pre><p>2.Context的处理</p><pre><code>1.创建主工程的Resource2.hook主工程的Resource3.将activity与Resource关联</code></pre><p>3.资源冲突</p><pre><code>产生的原因：由于主工程和各个插件引用的Resource id重复产生的冲突。解决思路：Android中的资源在系统中是以8位16进制0XPPTTRRRR的方式存在，其中PP即是资源区分的区域（Android系统只用它来区分系统资源和应用资源），只要让每一个插件的PP段取不同的值即可解决资源id冲突的问题。具体解决方式：1.修改aapt源码，编译期修改PP段。2.修改Resource的arsc文件，其中的每一条都包含了资源id和映射路径。</code></pre><h4 id="四大组件支持（Activity）"><a href="#四大组件支持（Activity）" class="headerlink" title="四大组件支持（Activity）"></a>四大组件支持（Activity）</h4><pre><code>Activity的处理最为复杂，有两种处理方式：1.ProxyActivity的方式。2.预埋StubActivity，hook系统启动Activity的过程。原理：VirtualAPK通过替换了系统的Instrumentation，hook了Activity的启动和创建，省去了手动管理插件Activity生命周期的繁琐，让插件Activity像正常的Activity一样被系统管理，并且插件Activity在开发时和常规一样，即能独立运行又能作为插件被主工程调用。</code></pre><h4 id="Android插件化的发展方向"><a href="#Android插件化的发展方向" class="headerlink" title="Android插件化的发展方向"></a>Android插件化的发展方向</h4><pre><code>Android插件化方向主要有2个方向：1.结合组件化技术，成为一个大中型app的基础框架。2.完全模拟app运行环境的沙盒系统。</code></pre>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/12/Android%20%E6%8F%92%E4%BB%B6%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android自动化测试实践</title>
      <link>http://yoursite.com/2018/01/09/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</link>
      <guid>http://yoursite.com/2018/01/09/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</guid>
      <pubDate>Tue, 09 Jan 2018 11:43:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;众所周知，一个好的项目需要不断地打造，而一些有效的测试则是加速这一过程的利器。本篇博文讲解较为全面的介绍Android测试方面的知
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>众所周知，一个好的项目需要不断地打造，而一些有效的测试则是加速这一过程的利器。本篇博文讲解较为全面的介绍Android测试方面的知识。</p><p>Android的测试主要分为三个方面：</p><pre><code>单元测试（Mokito、Junit4）UI测试（Espresso、UI Automator）额外的：Android testing support library包括AndroidJunitRunner、Espresso、UI Automator</code></pre><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>一、使用Junit4进行单元测试</p><p>Android Studio已经自动集成了Junit4测试框架，如下：</p><pre><code>dependencies {    ...    testImplementation &apos;junit:junit:4.12&apos;</code></pre><p>使用Junit4进行单元测试的步骤：</p><pre><code>1.编写测试类。2.鼠标右键点击测试类，选择选择Go To-&gt;Test（或者使用快捷键Ctrl+Shift+T）在Test/java/项目测试文件夹/下自动生成测试模板。3.使用断言（assertEqual、assertEqualArrayEquals等等)进行单元测试。4.右键点击测试类，Run编写好的测试类。</code></pre><p>额外的概念：测试驱动开发：编写测试，实现功能使测试通过，然后不断地使用这种方式实现功能的快速迭代开发。</p><p>二、使用Mcokito进行单元测试</p><p>在build.gradle里面添加Mcokito的依赖</p><pre><code>testImplementation &apos;org.mockito:mockito-core:2.7.1&apos;</code></pre><p>Mcokito是一个模拟对象工具，它的作用如下：</p><pre><code>1.验证方法调用Mockito.when(mockValidator.verifyPassword(&quot;xiaochuang_is_handsome&quot;)).thenReturn(true);//方法调用1次Mockito.when(mockValidator.verifyPassword(&quot;xiaochuang_is_handsome&quot;)， Mockito.times(3).thenReturn(true);//方法调用3次2.指定Mock对象的某些方法的行为Mockito.when(mockObject.targetMethod(args)).thenReturn(desiredReturnValue);（args可以使anyString()）</code></pre><h4 id="UI测试"><a href="#UI测试" class="headerlink" title="UI测试"></a>UI测试</h4><p>一、Espresso是属于Android Testing support Library的UI测试框架（适合用于编写白盒自动化测试），也是一种Instrumentation测试方法。</p><p>关于Instrumentation</p><pre><code>Instrumentation是Android系统里面的一套控制方法或者“钩子”,它可以控制单个组件的生命周期，同时可以控制Android如何加载应用程序。</code></pre><p>测试步骤：</p><pre><code>1.编写UI交互的测试。2.在androidTest/java/项目测试文件/新建Expresso测试类用于测试UI交互。3.右键点击测试类，Run编写好的测试类。</code></pre><p>涉及到的api：</p><p>视图匹配api</p><pre><code>1.Expresso.onView(Matcher&lt;View&gt; matcher)用于获取目标应用中UI组件的引用指定搜索条件有以下几种： 视图的类名称 视图的R.id 视图的显示文本 视图的内容描述</code></pre><p>适配器匹配api</p><pre><code>1.Expresso.onData(Matcher&lt;? extends Object&gt; matcher)获取AdapterView视图中的引用以便执行测试</code></pre><p>ViewActions（视图操作api）方法</p><pre><code>一段常用测试代码：onView(withId(R.id.editText)).perform(typeText(STRING_TO_BE_TYPED), closeSoftKeyboard()); onView(withText(&quot;Say hello!&quot;)).perform(click());String expectedText = &quot;Hello, &quot; + STRING_TO_BE_TYPED + &quot;!&quot;;onView(withId(R.id.textView)).check(matches(withText(expectedText)));</code></pre><p>更多使用请见：</p><p><a href="https://developer.android.com/training/testing/ui-testing/espresso-testing.html" target="_blank" rel="external">测试单个应用的UI</a></p><h4 id="Android-testing-support-library"><a href="#Android-testing-support-library" class="headerlink" title="Android testing support library"></a>Android testing support library</h4><p>Espresso已经讲到了，接下来还有AndroidJunitRunner和UI Automator。</p><h4 id="AndroidJunitRunner"><a href="#AndroidJunitRunner" class="headerlink" title="AndroidJunitRunner"></a>AndroidJunitRunner</h4><p>AndroidJunitRunner是Android用于兼容Junit4在Android中的使用而创建的单元测试类。</p><p>该单元测试类必须以 @RunWith(AndroidJUnit4.class) 注解作为前缀。除了Junit4提供的测试注解外，还有如下注解：</p><pre><code>1.@RequireDeive指定设备仅在物理设备上运行，不允许在模拟器上运行。2.@SdkSupress禁止给定级别api以下的设备运行（api级别本身不计算在内）。3.@SmallTest、@MediumTest、@LargeTest指定测试的运行时长和运行频率。</code></pre><h4 id="UI-Automator"><a href="#UI-Automator" class="headerlink" title="UI Automator"></a>UI Automator</h4><p>用于跨系统和跨应用的UI测试。此测试应用场景较少，具体使用见：</p><p><a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html" target="_blank" rel="external">测试多个应用的UI</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/09/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2018必学的顶尖Android技术（译）（作者：Amit Shekhar）</title>
      <link>http://yoursite.com/2018/01/06/2018%E5%BF%85%E5%AD%A6%E7%9A%84%E9%A1%B6%E5%B0%96Android%E6%8A%80%E6%9C%AF%EF%BC%88%E8%AF%91%EF%BC%89%EF%BC%88%E4%BD%9C%E8%80%85%EF%BC%9AAmit%20Shekhar%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/01/06/2018%E5%BF%85%E5%AD%A6%E7%9A%84%E9%A1%B6%E5%B0%96Android%E6%8A%80%E6%9C%AF%EF%BC%88%E8%AF%91%EF%BC%89%EF%BC%88%E4%BD%9C%E8%80%85%EF%BC%9AAmit%20Shekhar%EF%BC%89/</guid>
      <pubDate>Sat, 06 Jan 2018 01:43:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这是对国外优质文章系列的译文首篇，旨在帮助国内Android开发者掌握国际第一手开发资料，提升国内Android开发者的整体水平。
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是对国外优质文章系列的译文首篇，旨在帮助国内Android开发者掌握国际第一手开发资料，提升国内Android开发者的整体水平。</p><p>本文的作者是Amit Shekhar，印度顶尖技术机构Mindorks的Android大神，接下来呈现干货。</p><p>本文发布于<a href="https://medium.com/" target="_blank" rel="external">Medium</a>（时间：2018/01/01）</p><p>这是原文地址：<br><a href="https://medium.com/mindorks/top-android-tech-to-learn-in-2018-c5bed9be4316" target="_blank" rel="external">Top Android Tech To Learn In 2018</a></p><h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><center><br><br><img src="https://cdn-images-1.medium.com/max/1000/1*02MysJpqLzIT40Ma6175pg.png" alt="image"><br><br></center><center><br><br>#### 2018来了，祝福所有人<br><br></center><h4 id="一、Kotlin"><a href="#一、Kotlin" class="headerlink" title="一、Kotlin"></a>一、Kotlin</h4><p>我们大多数的人已经开始去学习和使用Kotlin。去年，谷歌官方将Kotlin作为Android开发的第一类语言，这使得它以一种极快的速率普及于广大开发者之中。为了让我们不要被甩在后面，开始学习和在我们的app中使用它。今年，预期它将会被广大开发者所使用。</p><p>下面是一些很棒的链接：</p><ul><li><p><a href="https://blog.mindorks.com/a-complete-guide-to-learn-kotlin-for-android-development-b1e5d23cc2d8" target="_blank" rel="external">一个将Kotlin应用于Android开发的完备指导</a></p></li><li><p><a href="http://kotlinlang.org/docs/reference/coding-conventions.html" target="_blank" rel="external">Kotlin官方指导</a></p></li></ul><h4 id="二、Flutter"><a href="#二、Flutter" class="headerlink" title="二、Flutter"></a>二、Flutter</h4><p><a href="https://flutter.io" target="_blank" rel="external">Flutter</a>是一个帮助开发者和设计者去高效率地建立一个移动端app的新的移动端app SDK。</p><p>它能够很容易并且快速地建立一个移动端app。就像React Native，它也提供了rective-style的视图。它通过避免使用JavaScript Bridge以及通过将Dart作为编译语言来改善性能。Dart由于被提前编译进本机（Native）代码而被使用在多个平台上。编译成本机代码也能够改善app的启动时间。</p><p>让我们看看Flutter在2018年的成长，它将会备受关注。</p><h4 id="三、Android-Architecture-Component"><a href="#三、Android-Architecture-Component" class="headerlink" title="三、Android Architecture Component"></a>三、Android Architecture Component</h4><p><a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="external">Android架构组件</a>是一些库的集合，它能够帮助你构建出健壮、可测试、稳定的app，它们可以被用来管理你的Ui组件生命周期和处理数据持久化存储。</p><p>我们中的大多数人已经开始学习了<a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="external">Android架构组件</a>。</p><p>今年它将被大量的开发者所接受。</p><p>2017年以使用MVP,MVVM,Rxjava,Dagger2的趋势开始，并以使用Kotlin和Android架构组件的趋势结束。</p><p>下面是一些很棒的链接：</p><p><a href="https://blog.mindorks.com/essential-guide-for-designing-your-android-app-architecture-mvp-part-1-74efaf1cda40" target="_blank" rel="external">学习MVP</a></p><p><a href="https://mindorks.com/course/android-mvp-introduction" target="_blank" rel="external">以一种简单的方式学习MVP架构</a></p><p><a href="https://github.com/MindorksOpenSource/android-mvvm-architecture" target="_blank" rel="external">基于MVVM架构的项目</a></p><p><a href="https://blog.mindorks.com/a-complete-guide-to-learn-rxjava-b55c0cea3631" target="_blank" rel="external">学习Rxjava完全指南</a></p><p><a href="https://blog.mindorks.com/a-complete-guide-to-learn-dagger-2-b4c7a570d99c" target="_blank" rel="external">学习Dagger2完全指南</a></p><p>快乐学习：)</p><p>想要更多，并且学更多</p><p>在<a href="https://blog.mindorks.com" target="_blank" rel="external">blog.mindorks.com</a>查看Android的所有顶级文章。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/06/2018%E5%BF%85%E5%AD%A6%E7%9A%84%E9%A1%B6%E5%B0%96Android%E6%8A%80%E6%9C%AF%EF%BC%88%E8%AF%91%EF%BC%89%EF%BC%88%E4%BD%9C%E8%80%85%EF%BC%9AAmit%20Shekhar%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android 学习渠道分享</title>
      <link>http://yoursite.com/2018/01/04/Android%20%E5%AD%A6%E4%B9%A0%E6%B8%A0%E9%81%93%E5%88%86%E4%BA%AB/</link>
      <guid>http://yoursite.com/2018/01/04/Android%20%E5%AD%A6%E4%B9%A0%E6%B8%A0%E9%81%93%E5%88%86%E4%BA%AB/</guid>
      <pubDate>Thu, 04 Jan 2018 13:17:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言（全网唯一、最全面，最干货的技术渠道总结，成为Android资深工程师必备）&quot;&gt;&lt;a href=&quot;#前言（全网唯一、最全面，最干货的技术渠道总结，成为Android资深工程师必备）&quot; class=&quot;headerlink&quot; title=&quot;前言（全网唯一
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言（全网唯一、最全面，最干货的技术渠道总结，成为Android资深工程师必备）"><a href="#前言（全网唯一、最全面，最干货的技术渠道总结，成为Android资深工程师必备）" class="headerlink" title="前言（全网唯一、最全面，最干货的技术渠道总结，成为Android资深工程师必备）"></a>前言（全网唯一、最全面，最干货的技术渠道总结，成为Android资深工程师必备）</h3><p>最近扫阅了国内外大部分的Android技术网站，特定总结一下很棒的干货，本文旨在总结自身的android学习渠道来源，分类如下：</p><h4 id="一、技术公众号：一些经过检测，确属干货的技术（android为主）公众号-注：搜索公众号名称关注即可"><a href="#一、技术公众号：一些经过检测，确属干货的技术（android为主）公众号-注：搜索公众号名称关注即可" class="headerlink" title="一、技术公众号：一些经过检测，确属干货的技术（android为主）公众号 (注：搜索公众号名称关注即可)"></a>一、技术公众号：一些经过检测，确属干货的技术（android为主）公众号 (注：搜索公众号名称关注即可)</h4><h5 id="Android为主"><a href="#Android为主" class="headerlink" title="Android为主"></a>Android为主</h5><p>鸿洋</p><p>玉刚说</p><p>HenCoder</p><p>刘望舒</p><p>ASCE1885</p><p>code小生</p><p>承香墨影</p><p>安卓笔记侠</p><p>伯特说</p><p>CodeKK</p><p>安卓杂货铺</p><p>安卓进化论</p><p>Android那些事</p><p>吴小龙同学</p><p>何俊林</p><p>技术视界</p><h5 id="涉及其它技术的公众号（提升眼界的精品文章，不得不读）"><a href="#涉及其它技术的公众号（提升眼界的精品文章，不得不读）" class="headerlink" title="涉及其它技术的公众号（提升眼界的精品文章，不得不读）"></a>涉及其它技术的公众号（提升眼界的精品文章，不得不读）</h5><p>阿里技术</p><p>InfoQ</p><p>互联网学术</p><p>谷歌开发者</p><p>码农翻身</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c40e8dd13ceb6?w=880&amp;h=544&amp;f=png&amp;s=99737" alt="image"></p><h4 id="二、国内技术网站：目前为止，必须知道的技术干货网站"><a href="#二、国内技术网站：目前为止，必须知道的技术干货网站" class="headerlink" title="二、国内技术网站：目前为止，必须知道的技术干货网站"></a>二、国内技术网站：目前为止，必须知道的技术干货网站</h4><p><a href="https://juejin.im/timeline" target="_blank" rel="external">掘金（大神云集，最新技术获取渠道，与国外最新技术渠道相通）</a></p><p><a href="http://www.wanandroid.com/" target="_blank" rel="external">玩Android（鸿洋大神搭建的个人技术网站）</a></p><p><a href="http://hencoder.com/" target="_blank" rel="external">Hencoder（扔物线给高级android工程师的进阶手册）</a> </p><p><a href="https://diycode.cc/" target="_blank" rel="external">Diycode</a></p><p><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android开发技术周报</a></p><p><a href="http://gank.io/" target="_blank" rel="external">gank.io</a></p><p><a href="https://www.ctolib.com/android/" target="_blank" rel="external">CTOLib码库（android）</a></p><p><a href="https://gank.io/post/" target="_blank" rel="external">匠心写作</a></p><p><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">泡在网上的日子</a></p><p><a href="https://developers.googleblog.cn" target="_blank" rel="external">谷歌开发者中文博客</a></p><p><a href="https://xiaozhuanlan.com/" target="_blank" rel="external">小专栏</a></p><p><a href="https://list.youku.com/albumlist/show/id_51314721.html" target="_blank" rel="external">谷歌开发者中文视频网站</a> </p><p><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c40ee9f378a6b?w=1079&amp;h=705&amp;f=png&amp;s=311790" alt="image"></p><h4 id="三、国外技术网站："><a href="#三、国外技术网站：" class="headerlink" title="三、国外技术网站："></a>三、国外技术网站：</h4><p><a href="https://github.com/xitu/gold-miner/blob/master/android.md" target="_blank" rel="external">Github</a></p><p><a href="https://stackoverflow.com/" target="_blank" rel="external">StackOverFlow</a></p><p><a href="https://developer.android.com/index.html?hl=zh-cn" target="_blank" rel="external">Android developer</a></p><p><a href="https://medium.com/" target="_blank" rel="external">Medium（新兴的国外技术论坛，干货聚集地)</a></p><p><a href="https://blog.mindorks.com/" target="_blank" rel="external">Mindorks （一家位于印度的顶级Android技术学习网站） </a></p><p><a href="http://fragmentedpodcast.com/" target="_blank" rel="external">Fragmented （Donn Felker and Kaushik Gopal 搭建的android播客网站）</a></p><p><a href="https://academy.realm.io/cn/section/android/" target="_blank" rel="external">Realm （Realm android 学习网站）</a></p><p><a href="https://www.bignerdranch.com/blog/categories/android/" target="_blank" rel="external">Big Nerd Ranch (android)</a> </p><p><a href="http://tapadoo.com/" target="_blank" rel="external">Tapadoo （国外顶尖团队技术学习网站）</a></p><p><a href="https://www.bignerdranch.com/blog/categories/android/" target="_blank" rel="external">Rxjava site （rxjava 官方操作符文档）</a></p><p><a href="https://kotlinlang.org/docs/reference/" target="_blank" rel="external">Kotlin site</a> </p><p><a href="https://material.io/components/android/" target="_blank" rel="external">Material Component （material design 组件的官方学习网站）</a></p><p><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c40f2b3cdd9b5?w=1463&amp;h=495&amp;f=png&amp;s=157702" alt="image"></p><h4 id="四、国内Android大神的个人技术博客"><a href="#四、国内Android大神的个人技术博客" class="headerlink" title="四、国内Android大神的个人技术博客"></a>四、国内Android大神的个人技术博客</h4><p><a href="http://www.trinea.cn/" target="_blank" rel="external">Trinea blog</a> </p><p><a href="http://stormzhang.com/" target="_blank" rel="external">stromzhang blog</a> </p><p><a href="http://www.hensen.site" target="_blank" rel="external">Hensen blog</a> </p><p><a href="http://liuwangshu.cn/" target="_blank" rel="external">刘望舒 blog </a></p><p><a href="https://zhuanlan.zhihu.com/baron" target="_blank" rel="external">张磊 blog </a></p><p><a href="https://kymjs.com/" target="_blank" rel="external">张涛 blog</a> </p><p><a href="https://blog.piasy.com/" target="_blank" rel="external">Piasy blog</a> </p><p><a href="https://wangli0.github.io/" target="_blank" rel="external">Limitles blog </a></p><p><a href="https://pqpo.me/" target="_blank" rel="external">pqpo blog </a></p><p><a href="http://gudong.name/" target="_blank" rel="external">咕咚blog </a></p><p><a href="https://www.liaohuqiu.net/cn/" target="_blank" rel="external">Jessyan blog</a> </p><p><a href="http://blog.lmj.wiki/" target="_blank" rel="external">ANLY blog </a></p><p><a href="https://unclechen.github.io/" target="_blank" rel="external">UncleChen blog</a> </p><p><a href="https://www.liaohuqiu.net/cn/" target="_blank" rel="external">Srain blog</a> </p><p><a href="http://glanwang.com/" target="_blank" rel="external">Glan Wang blog </a></p><p><a href="http://www.easydone.cn/" target="_blank" rel="external">Ailurus blog </a></p><p><a href="http://blog.zhaiyifan.cn/" target="_blank" rel="external">markzhai blog</a> </p><p><a href="http://tangpj.com/archives/" target="_blank" rel="external">Tang blog</a> </p><p><a href="http://weishu.me/archives/" target="_blank" rel="external">Weishu blog</a> </p><p><a href="http://huangjunbin.com/" target="_blank" rel="external">黄俊彬 blog</a> </p><p><a href="http://droidyue.com/" target="_blank" rel="external">技术小黑屋 </a></p><p><a href="http://iluhcm.com/" target="_blank" rel="external">Xing blog </a></p><p><a href="http://www.gcssloop.com/#blog" target="_blank" rel="external">gcsslop blog</a> </p><p><a href="http://yifeng.studio/" target="_blank" rel="external">亦枫 blog</a> </p><p><a href="http://cdevlab.top/" target="_blank" rel="external">cdevlab blog </a></p><p><a href="http://wensibo.top/" target="_blank" rel="external">温斯渤 blog</a> </p><p><a href="http://kaedea.com/" target="_blank" rel="external">晓枫 blog </a></p><p><a href="http://androidperformance.com/" target="_blank" rel="external">高建武 blog </a></p><p><a href="http://yydcdut.com/" target="_blank" rel="external">yydcdut blog</a> </p><p><a href="http://gityuan.com/" target="_blank" rel="external">gityuan blog</a> </p><p><a href="http://www.lightskystreet.com/" target="_blank" rel="external">lightSky blog </a></p><p><a href="https://list.youku.com/albumlist/show/id_51314721.html" target="_blank" rel="external">drakeet blog </a></p><p><a href="https://kyleduo.com/" target="_blank" rel="external">kyleduo blog </a></p><p><a href="http://imxie.itscoder.com/" target="_blank" rel="external">im xie blog </a></p><p><a href="https://kotlinlang.org/docs/reference/" target="_blank" rel="external">Blankj 简书 blog</a> </p><p><a href="https://www.jianshu.com/u/1d8042233f67" target="_blank" rel="external">拉丁吴 简书 blog </a></p><p><a href="https://www.zhihu.com/people/hev1n/posts" target="_blank" rel="external">Hevin 知乎 blog </a></p><p><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c40f63db5d8df?w=1349&amp;h=592&amp;f=png&amp;s=441900" alt="image"></p><h4 id="五、国外Android牛人的个人技术博客"><a href="#五、国外Android牛人的个人技术博客" class="headerlink" title="五、国外Android牛人的个人技术博客"></a>五、国外Android牛人的个人技术博客</h4><p><a href="https://android-developers.googleblog.com/" target="_blank" rel="external">Android developers blog </a></p><p><a href="https://plus.google.com/collection/sLR0p" target="_blank" rel="external">Google+ android developers blog</a> </p><p><a href="https://chris.banes.me/" target="_blank" rel="external">Chris Banes blog </a>()</p><p><a href="http://blog.danlew.net/" target="_blank" rel="external">Dan lew </a></p><p><a href="https://frogermcs.github.io/" target="_blank" rel="external">froger_mcs blog </a></p><p><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c40f807ef44a4?w=1196&amp;h=547&amp;f=png&amp;s=107337" alt="image"></p><h4 id="六、其它"><a href="#六、其它" class="headerlink" title="六、其它"></a>六、其它</h4><p><a href="https://kyleduo.com/" target="_blank" rel="external">Lingvis （英语学习Web端）</a></p><p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcode (算法高手必经之路) </a></p><p><a href="https://material.io/components/android/" target="_blank" rel="external">Android 进阶路线图 </a></p><p><a href="http://md.aclickall.com/" target="_blank" rel="external">Md2ALL (微信公众号md编写优化)</a> </p><p><a href="https://android-arsenal.com/" target="_blank" rel="external">Android 开源项目搜集库 </a></p><p><a href="https://android.googlesource.com/" target="_blank" rel="external">Google android 源码 git 仓库 </a></p><p><a href="https://gradle.org/" target="_blank" rel="external">Gradle 官网 （Gradle建立多平台文档）</a></p><p><a href="https://account.jetbrains.com/login" target="_blank" rel="external">JetBrains 官网</a> </p><p><a href="https://www.lottiefiles.com/" target="_blank" rel="external">Lottiefiels （lottie动画js文件）</a></p><p><a href="https://www.guardsquare.com/en/dexguard" target="_blank" rel="external">加密APP软件：DexGuard </a></p><p><a href="https://coderpad.io/" target="_blank" rel="external">CoderPad （能编写多语言的web端）</a></p><p>原型设计：</p><p><a href="https://modao.cc/" target="_blank" rel="external">墨刀 </a></p><p><a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch</a> </p><p>UI设计：</p><p><a href="https://huaban.com/" target="_blank" rel="external">花瓣</a></p><p>免费的Icon图标:</p><p><a href="https://icons8.com/" target="_blank" rel="external"> Icons8 </a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上没给出链接的（似乎能给的都给了—— ——），都能在Google上搜到，学习渠道很多，关键是要选对自己想要的，2018加油！！</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c40faeaeba165?w=198&amp;h=197&amp;f=jpeg&amp;s=6717" alt="image"></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/04/Android%20%E5%AD%A6%E4%B9%A0%E6%B8%A0%E9%81%93%E5%88%86%E4%BA%AB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017 年末总结</title>
      <link>http://yoursite.com/2017/12/31/2017%20%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/</link>
      <guid>http://yoursite.com/2017/12/31/2017%20%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sun, 31 Dec 2017 13:55:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知不觉，2017年就过去了，记得在10月末的时候定下了&lt;a href=&quot;https://jsonchao.github.io/2
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知不觉，2017年就过去了，记得在10月末的时候定下了<a href="https://jsonchao.github.io/2017/10/28/Android%20%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E8%A1%A8/" target="_blank" rel="external">Android学习计划表</a>,截止到今天为止，</p><p>第1（Fragment全解析系列），2（Rxjava操作符系列），3（dagger22注解快速开发系列）点勉强达标，但是离熟练掌握和精通还有很大的差距。</p><p>第4（Kotlin实战），5（Hencoder系列课程）点进度严重滞后，的确，这2部分需要掌握的内容的确很多，希望在2018上半年能吃透kotlin，跟上Hencoder的进度。</p><p>因为没有合理的安排学习任务，导致后续的6，7，8点几乎没有涉及到，对于2018上半年的学习安排，确实需要对Android的知识架构逐渐升入，稳打稳扎才是正途，因此，下面先旨在列出2018上半年攻克的点，后续再出博文安排具体计划。</p><h4 id="一、10本不得不深入学习的书（1是android官方培训，2是电子文档，3-10自己买的纸质书）"><a href="#一、10本不得不深入学习的书（1是android官方培训，2是电子文档，3-10自己买的纸质书）" class="headerlink" title="一、10本不得不深入学习的书（1是android官方培训，2是电子文档，3-10自己买的纸质书）"></a>一、10本不得不深入学习的书（1是android官方培训，2是电子文档，3-10自己买的纸质书）</h4><p>1.Android官方API Guides + 指定培训。（精）<br>2.第一行代码（2版）（快）<br>3.从小工到专家（精）<br>4.Android进阶之光（精）<br>5.Kotlin实战（精）<br>6.Android开发艺术探索（精）<br>7.Android高级进阶（精）<br>8.Android源码设计模式解析与实战（精）<br>9.重构，改善既有代码的设计（精）<br>10.Android性能优化实践（精）</p><h4 id="二、深入android必须掌握的点"><a href="#二、深入android必须掌握的点" class="headerlink" title="二、深入android必须掌握的点"></a>二、深入android必须掌握的点</h4><p>下面列的1-14点旨在构建自己的知识体系，对android学习循序渐进</p><p>1.计算机基础</p><p>2.java基础<br>3.java网络编程<br>4.java并发编程<br>5.java JVM<br>5.其余java高级系列（IO，反射，泛型，注解，集合框架）<br>6.java面向对象6大原则和设计模式<br>7.数据结构和算法<br>8.重要java类源码解析<br>9.kotlin</p><p>10.android基础<br>11.android进阶<br>12.android高新技术（rx系列、dagger2、android官方架构组件、组件化、插件化、热更新）<br>13.android系统源码解析<br>14.android优秀三方库源码解析</p><h4 id="三、算法：每天一道-Leetcode，-星期天总结复习前6天的算法题，温故而知新。"><a href="#三、算法：每天一道-Leetcode，-星期天总结复习前6天的算法题，温故而知新。" class="headerlink" title="三、算法：每天一道 Leetcode， 星期天总结复习前6天的算法题，温故而知新。"></a>三、算法：每天一道 Leetcode， 星期天总结复习前6天的算法题，温故而知新。</h4><h4 id="四、英语：要想第一时间掌握最新的技术，跟上时代的潮流，英语必须掌握，因此，使用零碎时间学习英语是最好的，每天上下班坐地铁和公交可以用耳机听英语听力，起床和睡觉时花5-10分钟扫描20个单词。"><a href="#四、英语：要想第一时间掌握最新的技术，跟上时代的潮流，英语必须掌握，因此，使用零碎时间学习英语是最好的，每天上下班坐地铁和公交可以用耳机听英语听力，起床和睡觉时花5-10分钟扫描20个单词。" class="headerlink" title="四、英语：要想第一时间掌握最新的技术，跟上时代的潮流，英语必须掌握，因此，使用零碎时间学习英语是最好的，每天上下班坐地铁和公交可以用耳机听英语听力，起床和睡觉时花5-10分钟扫描20个单词。"></a>四、英语：要想第一时间掌握最新的技术，跟上时代的潮流，英语必须掌握，因此，使用零碎时间学习英语是最好的，每天上下班坐地铁和公交可以用耳机听英语听力，起床和睡觉时花5-10分钟扫描20个单词。</h4><h4 id="五、整理自己的android学习渠道，后续会发相关学习渠道分享（绝对干货，全网唯一，最全面的学习渠道）。"><a href="#五、整理自己的android学习渠道，后续会发相关学习渠道分享（绝对干货，全网唯一，最全面的学习渠道）。" class="headerlink" title="五、整理自己的android学习渠道，后续会发相关学习渠道分享（绝对干货，全网唯一，最全面的学习渠道）。"></a>五、整理自己的android学习渠道，后续会发相关学习渠道分享（绝对干货，全网唯一，最全面的学习渠道）。</h4><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>2017，没想到这么快就过去了，这一年，android水平并没有自己想象的那么进步那么快，付出的努力还不够，希望明年的此刻，至少能说一句，我已经拼劲全力了，最后，祝大家也能成为真正的Android高手。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/12/31/2017%20%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
