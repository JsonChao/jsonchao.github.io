<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deep into Android</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Persist + Plan = Growing</description>
    <pubDate>Sat, 17 Mar 2018 01:26:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>计算机网络（二、IP地址）</title>
      <link>http://yoursite.com/2018/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%E3%80%81IP%E5%9C%B0%E5%9D%80%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%E3%80%81IP%E5%9C%B0%E5%9D%80%EF%BC%89/</guid>
      <pubDate>Wed, 21 Feb 2018 11:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://jsonchao.github.io/knowledgehierarchy/" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样。</h4><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>这是计算机网络的第二部分——IP地址。what(IP地址是什么？)IP地址全称为Internet Protocol Address，是分配给网络上使用IP的设备的标签。它由网络号(包括子网号)和主机号组成，分为IPv4和IPv6两大类。why(为什么使用它？)给连接网络的每一台设备都贴上一个标签，以作区分。how(怎么使用它？)请看下文。。</code></pre><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><pre><code>IP地址是唯一的，IPv4有2的32次方个地址。</code></pre><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><pre><code>按地址范围分：A类地址(二进位)以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255;B类地址(二进位)以10开头，前两个字节作为网络号，地址范围为：128.0.0.0~191.255.255.255;C地址(二进位)以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255；D类地址(二进位)以1110开头，地址范围是224.0.0.0~239.255.255.255；E类地址(二进位)以1111开头，地址范围是240.0.0.0~255.255.255.255。注意：只有A,B,C有网络号和主机号之分。按功能分：网络地址：网络地址的主机号全为0，它代表整个网络。广播地址：通常称为直接广播地址，区分于受限广播地址。广播地址的主机号全为1，与网络地址主机号相反。向某个网络的广播地址发送消息，该网络的所有主机号都能接收到该消息。组播地址：D类地址作为组播地址，负责一对多的通信。保留地址：E类地址作为保留地址，供以后使用。其它特殊的地址：255.255.255.255：该地址指的是受限的广播地址，它只能用于本地网络。直接广播地址能通过某些路由器，而受限的广播地址不能通过路由器。0.0.0.0:常用于寻找自己的IP地址。(以255.255.255.255为目的地址，向本地范围的服务器发送IP请求分组)回环地址：127.0.0.0/8被用作回环地址，即本地地址，用的最多的是127.0.0.1。A、B、C类私有地址：也称为专用地址，不会再全球使用，只具有本地意义。A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255。B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255。C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255。注意：IP地址后的/8、/12、/16代表网络号位数，后面的主机号为可变的。</code></pre><h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><pre><code>IPv6的地址长度为2的128次方个地址。通常写作8组每组四个十六机制的形式。2001:0DB8:0000:0000:0000:0000:1428:57ab当有某组为0000时，可省略为2001:0DB8::1428:57ab同时每组前面有0时，可省略为2001:DB8::1428:57ab</code></pre><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能称为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能称为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能称为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能称为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%E3%80%81IP%E5%9C%B0%E5%9D%80%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机网络（一、网络分层）</title>
      <link>http://yoursite.com/2018/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%E3%80%81%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%E3%80%81%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%EF%BC%89/</guid>
      <pubDate>Tue, 13 Feb 2018 10:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"><a href="#成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。" class="headerlink" title="成为一名优秀的Android开发，需要一份完备的知识体系，在这里，让我们一起成长为自己所想的那样。"></a>成为一名优秀的Android开发，需要一份完备的<a href="https://jsonchao.github.io/knowledgehierarchy/" target="_blank" rel="external">知识体系</a>，在这里，让我们一起成长为自己所想的那样。</h4><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>最近工作中发现计算机相关基础很薄弱，因此，从本篇博客开始，将会对计算机相关知识进行系统性的学习总结。众所周知，计算机网络的核心就是网络协议。what（计算机网络协议是什么？）网络协议是为计算机网络中进行数据交换而建立的规则、标准或者可认为是约定的集合，它同世界各地的语言一样，品类繁多。但是，为了让使用不同协议的网络群组进行通信，在1977年到1979年，Arpa公司推出了TCP/IP标准网络协议，现如今，它已经成为了Internet中的“通用语言“（TCP/IP标准网络协议就如世界标准交流语言英语的作用一样）。why（为什么要使用它？）因为不同的用户的数据终端可能采取的字符集的不同的，两者需要通信，就必须遵循一定的标准，这个标准就是网络协议。how（如何使用它？）见下方。。</code></pre><h4 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h4><pre><code>1978年，国际标准化组织(ISO)推出了OSI/RM模型，OSI将网络协议分为7层模型，常见的网络协议分层还有TCP/IP四层模型、TCP/IP五层模型。如下图，依次为TCP/IP四层模型、TCP/IP五层模型、ISO七层模型。</code></pre><p><img src="https://note.youdao.com/yws/public/resource/12ec8de4ff02f0af21b5ce1a93cbf9a9/xmlnote/9F7557F83C3D494A81CD205B13B25D80/19018" alt="image"></p><h5 id="1-物理层："><a href="#1-物理层：" class="headerlink" title="1.物理层："></a>1.物理层：</h5><pre><code>what：为传输数据所需的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。why：因为它能确保原始的数据可在各种物理媒体上传输。how：物理层映射的设备有多种，如中继器(放大器)、集线器、光纤等等。涉及的概念：中继器：what：一种物理设备，用于放大、增强信号，频率转换及功率增强。why：因为它能放大、增强信号，可以转换频率及增强功率，主要应用于增强传输的信息强度，保证信息的到达率。how：大部分中继器只有2种功能，AP功能(有线转无线)，中继功能。使用请查看对应中继器的说明书。集线器：what：用于将多条以太网双绞线或光纤集合连接在同一段物理介质的设备。why：它是一种多端口的中继器，能够把收到的任何数字信号进行再生和放大。how：在集线器内，由于多条数据线路集合在同一物理介质下，因此，会产生信号的碰撞，目前使用交换机取代了集线器。</code></pre><h5 id="2-数据链路层"><a href="#2-数据链路层" class="headerlink" title="2.数据链路层"></a>2.数据链路层</h5><pre><code>what：将来自网络层的数据可靠地传输到相邻节点的目标机网络层的特性。why：它能给网络层提供可靠的数据传输，将来自网络层的数据组合成块，也就是帧(基本数据单位)。可用于物理地址寻址，流量控制、数据监测和重发等等。how：数据链路层映射的设备主要有2种，网桥和交换机。(遵循以太网协议)涉及到的概念;网桥：what：一种网络设备，它将网络的多个网段连接起来。why：用于网络桥接。how：使用请查看对应网桥的说明书。网络交换机：what：一种扩大网络的设备，能为子网提供更多的连接端口，以便连接更多的电脑。why：用于扩大网路信号，并且为子网提供更多的连接端口，从而能连接更多的电脑。how：网络交换机种类繁多，有2(传统)，3，4，7层交换机，使用请查看对应种类交换机的交互机说明书。</code></pre><h5 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h5><pre><code>what：它是一种实现路径选择、路由、逻辑寻址的特性。why：实现两个端系统之间数据的透明传送(基本数据单位为IP数据报)。how：网络层映射的设备主要为路由器。涉及到的概念：网络层协议(主要)：1.IP协议(Internet Protocol 因特网协议)。2.ICMP协议(Internet Control Message Protocol 因特网控制报文协议)3.ARP协议(Adrress Resolution Protocol 地址解析协议)4.RARP协议(Reverse Adrress Resolution Protocol 逆地址解析协议)路由器：what：是一种电讯网络设备，提供路由和转发两种功能。why：路由和转发功能可以为寻址提供一定的技术支持。how：使用请查看对应种类的路由器。路由：确定数据包从来源端到目的端的路由路径。转发：将数据包从路由器输入端移送到指定的输出端。</code></pre><h5 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4.传输层"></a>4.传输层</h5><pre><code>what：它是一种将上层数据分段，提供端到端的可靠地或不可靠的传输的特性。why：为数据提供可靠的传输，将数据传送到相应的端口。how：使用TCP/UDP协议进行传输。涉及到的主要概念：网关：what：转发其它服务器通信数据的服务器。why：因为它能提高通信的安全性。how：与路由器相似，但不同于路由器的是，网关能在不同的协议之间传输数据，路由器能在不同的网络之间传输数据。</code></pre><h5 id="5-会话层"><a href="#5-会话层" class="headerlink" title="5.会话层"></a>5.会话层</h5><pre><code>what：用于管理主机之间的会话进程，负责建立，管理，终止进程之间的会话。还利用在数据中插入校验点来实现数据的同步的特性。why：它能建立、管理、终止进程之间的会话。how：应用于解决网络会议中音频和视频流不同步的问题。解决网络视频中音频和视频要合并或转换时要无缝连接的问题。</code></pre><h5 id="6-表示层"><a href="#6-表示层" class="headerlink" title="6.表示层"></a>6.表示层</h5><pre><code>what：它是一个可以对上层数据或信息进行变换的特性。why：保证一个主机的应用程序信息可以被另一个主机的应用程序理解。how：具体对应为对数据进行加密、压缩、格式转换。</code></pre><h5 id="7-应用层"><a href="#7-应用层" class="headerlink" title="7.应用层"></a>7.应用层</h5><pre><code>what：它是一个为操作系统或网络应用程序提供访问网络服务接口的特性。why：为操作系统或网络应用程序提供访问网络服务的接口。how：映射为各种应用层协议(如HTTP、DNS、SMTP、FTP、Telnet、POP3协议等等)。注意：会话层、表示层、应用层的数据传输基本单位为报文。</code></pre><h4 id="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"><a href="#很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。" class="headerlink" title="很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。"></a>很感谢您阅读这篇文章，希望您能将它分享给您的朋友或技术群，这对我意义重大。</h4><h4 id="希望我们能称为朋友，在-Github、掘金上一起分享知识。"><a href="#希望我们能称为朋友，在-Github、掘金上一起分享知识。" class="headerlink" title="希望我们能称为朋友，在 Github、掘金上一起分享知识。"></a>希望我们能称为朋友，在 <a href="https://github.com/JsonChao" target="_blank" rel="external">Github</a>、<a href="https://juejin.im/user/5a3ba9375188252bca050ade" target="_blank" rel="external">掘金</a>上一起分享知识。</h4>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%E3%80%81%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python学习笔记（二、函数和高级特性？）</title>
      <link>http://yoursite.com/2018/01/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9F%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/01/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9F%EF%BC%89/</guid>
      <pubDate>Tue, 23 Jan 2018 13:23:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;随着人工智能和AI行业的兴起，Python已经成为程序员不得不学的一门编程语言了，本篇，为Python学习第二篇。
        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>随着人工智能和AI行业的兴起，Python已经成为程序员不得不学的一门编程语言了，本篇，为Python学习第二篇。</code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><pre><code>Python中的函数类似于数学中的函数。</code></pre><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><p><a href="http://docs.python.org/3/library/functions.html#abs" target="_blank" rel="external">Python中内置的函数</a></p><pre><code>例如：计算类函数：abs(x)，max(...)。数据类型转换函数：int()，str(), bool(), float()。函数名复制给变量，该变量指向了该函数的地址。因而，具有函数的功能。a = absa(-10)输出10。</code></pre><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><pre><code>def myAbs(x)：    if x &gt;= 0：        return x    else：         return -x以def为前缀 + 函数名 + (参数...), return返回函数返回值，没有return则返回None， return = return None。空函数：使用pass构造空函数def test:    pass也可以：if a &gt; 0:    pass</code></pre><h5 id="参数类型检查"><a href="#参数类型检查" class="headerlink" title="参数类型检查"></a>参数类型检查</h5><pre><code>使用isinstance检测参数类型：def myAbs(x):    if not isinstance (x, (int, float)):        raise TypeError(&quot;bad opread error&quot;)    if x &gt;= 0:        return x    else:        return -x</code></pre><h5 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h5><pre><code>当一个函数返回值有多个时，返回的是一个tuple，如(20, 30)。</code></pre><h5 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h5><pre><code>位置参数：test(x)、test(x, y)x、y的参数定义即为位置参数。默认参数：def test(x , age = 3, city = &apos;shenzhen&apos;)，其中age和city为默认参数。1.传入test(0)即为传入test(0, 3, &apos;shenzhen&apos;)。2.传入test(0, 25)即为传入test(0, 25, &apos;shenzhen&apos;)。3.传入test(0, city = &apos;guangzhou&apos;)即为传入&apos;guangzhou&apos;，注意，当参数位置不对应时，需要指明参数类型，即city。4.默认参数必须指向不变对象，使用test(city = none)替代test(city = [])，写入if(city = none):    city = []即可。额外的：为什么要设计str、none这样的不可变对象?可以避免在多线程中对象改变而造成的的错误，因此，尽量用不可变对象替代可变对象。可变参数：def test(*nums)1.可变参数在函数调用时自动组装成一个Tuple。2.nums可以是0个或多个数据。3.nums可以是一个List或者Tuple，此时*nums表示将List或者Tuple中的元素转化成可变参数传递进去。（内容拷贝）关键字参数：def test(**nums)1.关键字参数在函数调用时自动组装成一个dict。2.nums可以是0个或多个数据。3.nums可以是一个dict，此时**nums表示将dict中的元素转化为关键字参数传递进去。（内容拷贝）命名关键字参数：def test(a, *, b, c)，*，后面的为命名关键字参数。1.当函数中存在可变参数*x时，*x的作用等效于*，即此时，b、c也为命名关键字参数。2.调用含有关键字参数的函数时，应该使用key = value的形式，如本例：test(a, b = 1, c = &apos;haha&apos;)。3.当函数中指定了缺省值时，如def test(a, *x, b = 1, c)，此时，使用函数时可不填b参数。参数组合：5种参数的组合顺序为：位置参数、默认参数、可变参数、命名关键字参数、关键字参数。任意参数组合的函数都能给函数传入function(*x, **y)的组合传值形式。注意：参数组合过多会影响语义，尽量避免使用多参数组合。使用*args和**kw是习惯写法，建议遵循。</code></pre><h5 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h5><pre><code>1.优点：逻辑简单清晰，缺点：调用过深会导致栈溢出。2.可使用尾递归(返回自身本身)优化的方式避免栈溢出。3.大多数编程语言(包括Python)的编译器或解释器都没有针对尾递归进行优化。</code></pre><h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><pre><code>代码越少，效率越高。</code></pre><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><pre><code>nums = list(range(100))切片：nums[0:2] == nums[:2]表示取下标为0到2(不包括2)的数据。倒数切片：nums[-2:0] == nums[-2:]表示取下标为-2到0(不包括0)的数据。nums[:10:2]前10个数，每2个取一个。nums[::5]所有数，每5个取一个。nums[::-1]取倒数。nums[:]输出该list。注意：nums指向的数据类型是什么，nums[...]取出来的数据类型就是什么。</code></pre><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><pre><code>for i in nums不管是否有下标，只有能迭代，就能适用迭代器。对于dict，迭代的是key，迭代value：for i in nums.values()迭代key、value for i in nums.items()1.通过collections的Iterable来判读是否能迭代：from collections import Iterableisinstance(&apos;abcd&apos;, Iterable)2.使用内置的enumerate将list变成索引-元素对：for i, j in enumerate([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]):    print(i, j)</code></pre><h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><pre><code>[i * i for i in range(1, 10)][i * i for i in range(1, 10) if i % 2 == 0][i * j for i in range(1, 10) for j in range(1, 10)][i * j for i in range(1, 10) if i % 2 == 0 for j in range(1, 10) if j % 2 == 0]注意：&apos;a&apos; + 1，不同于java，python计算会出错。</code></pre><h6 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h6><pre><code>g = (x * x for x in range(10))for i in g一边循环，一边计算的机制称为生成器。获取返回值，必须捕获StopIterable异常。返回值就在包含在StopIterable的value中。except StopIterable as e：    print(e.value)    break普通函数和generate函数的区别普通函数调用直接返回结果，generate函数调用返回generate对象。</code></pre><h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h5><pre><code>直接作用于for循环的数据类型有以下几种：1.集合类型：list、tuple、dict、set、str等等。2.generate类型：generate对象和generate函数。这些可直接作用于for循环的对象称为Iterable对象。1.可直接作用于next()函数的数据类型称为Iterator对象。所有的生成器都是Iterator，而list、dict、str则不是。why：Iterator至少需满足2个条件：    1.长度不能够被提前知道。    2.可以表示无限大的数据。2.可通过iter()函数来获得一个Iterator对象。3.python的for循环的本质就是不断调用next()函数来实现的。</code></pre>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9F%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python学习笔记（一、是时候上手Python了）</title>
      <link>http://yoursite.com/2018/01/19/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%E3%80%81%E6%98%AF%E6%97%B6%E5%80%99%E4%B8%8A%E6%89%8BPython%E4%BA%86%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/01/19/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%E3%80%81%E6%98%AF%E6%97%B6%E5%80%99%E4%B8%8A%E6%89%8BPython%E4%BA%86%EF%BC%89/</guid>
      <pubDate>Fri, 19 Jan 2018 09:22:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;随着人工智能和AI行业的兴起，Python已经成为程序员不得不学的一门编程语言了，本篇，为Python学习初篇。

        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>随着人工智能和AI行业的兴起，Python已经成为程序员不得不学的一门编程语言了，本篇，为Python学习初篇。</code></pre><h4 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h4><pre><code>what：python是什么？    它是一门跨平台的高级编程语言，相对其它高级语言（如：C、Java）来说，它封装的功能更完善，能用更少的代码实现同样的功能。    python的作用？    Python的用处很多，它主要使用的领域有：    1.前后端开发    2.工具脚本开发    3.爬虫    4.人工智能、AI    优点：简洁、易懂、用更少的代码实现功能模块。    缺点：    1.程序运行速度很慢，因为python是解释性语言，计算机每执行一行python代码就会把它翻译成自身能识别的机器码，而其它语言，如C语言，则会在运行前就会被编译成计算机能识别的机制码。    2.python不能够加密，发布就是将源码发布出去，这正是解释性语言的缺陷，而编译型语言则不会，如C语言，它是将编译后得到的二进制码发布出去。why：为什么要使用python？    因为它的优点——简洁、易懂、能用更少的代码实现功能模块，特别适合做一些脚本工具。how：如何使用它？    请往下看。。。</code></pre><h4 id="安装Python开发工具（Windows系统）"><a href="#安装Python开发工具（Windows系统）" class="headerlink" title="安装Python开发工具（Windows系统）"></a>安装Python开发工具（Windows系统）</h4><pre><code>python有两个版本（2.x，3.x），只演示新版本的安装。打开python网站，选择安装Install-&gt;windows-&gt;最新relese 64bit即可，可选框全选即可。官网安装的python环境用的是CPython解释器（包含python代码的文档称为.py,解释器就是用来执行python代码的）。解释器有很多种，CPython是主流。</code></pre><h4 id="先用起来？"><a href="#先用起来？" class="headerlink" title="先用起来？"></a>先用起来？</h4><pre><code>启动方式？1.打开命令行模式，输入python进入python交互模式。输入exit()回到命令行模式。2.直接点击python终端，进入python交互模式。输入exit()退出命令行模式。注意：python交互模式的代码是输入一行，输出一行，它只适合初学者用来调试代码时使用，正常开发都是编写*.py文件，使用python *.py运行*.py文件，这样就会一次性执行python源代码。（文件名只能是英文字母、数字、下划线的组合）。</code></pre><h5 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h5><pre><code>输出：使用print()，可以“”，‘’的形式输出单个字符串，也可输出多个字符串如print(&quot;hello&quot;,&quot;I&quot;,&quot;am&quot;,&quot;jsonchao&quot;),输出时，号相当于一个空格。输入：使用input()，括号内可以写入输入的提示信息，如：name = print(&quot;please enter your name:&quot;)print(&quot;hello&quot;, name)其中name为字符串变量。</code></pre><h4 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h4><pre><code>python、C、JAVA都是高级语言，它们不同于自然语言，它们需要通过解释器或编译期将符合自身语法规则的语言转换为计算机能够执行的机器码。约定俗成的规则：1.#后面为注释；2.语句后面加：号结尾时，缩进的语句变为代码块；缩进一般为4个空格=tab键；3.不同于java，复制粘贴时，缩进的格式可能复制不过来，需要重起缩进格式；4.python程序是大小写敏感的。</code></pre><h5 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h5><pre><code>1.r&quot;&quot;表示字符串里面的内容默认不转义。2.&apos;&apos;&apos;hello    I am    jsonchao&apos;&apos;&apos;为避免加入多个\n的写法。3.布尔值：True、False首字母为大写，and、or、not为运算符。4.None为python中一个特殊的空值。5.变量a = 10    a = &quot;10&quot;，说明python是一门变量可以动态赋值为不同类型的语言，称为动态语言，而java的变量，则一开始则指定了类型，如：    int a = 10；所以java是一门静态语言。6.用大写字母规范地表示常量，虽然它的值还是可以动态改变。。。7.除法：/，//（地板除，值取整）得到的都是浮点数结果，%（取余，结果为整数）。8.python的整数没有大小限制，浮点数没有大小限制，但是超过一定值会表示为inf（无限大）。</code></pre><h5 id="字符编码和字符串"><a href="#字符编码和字符串" class="headerlink" title="字符编码和字符串"></a>字符编码和字符串</h5><pre><code>字符编码：最初的ASCLL编码为1个字节表示一个字符，由于不同国家有不同的编码，为了解决文本显示不同语言乱码的问题，国际统一了Unicode编码，一般为2个字节表示一个字符（生僻的中文为4个字节表示一个字符），为了节省Unicode在保存数据和传输数据时字符占用过多字节的问题，后面在储存和传输时会将Unicode转换为UTF-8编码，文本显示时又会转变回Unicode编码。最常用的编码为utf-8。Python的字符串：在最新的Python3中，字符是一Unicode编码的，因此，它能适配多语言。1.ord()获取字符的整数表示，chr()获取整数对应的字符。2.如果需要将字符串在进行网络传输或者存储到磁盘，就必须将其转换成bytes（字节）。3.b&apos;&apos;或b&quot;&quot;表示里面的为字节，使用encode()将字符串编码为字节，decode()将字节编码为字符串，括号内为指定的编译码格式，\x后面指定为不能被ASCLL识别的字符。b&apos;23\x3d3j&apos;.decode(&apos;utf-8&apos;, errors=&apos;ignore&apos;),以此格式指定忽略错误。4.len()表示计算出字符串的长度，内容为前缀加b则表示后面的String为字节。5.使用%d、%s、%f、%x来格式化字符串，形式为：&quot;emm..., is %s.&quot; % (jsonchao)&quot;emm...，$%d，is %s.&quot; % (10000000， jsonchao)还可以使用%0d表示0x，%.2f表示3.14这样的形式。用%%表示%字符串。还有另一种格式化字符串的方式，使用.format()，如：&apos;haha,i&apos;m {0} year\’s old, {1:.1f}%percent power&apos;.format(24, 30.555)注意，30.5会四舍五入为30.6。6.&apos;haha&apos;.replace(&apos;h&apos;, &apos;d&apos;)替换指定字符。</code></pre><h5 id="List和Tuple"><a href="#List和Tuple" class="headerlink" title="List和Tuple"></a>List和Tuple</h5><pre><code>List：MyList = [10,&apos;haha&apos;，[20, &apos;lala&apos;]]，可存储不同类型数据，元素还可以是List。MyList[-1], MyList[-2]表示取出倒数第一，二个值。MyList.append(20)，结尾添加值。MyList.insert(1, ‘haha’)，下标为1处添加值。MyList.pop()，弹出最后一个值。MyList.pop(0)，弹出第一个值。MyList[2][1],二维取值。MyList.sort()从小到大进行排序。Tuple:是不可变的，定义为：MyTuple = (20, &apos;haha&apos;)当Tuple中只表示一个元素时，必须使用MyTuple = (20,)来消除来Python以为是括号()+值的歧义。记住不变，是指Tuple的每一个元素的指向不变，并不是指向的元素内容不变。（相当于Java中指向元素的地址，C语言的指针）区别：即为可变与不可变。</code></pre><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><pre><code>if:后面会执行接下来缩进的两行代码。1.elif为else if的缩写。2.if还有如下写法：if 20:    print(&apos;nice&apos;)只要if后的内容是非0，非空List，一切非空内容即为Ture。elif 20 &lt;= bmi &lt; 25不同于java，java为bmi &gt;= 20 &amp;&amp;bmi &lt; 25。**为java平方符合^。</code></pre><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><pre><code>names = [&apos;tianshen&apos;, &apos;jsonchao&apos;, &apos;zhanshen&apos;]for x in names    print(&quot;Hello, &quot; + x + &quot;!&quot;)whilebreakcontinuebreak和continue尽量少用，易造成程序逻辑混乱。</code></pre><h5 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h5><pre><code>dict称为字典，编写形式如下：d = {&apos;hello&apos; : 1, &apos;haha&apos; : 2, &apos;emem&apos; : 3}判断是否有对应的key：&apos;hello&apos; in d,有则True，无则False。d.get(&apos;hello&apos;)获取key对应的值。没有则返回none，python交互命令环境下不显示结果。d.pop(key)删除指定key和对应的值。dict和List的区别：dict的查找和插入速度极快，不会随着元素的增多而变慢。dict占用的内存较多。空间换时间。记住,dict中的key必须是不可变元素。key + Hash算法计算出值的内存地址。  set：创建一个set，需要传入一个List进入。add(key)remove(key)set相当于一个无序和无重复元素的集合。可以使用&amp;和|来进行交并集计算。区别：唯一区别是set没有存储对应的value</code></pre>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/19/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%E3%80%81%E6%98%AF%E6%97%B6%E5%80%99%E4%B8%8A%E6%89%8BPython%E4%BA%86%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>初探JNI与NDK</title>
      <link>http://yoursite.com/2018/01/16/%E5%88%9D%E6%8E%A2JNI%E4%B8%8ENDK/</link>
      <guid>http://yoursite.com/2018/01/16/%E5%88%9D%E6%8E%A2JNI%E4%B8%8ENDK/</guid>
      <pubDate>Tue, 16 Jan 2018 07:25:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;一直以来，对JNI和NDK这块并没有进行比较系统的学习，今天，打算循序渐进，把JNI和NDK这块的知识来全面的学习一下。&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一直以来，对JNI和NDK这块并没有进行比较系统的学习，今天，打算循序渐进，把JNI和NDK这块的知识来全面的学习一下。</p><h4 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h4><pre><code>（what）定义：java native interface（即java本地接口）        作用：使java与本地类型语言（如C、C++)交互（why）在某些情况下，java需要与本地类型语言进行交互，但是由于java具备跨本台的特点，所以与本地类型语言的交互能力比较弱，所以使用JNI来增强与本地类型语言的交互能力（how）详情见Android Studio实现NDK部分</code></pre><h4 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h4><pre><code>（what）定义：native development kit（即本地开发工具包）        作用：快速开发C、C++的动态库，并自动把so和应用打包成apk，其就是一种在Android中使用jni与本地类型语言（如C、C++）交互的方式        特点：            1、性能方面：                1、运行效率高                在开发高性能的需求中，采用C、C++更有效率，本地代码（C、C++）执行算法的效率更高                2、代码安全性高                java是半解释性语言，容易被反汇编后得到源代码，而本地有些代码（C、C++）则不会，提高代码的安全性            2、功能方面：                1、功能扩展性强                能够使用其它语言的开源库            3、使用方面：                1、代码可复用及移植                使用本地语言（C、C++）开发的代码还可应用于其它支持该语言的平台            4、其它方面：                1、NDK提供的库有限，仅用于处理算法和敏感问题                2、提供了交叉编译器，用于生产特定平台的CPU动态库（why）方便在Android中使用JNI与本地语言进行交互。（how）详情见Android Studio实现NDK部分</code></pre><h4 id="JNI与NDK的关系"><a href="#JNI与NDK的关系" class="headerlink" title="JNI与NDK的关系"></a>JNI与NDK的关系</h4><pre><code>1、JNI是实现的目的，而NDK是在Android中实现JNI的手段，即在Android开发环境中，通过NDK实现JNI的功能。2、NDK提供了把.so文件和应用打包成apk的工具，而JNI没有，它只是把.so文件放在文件系统的特定位置。</code></pre><h4 id="Android-Studio实现NDK"><a href="#Android-Studio实现NDK" class="headerlink" title="Android Studio实现NDK"></a>Android Studio实现NDK</h4><p>一、Android Studio2.2之前实现NDK</p><pre><code>1、配置NDK开发环境    1、下载Android NDK工具包    2、解压NDK包    3、安装&amp;配置NDK包2、关联Android Studio项目与NDK    1、在Gradle的本地local.properties中添加配置    ndk.dir=/Users/JsonChao/Library/Android/sdk/ndk-bundle    2、在Gradle的gradle.properties中添加配置    // 对旧版本的NDK支持    android.useDeprecatedNdk=true     在app的build.gradle的defaultConfig中添加ndk节点    添加对应的moduleName（.so文件名）或者其它需要的功能3、创建本地代码文件    如果本地代码时C、C++，那么需要使用extern “C”{}把代码包进去    JNIEXPORT、jstring、JNICALL中的JNIEXPORT、JNICALL不能省略    关于方法名构成：    Java_包名_类名_方法名（Java首字母需要大写）    包名中的.变_，_变_1    新建src/main/jni，放入xxx.cpp文件    java与JNI数据类型对应的关系：    八大基本数据类型int-&gt;jint（前面直接加j）    void不变    Objec、class、String、Throwable-&gt;jobject（前面加j，第二个字母小写）    八大基本数据类型和Objec、class、String数组化    Object[]-&gt;jobjectArray(前面加j，第二个字母小写，[]数组符号变英文Array)4、创建Android.mk文件    作用：指定源码编译的配置信息    如工作目录、编译的模块的名称、编译的文件等等    放入src/main/jni中5、创建Application.mk文件    作用：配置编译平台相关内容    APP_ABI：armeabi（Android平台主要是使用armeabi）    放入src/main/jni中6、进入src/main/jni中，使用ndk-build命令编译生成.so文件，成功后，生成libs&amp;obj文件夹，.so文件在libs的armeabi文件夹中7、在新建的src/main/jniLibs文件夹中放入armeabi文件夹8、加入如下代码，在Android Studio中使用NDK实现jni功能//加载.so文件{    System.loadLibrary(&quot;hello_jni&quot;);}//映射的本地方法public native String getFromJni();</code></pre><p>二、Android Studio2.2之后实现NDK</p><p>Android Studio内部已经集成了NDK，所有只需在Android Studio内部配置即可。</p><pre><code>1、创建工程选择NDK选项，根据提示完成配置2、AS会直接生成C++代码，根据需求修改即可使用。</code></pre>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/01/16/%E5%88%9D%E6%8E%A2JNI%E4%B8%8ENDK/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
